{
  "stats": {
    "suites": 185,
    "tests": 323,
    "passes": 323,
    "pending": 0,
    "failures": 0,
    "start": "2021-10-06T15:58:51.555Z",
    "end": "2021-10-06T16:00:32.845Z",
    "duration": 101290,
    "testsRegistered": 323,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "81c33ff4-6562-4863-bbc9-55d869e56077",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 1,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "createdID.forEach((id) => {\n  itinerary.findByIdAndRemove(id, (err) => {\n    if (err) {\n      // console.log(err)\n    }\n  })\n})",
          "err": {},
          "uuid": "45593d75-3412-4bf1-918c-92fb5ed082af",
          "parentUUID": "81c33ff4-6562-4863-bbc9-55d869e56077",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "fd4f85ea-6c84-49e8-81cd-e4338e5bced3",
          "title": "*********** AUTH_ADMIN ***********",
          "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\auth.js",
          "file": "\\test\\testAdmin\\auth.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"*********** AUTH_ADMIN ***********\"",
              "fullTitle": "*********** AUTH_ADMIN *********** \"after all\" hook in \"*********** AUTH_ADMIN ***********\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "createdID.forEach((id) => {\n  User.findByIdAndRemove(id, (err) => {\n    if (err) {\n      // console.log(err)\n    }\n  })\n})",
              "err": {},
              "uuid": "3354d567-b9bf-4b52-af63-70ee9a569aa2",
              "parentUUID": "fd4f85ea-6c84-49e8-81cd-e4338e5bced3",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "06f6fba7-b00e-43cd-8217-afcbcddad64d",
              "title": "/GET /",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\auth.js",
              "file": "\\test\\testAdmin\\auth.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET home user url",
                  "fullTitle": "*********** AUTH_ADMIN *********** /GET / it should GET home user url",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/`)\n  .end((err, res) => {\n    res.should.have.status(200)\n    done()\n  })",
                  "err": {},
                  "uuid": "43554aeb-5636-49fb-8249-33d7d1dcbdcd",
                  "parentUUID": "06f6fba7-b00e-43cd-8217-afcbcddad64d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "43554aeb-5636-49fb-8249-33d7d1dcbdcd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 43,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "c3bb1a6c-131b-48a7-be71-0c58d9e83648",
              "title": "/GET /404url",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\auth.js",
              "file": "\\test\\testAdmin\\auth.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET 404 url",
                  "fullTitle": "*********** AUTH_ADMIN *********** /GET /404url it should GET 404 url",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get('/404url')\n  .end((err, res) => {\n    res.should.have.status(404)\n    res.body.should.be.an('object')\n    done()\n  })",
                  "err": {},
                  "uuid": "80c163c8-ca5d-4ab4-839b-d7cdde49655e",
                  "parentUUID": "c3bb1a6c-131b-48a7-be71-0c58d9e83648",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "80c163c8-ca5d-4ab4-839b-d7cdde49655e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "232053b0-1603-4e78-a271-2c88e8a10114",
              "title": "/POST login",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\auth.js",
              "file": "\\test\\testAdmin\\auth.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "error login",
                  "fullTitle": "*********** AUTH_ADMIN *********** /POST login error login",
                  "timedOut": false,
                  "duration": 220,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/login`)\n  .send({ email: 'admin@admin.com', password: 'error password' })\n  .end((err, res) => {\n    res.should.have.status(422)\n    res.body.should.have.property('errors').eql({ msg: { msg: 'WRONG_PASSWORD' } })\n    res.body.should.be.an('object')\n    done()\n  })",
                  "err": {},
                  "uuid": "555433e2-ba97-4941-8142-302e6e0902b5",
                  "parentUUID": "232053b0-1603-4e78-a271-2c88e8a10114",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET token",
                  "fullTitle": "*********** AUTH_ADMIN *********** /POST login it should GET token",
                  "timedOut": false,
                  "duration": 289,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/login`)\n  .send(loginDetails)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.an('object')\n    body.should.include.keys('accessToken', 'user')\n    token = res.body.accessToken\n    done()\n  })",
                  "err": {},
                  "uuid": "b5a75f80-ce8e-485b-89b9-c89d616ab548",
                  "parentUUID": "232053b0-1603-4e78-a271-2c88e8a10114",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "555433e2-ba97-4941-8142-302e6e0902b5",
                "b5a75f80-ce8e-485b-89b9-c89d616ab548"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 509,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "90144a13-4f99-46c2-adf8-2cd539286233",
              "title": "/POST register",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\auth.js",
              "file": "\\test\\testAdmin\\auth.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should POST register",
                  "fullTitle": "*********** AUTH_ADMIN *********** /POST register it should POST register",
                  "timedOut": false,
                  "duration": 101,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n  name: faker.random.words(),\n  surname: faker.random.words(),\n  email,\n  password: faker.random.words()\n}\nchai\n  .request(server)\n  .post(`${url}/register`)\n  .send(user)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.an('object')\n    body.should.include.keys('accessToken', 'user')\n    body.user.should.have.property('email').eql(email.toLowerCase())\n    createdID.push(res.body.user._id)\n    done()\n  })",
                  "err": {},
                  "uuid": "3d50a2dc-2ae7-41e1-b858-3067f7222698",
                  "parentUUID": "90144a13-4f99-46c2-adf8-2cd539286233",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT POST a register empty values",
                  "fullTitle": "*********** AUTH_ADMIN *********** /POST register it should NOT POST a register empty values",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n  surname: faker.random.words()\n}\nchai\n  .request(server)\n  .post(`${url}/register`)\n  .send(user)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(422)\n    body.should.be.a('object')\n    body.should.have.property('errors')\n    const { errors } = body\n    errors.should.have.property('msg').be.a('array')\n    done()\n  })",
                  "err": {},
                  "uuid": "a17810b3-c54e-47a7-9ba5-020a86c7e2df",
                  "parentUUID": "90144a13-4f99-46c2-adf8-2cd539286233",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT POST a register if email already exists",
                  "fullTitle": "*********** AUTH_ADMIN *********** /POST register it should NOT POST a register if email already exists",
                  "timedOut": false,
                  "duration": 117,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n  name: faker.random.words(),\n  surname: faker.random.words(),\n  email,\n  password: faker.random.words()\n}\nchai\n  .request(server)\n  .post(`${url}/register`)\n  .send(user)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(422)\n    body.should.be.a('object')\n    body.should.have.property('errors')\n    const { msg } = body.errors\n    const message = `E11000 duplicate key error collection: oauth_service.users index: email_1 dup key: { email: \"${email.toLowerCase()}\" }`\n    msg.should.have.property('msg').eql(message)\n    done()\n  })",
                  "err": {},
                  "uuid": "901e1d61-bb92-4c24-bbd3-a094445b4f9d",
                  "parentUUID": "90144a13-4f99-46c2-adf8-2cd539286233",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3d50a2dc-2ae7-41e1-b858-3067f7222698",
                "a17810b3-c54e-47a7-9ba5-020a86c7e2df",
                "901e1d61-bb92-4c24-bbd3-a094445b4f9d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 222,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "afea712e-ca3f-460f-bac8-6fd9cf03875c",
              "title": "/POST forgot",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\auth.js",
              "file": "\\test\\testAdmin\\auth.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should Error  POST forgot",
                  "fullTitle": "*********** AUTH_ADMIN *********** /POST forgot it should Error  POST forgot",
                  "timedOut": false,
                  "duration": 103,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/forgot`)\n  .send({\n    email: faker.internet.email()\n  })\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(422)\n    body.should.be.an('object')\n    body.should.have.property('errors')\n    body.errors.should.have.property('msg').eql({ msg: 'USER_DOES_NOT_EXIST' })\n    verificationForgot = res.body.verification\n    done()\n  })",
                  "err": {},
                  "uuid": "a3a509c8-eab9-499d-af1e-4ef3a6eca039",
                  "parentUUID": "afea712e-ca3f-460f-bac8-6fd9cf03875c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should POST forgot",
                  "fullTitle": "*********** AUTH_ADMIN *********** /POST forgot it should POST forgot",
                  "timedOut": false,
                  "duration": 238,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const object = {\n  email\n}\nchai\n  .request(server)\n  .post(`${url}/forgot`)\n  .send(object)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('object')\n    res.body.should.include.keys('msg', 'verification')\n    verificationForgot = res.body.verification\n    done()\n  })",
                  "err": {},
                  "uuid": "e6a1e477-9fbc-4c9c-80f6-911b97074695",
                  "parentUUID": "afea712e-ca3f-460f-bac8-6fd9cf03875c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a3a509c8-eab9-499d-af1e-4ef3a6eca039",
                "e6a1e477-9fbc-4c9c-80f6-911b97074695"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 341,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "b1c438a1-2da2-4f4f-bc3c-e0f0a94b5d76",
              "title": "/POST reset",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\auth.js",
              "file": "\\test\\testAdmin\\auth.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should POST reset",
                  "fullTitle": "*********** AUTH_ADMIN *********** /POST reset it should POST reset",
                  "timedOut": false,
                  "duration": 367,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/resetAdmin`)\n  .send({\n    id: verificationForgot,\n    password: '12345'\n  })\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.a('object')\n    res.body.should.have.property('msg').eql('PASSWORD_CHANGED')\n    done()\n  })",
                  "err": {},
                  "uuid": "610ac548-edce-4fc5-a32a-963bd83da71c",
                  "parentUUID": "b1c438a1-2da2-4f4f-bc3c-e0f0a94b5d76",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "610ac548-edce-4fc5-a32a-963bd83da71c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 367,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "fc976aa6-a422-40a3-b049-295e55a232c3",
              "title": "/GET token",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\auth.js",
              "file": "\\test\\testAdmin\\auth.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should NOT be able to consume the route since no token was sent",
                  "fullTitle": "*********** AUTH_ADMIN *********** /GET token it should NOT be able to consume the route since no token was sent",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/token`)\n  .end((err, res) => {\n    res.should.have.status(401)\n    done()\n  })",
                  "err": {},
                  "uuid": "2aba34cf-2deb-4f16-a4c5-4922ed44ef1f",
                  "parentUUID": "fc976aa6-a422-40a3-b049-295e55a232c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET a fresh token",
                  "fullTitle": "*********** AUTH_ADMIN *********** /GET token it should GET a fresh token",
                  "timedOut": false,
                  "duration": 403,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/exchange`)\n  .send({\n    accessToken: token\n  })\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.an('object')\n    body.should.include.keys('token', 'user')\n    const currentToken = body.token\n    token = currentToken\n    done()\n  })",
                  "err": {},
                  "uuid": "6cb3e015-cbc1-4416-8ac0-e9b63740dcb8",
                  "parentUUID": "fc976aa6-a422-40a3-b049-295e55a232c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET refresh token",
                  "fullTitle": "*********** AUTH_ADMIN *********** /GET token it should GET refresh token",
                  "timedOut": false,
                  "duration": 455,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/token`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.an('object')\n    body.should.include.keys('token', 'user', 'settings')\n    done()\n  })",
                  "err": {},
                  "uuid": "40b77a8a-51ee-43b3-a5d5-60392f402550",
                  "parentUUID": "fc976aa6-a422-40a3-b049-295e55a232c3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2aba34cf-2deb-4f16-a4c5-4922ed44ef1f",
                "6cb3e015-cbc1-4416-8ac0-e9b63740dcb8",
                "40b77a8a-51ee-43b3-a5d5-60392f402550"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 861,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "f1b19726-2ec9-4983-b486-431ebf8c60b4",
          "title": "*********** BLOGS_ADMIN ***********",
          "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\blogs.js",
          "file": "\\test\\testAdmin\\blogs.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"*********** BLOGS_ADMIN ***********\"",
              "fullTitle": "*********** BLOGS_ADMIN *********** \"after all\" hook in \"*********** BLOGS_ADMIN ***********\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "createdID.forEach((idBlog) => {\n  Blog.findByIdAndRemove(idBlog, (err) => {\n    if (err) {\n      // console.log(err)\n    }\n  })\n})",
              "err": {},
              "uuid": "ccc146f4-98b8-4052-852d-54c87815a7a8",
              "parentUUID": "f1b19726-2ec9-4983-b486-431ebf8c60b4",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "9730bcf6-1c49-42e7-ada6-a2cf5b318186",
              "title": "/POST login",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\blogs.js",
              "file": "\\test\\testAdmin\\blogs.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET token user",
                  "fullTitle": "*********** BLOGS_ADMIN *********** /POST login it should GET token user",
                  "timedOut": false,
                  "duration": 278,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/login`)\n  .send(loginDetails)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('object')\n    res.body.should.include.keys('accessToken', 'user')\n    const currentAccessToken = res.body.accessToken\n    accessToken = currentAccessToken\n    done()\n  })",
                  "err": {},
                  "uuid": "d6e3d14a-d3bd-4799-b62e-b2d0d45cb7f8",
                  "parentUUID": "9730bcf6-1c49-42e7-ada6-a2cf5b318186",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET a fresh token",
                  "fullTitle": "*********** BLOGS_ADMIN *********** /POST login it should GET a fresh token",
                  "timedOut": false,
                  "duration": 360,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/exchange`)\n  .send({\n    accessToken\n  })\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.an('object')\n    body.should.include.keys('token', 'user')\n    const currentToken = body.token\n    token = currentToken\n    done()\n  })",
                  "err": {},
                  "uuid": "83e90b83-4d1e-4f05-a3f2-8cc47e9f5f87",
                  "parentUUID": "9730bcf6-1c49-42e7-ada6-a2cf5b318186",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d6e3d14a-d3bd-4799-b62e-b2d0d45cb7f8",
                "83e90b83-4d1e-4f05-a3f2-8cc47e9f5f87"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 638,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "ac293432-faae-400e-9cd4-b4d590fcf838",
              "title": "/POST blogs",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\blogs.js",
              "file": "\\test\\testAdmin\\blogs.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should NOT POST a blogs without blogs",
                  "fullTitle": "*********** BLOGS_ADMIN *********** /POST blogs it should NOT POST a blogs without blogs",
                  "timedOut": false,
                  "duration": 196,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const blogPostOne = {}\nchai\n  .request(server)\n  .post(`${url}/blogs`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(blogPostOne)\n  .end((err, res) => {\n    res.should.have.status(422)\n    const { body } = res\n    body.should.be.a('object')\n    body.should.have.property('errors')\n    const { errors } = body\n    errors.should.have.property('msg').be.a('array').length(4)\n    done()\n  })",
                  "err": {},
                  "uuid": "0e42f9d5-7c78-4e93-bc1e-9a3e20856d5a",
                  "parentUUID": "ac293432-faae-400e-9cd4-b4d590fcf838",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should POST a blogs ",
                  "fullTitle": "*********** BLOGS_ADMIN *********** /POST blogs it should POST a blogs ",
                  "timedOut": false,
                  "duration": 363,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const blogsPostTwo = {\n  title,\n  description\n}\nchai\n  .request(server)\n  .post(`${url}/blogs`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(blogsPostTwo)\n  .end((err, res) => {\n    res.should.have.status(201)\n    const { body } = res\n    body.should.be.a('object')\n    body.should.have.property('title').eql(title)\n    body.should.have.property('description').eql(description)\n    body.should.include.keys('_id', 'title', 'description', 'userCreator', 'slug')\n    createdID.push(res.body._id)\n    done()\n  })",
                  "err": {},
                  "uuid": "6ae2bc46-ffab-4d3e-8a20-ca30a049ca57",
                  "parentUUID": "ac293432-faae-400e-9cd4-b4d590fcf838",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT be able to consume the route since no token was sent",
                  "fullTitle": "*********** BLOGS_ADMIN *********** /POST blogs it should NOT be able to consume the route since no token was sent",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const blogsPostTwo = {\n  title,\n  description\n}\nchai\n  .request(server)\n  .post(`${url}/blogs`)\n  .send(blogsPostTwo)\n  .end((err, res) => {\n    res.should.have.status(401)\n    done()\n  })",
                  "err": {},
                  "uuid": "7c53e2ff-264a-4e62-8e42-ca894348dc60",
                  "parentUUID": "ac293432-faae-400e-9cd4-b4d590fcf838",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0e42f9d5-7c78-4e93-bc1e-9a3e20856d5a",
                "6ae2bc46-ffab-4d3e-8a20-ca30a049ca57",
                "7c53e2ff-264a-4e62-8e42-ca894348dc60"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 563,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "c929d00c-93ee-41b5-adb2-e4412f432369",
              "title": "/PATCH/:id blogs",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\blogs.js",
              "file": "\\test\\testAdmin\\blogs.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should UPDATE a blogs given the id",
                  "fullTitle": "*********** BLOGS_ADMIN *********** /PATCH/:id blogs it should UPDATE a blogs given the id",
                  "timedOut": false,
                  "duration": 273,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const firstBlog = createdID.slice(-1).pop()\nchai\n  .request(server)\n  .patch(`${url}/blogs/${firstBlog}`)\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    title: newtitle,\n    description: newDescription\n  })\n  .end((error, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.a('object')\n    body.should.include.keys('_id', 'title', 'description', 'userCreator', 'slug')\n    body.should.have.property('_id').eql(firstBlog)\n    body.should.have.property('title').eql(newtitle)\n    body.should.have.property('description').eql(newDescription)\n    createdID.push(res.body._id)\n    done()\n  })",
                  "err": {},
                  "uuid": "b3ac2e9a-006d-4bf8-8cdd-d6c3eb3056c2",
                  "parentUUID": "c929d00c-93ee-41b5-adb2-e4412f432369",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT be able to consume the route since no token was sent",
                  "fullTitle": "*********** BLOGS_ADMIN *********** /PATCH/:id blogs it should NOT be able to consume the route since no token was sent",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const secondId = createdID.slice(-1).pop()\nchai\n  .request(server)\n  .patch(`${url}/blogs/${secondId}`)\n  .send({\n    title: newtitle,\n    description: newDescription\n  })\n  .end((err, res) => {\n    res.should.have.status(401)\n    done()\n  })",
                  "err": {},
                  "uuid": "a1c937b1-00b0-4fd9-b4de-c3c6bd1b53d0",
                  "parentUUID": "c929d00c-93ee-41b5-adb2-e4412f432369",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b3ac2e9a-006d-4bf8-8cdd-d6c3eb3056c2",
                "a1c937b1-00b0-4fd9-b4de-c3c6bd1b53d0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 275,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "8562940b-6e04-4756-a5c9-75d9a18b75f3",
              "title": "/DELETE/:id blogs",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\blogs.js",
              "file": "\\test\\testAdmin\\blogs.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should DELETE a blogs given the id",
                  "fullTitle": "*********** BLOGS_ADMIN *********** /DELETE/:id blogs it should DELETE a blogs given the id",
                  "timedOut": false,
                  "duration": 639,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const blogsdelete = {\n  title: faker.random.words(),\n  description: faker.random.words()\n}\nchai\n  .request(server)\n  .post(`${url}/blogs`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(blogsdelete)\n  .end((err, res) => {\n    res.should.have.status(201)\n    res.body.should.be.a('object')\n    res.body.should.include.keys(\n      '_id',\n      'description',\n      'title',\n      'slug'\n    )\n    chai\n      .request(server)\n      .delete(`${url}/blogs/${res.body._id}`)\n      .set('Authorization', `Bearer ${token}`)\n      .end((error, result) => {\n        const { body } = result\n        result.should.have.status(200)\n        body.should.be.a('object')\n        body.should.have.property('msg').eql('DELETED')\n        done()\n      })\n  })",
                  "err": {},
                  "uuid": "dfc2788e-86a1-4650-aee8-6318be8f1898",
                  "parentUUID": "8562940b-6e04-4756-a5c9-75d9a18b75f3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dfc2788e-86a1-4650-aee8-6318be8f1898"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 639,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "d1bdc5a0-e4d6-4052-8224-166bc9b35fd6",
          "title": "*********** CATEGORIES_ADMIN ***********",
          "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\categories.js",
          "file": "\\test\\testAdmin\\categories.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"*********** CATEGORIES_ADMIN ***********\"",
              "fullTitle": "*********** CATEGORIES_ADMIN *********** \"after all\" hook in \"*********** CATEGORIES_ADMIN ***********\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "createdID.forEach((id) => {\n  category.findByIdAndRemove(id, (err) => {\n    if (err) {\n      // console.log(err)\n    }\n  })\n})",
              "err": {},
              "uuid": "d5b7b314-c738-4b00-9001-f7f59e152dde",
              "parentUUID": "d1bdc5a0-e4d6-4052-8224-166bc9b35fd6",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "bab7d4a8-b475-42be-96db-cfb0a6235492",
              "title": "/POST login",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\categories.js",
              "file": "\\test\\testAdmin\\categories.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET token user",
                  "fullTitle": "*********** CATEGORIES_ADMIN *********** /POST login it should GET token user",
                  "timedOut": false,
                  "duration": 266,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/login`)\n  .send(loginDetails)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('object')\n    res.body.should.include.keys('accessToken', 'user')\n    const currentAccessToken = res.body.accessToken\n    accessToken = currentAccessToken\n    done()\n  })",
                  "err": {},
                  "uuid": "ec5b1242-cade-420f-8f21-01ffe4272a5b",
                  "parentUUID": "bab7d4a8-b475-42be-96db-cfb0a6235492",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET a fresh token",
                  "fullTitle": "*********** CATEGORIES_ADMIN *********** /POST login it should GET a fresh token",
                  "timedOut": false,
                  "duration": 358,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/exchange`)\n  .send({\n    accessToken\n  })\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.an('object')\n    body.should.include.keys('token', 'user')\n    const currentToken = body.token\n    token = currentToken\n    done()\n  })",
                  "err": {},
                  "uuid": "d6305d2b-7705-4f13-9ffd-fc9732fcd17f",
                  "parentUUID": "bab7d4a8-b475-42be-96db-cfb0a6235492",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ec5b1242-cade-420f-8f21-01ffe4272a5b",
                "d6305d2b-7705-4f13-9ffd-fc9732fcd17f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 624,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "56d14127-043d-4369-9469-90762ec69a2d",
              "title": "/POST categories",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\categories.js",
              "file": "\\test\\testAdmin\\categories.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should NOT POST a category without category",
                  "fullTitle": "*********** CATEGORIES_ADMIN *********** /POST categories it should NOT POST a category without category",
                  "timedOut": false,
                  "duration": 190,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const categoryPostOne = {}\nchai\n  .request(server)\n  .post(`${url}/categories`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(categoryPostOne)\n  .end((err, res) => {\n    res.should.have.status(422)\n    const { body } = res\n    body.should.be.a('object')\n    body.should.have.property('errors')\n    const { errors } = body\n    errors.should.have.property('msg').be.a('array')\n    done()\n  })",
                  "err": {},
                  "uuid": "2046126f-d890-4c48-aaac-4b87f38c9951",
                  "parentUUID": "56d14127-043d-4369-9469-90762ec69a2d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should POST a category ",
                  "fullTitle": "*********** CATEGORIES_ADMIN *********** /POST categories it should POST a category ",
                  "timedOut": false,
                  "duration": 267,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const categoryPostTwo = {\n  name,\n  icon,\n  description\n}\nchai\n  .request(server)\n  .post(`${url}/categories`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(categoryPostTwo)\n  .end((err, res) => {\n    res.should.have.status(201)\n    const { body } = res\n    body.should.be.a('object')\n    body.should.include.keys('_id', 'name', 'description')\n    body.should.have.property('name').eql(name)\n    body.should.have.property('description').eql(description)\n    body.should.have.property('_id').be.a('string')\n    createdID.push(res.body._id)\n    done()\n  })",
                  "err": {},
                  "uuid": "ecf0d56f-5dea-432c-a3f7-8ab48f7b869b",
                  "parentUUID": "56d14127-043d-4369-9469-90762ec69a2d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2046126f-d890-4c48-aaac-4b87f38c9951",
                "ecf0d56f-5dea-432c-a3f7-8ab48f7b869b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 457,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "1511cab8-7dd2-44ea-8139-91a8ccba9b65",
              "title": "/GET/:id categories",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\categories.js",
              "file": "\\test\\testAdmin\\categories.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET a categories by the given id",
                  "fullTitle": "*********** CATEGORIES_ADMIN *********** /GET/:id categories it should GET a categories by the given id",
                  "timedOut": false,
                  "duration": 258,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nchai\n  .request(server)\n  .get(`${url}/categories/${id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((error, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.a('object')\n    body.should.include.keys('name', 'description', '_id')\n    body.should.have.property('_id').eql(id)\n    done()\n  })",
                  "err": {},
                  "uuid": "51390cba-3004-44fd-9881-4ff23eb7050f",
                  "parentUUID": "1511cab8-7dd2-44ea-8139-91a8ccba9b65",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT be able to consume the route since no token was sent",
                  "fullTitle": "*********** CATEGORIES_ADMIN *********** /GET/:id categories it should NOT be able to consume the route since no token was sent",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nchai\n  .request(server)\n  .get(`${url}/categories/${id}`)\n  .end((err, res) => {\n    res.should.have.status(401)\n    done()\n  })",
                  "err": {},
                  "uuid": "3a942cc6-7321-47be-bbe5-cb408ba3cf53",
                  "parentUUID": "1511cab8-7dd2-44ea-8139-91a8ccba9b65",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "51390cba-3004-44fd-9881-4ff23eb7050f",
                "3a942cc6-7321-47be-bbe5-cb408ba3cf53"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 261,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "f24dc6f6-86f9-4f4f-9de0-a6492c1666a4",
              "title": "/PATCH/:id categories",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\categories.js",
              "file": "\\test\\testAdmin\\categories.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should UPDATE a category given the id",
                  "fullTitle": "*********** CATEGORIES_ADMIN *********** /PATCH/:id categories it should UPDATE a category given the id",
                  "timedOut": false,
                  "duration": 275,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nchai\n  .request(server)\n  .patch(`${url}/categories/${id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    name: newCategory,\n    icon: faker.random.words(),\n    description: faker.random.words()\n  })\n  .end((error, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.a('object')\n    body.should.have.property('_id').eql(id)\n    body.should.have.property('name').eql(newCategory)\n    body._id.should.be.a('string')\n    createdID.push(res.body._id)\n    done()\n  })",
                  "err": {},
                  "uuid": "ccab9414-66d9-429d-91b9-86cf25478375",
                  "parentUUID": "f24dc6f6-86f9-4f4f-9de0-a6492c1666a4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should not UPDATE a departure empty",
                  "fullTitle": "*********** CATEGORIES_ADMIN *********** /PATCH/:id categories it should not UPDATE a departure empty",
                  "timedOut": false,
                  "duration": 171,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nchai\n  .request(server)\n  .patch(`${url}/categories/${id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .send({})\n  .end((error, res) => {\n    const { body } = res\n    res.should.have.status(422)\n    body.should.be.a('object')\n    body.should.have.property('errors')\n    done()\n  })",
                  "err": {},
                  "uuid": "77abdbca-1d70-4c22-87b8-224628a48666",
                  "parentUUID": "f24dc6f6-86f9-4f4f-9de0-a6492c1666a4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT be able to consume the route since no token was sent",
                  "fullTitle": "*********** CATEGORIES_ADMIN *********** /PATCH/:id categories it should NOT be able to consume the route since no token was sent",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nchai\n  .request(server)\n  .patch(`${url}/categories/${id}`)\n  .send({\n    name: newCategory,\n    icon: faker.random.words(),\n    description: faker.random.words()\n  })\n  .end((err, res) => {\n    res.should.have.status(401)\n    done()\n  })",
                  "err": {},
                  "uuid": "348879d8-8862-45d2-9490-9ac3f494d35e",
                  "parentUUID": "f24dc6f6-86f9-4f4f-9de0-a6492c1666a4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ccab9414-66d9-429d-91b9-86cf25478375",
                "77abdbca-1d70-4c22-87b8-224628a48666",
                "348879d8-8862-45d2-9490-9ac3f494d35e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 450,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "3a000dfa-2f43-45d6-8d85-8db550ecf987",
              "title": "/DELETE/:id category",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\categories.js",
              "file": "\\test\\testAdmin\\categories.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should DELETE a category given the id",
                  "fullTitle": "*********** CATEGORIES_ADMIN *********** /DELETE/:id category it should DELETE a category given the id",
                  "timedOut": false,
                  "duration": 555,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const categorydelete = {\n  name: faker.random.words(),\n  icon: faker.random.words(),\n  description: faker.random.words()\n}\nchai\n  .request(server)\n  .post(`${url}/categories`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(categorydelete)\n  .end((err, res) => {\n    res.should.have.status(201)\n    res.body.should.be.a('object')\n    res.body.should.include.keys(\n      '_id',\n      'name',\n      'icon',\n      'description'\n    )\n    chai\n      .request(server)\n      .delete(`${url}/categories/${res.body._id}`)\n      .set('Authorization', `Bearer ${token}`)\n      .end((error, result) => {\n        const { body } = result\n        result.should.have.status(200)\n        body.should.be.a('object')\n        body.should.have.property('msg').eql('DELETED')\n        done()\n      })\n  })",
                  "err": {},
                  "uuid": "eae8867e-a878-4dec-857b-082b5c0390c8",
                  "parentUUID": "3a000dfa-2f43-45d6-8d85-8db550ecf987",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eae8867e-a878-4dec-857b-082b5c0390c8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 555,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "8d743c90-8cf7-4eed-b2b3-844f55720388",
          "title": "*********** COMMENTS_ADMIN ***********",
          "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\comments.js",
          "file": "\\test\\testAdmin\\comments.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"*********** COMMENTS_ADMIN ***********\"",
              "fullTitle": "*********** COMMENTS_ADMIN *********** \"after all\" hook in \"*********** COMMENTS_ADMIN ***********\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "createdID.forEach((id) => {\n  comment.findByIdAndRemove(id, (err) => {\n    if (err) {\n      // console.log(err)\n    }\n  })\n})",
              "err": {},
              "uuid": "576e8db1-bab9-4e87-9638-77ff97d3b09a",
              "parentUUID": "8d743c90-8cf7-4eed-b2b3-844f55720388",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "b899f07b-ce83-4e98-a0c9-7163533ab4d4",
              "title": "/POST login",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\comments.js",
              "file": "\\test\\testAdmin\\comments.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET token user",
                  "fullTitle": "*********** COMMENTS_ADMIN *********** /POST login it should GET token user",
                  "timedOut": false,
                  "duration": 276,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/login`)\n  .send(loginDetails)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('object')\n    res.body.should.include.keys('accessToken', 'user')\n    const currentAccessToken = res.body.accessToken\n    accessToken = currentAccessToken\n    done()\n  })",
                  "err": {},
                  "uuid": "42c1401b-2844-4b0a-85d0-6293817d0189",
                  "parentUUID": "b899f07b-ce83-4e98-a0c9-7163533ab4d4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET a fresh token",
                  "fullTitle": "*********** COMMENTS_ADMIN *********** /POST login it should GET a fresh token",
                  "timedOut": false,
                  "duration": 375,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/exchange`)\n  .send({\n    accessToken\n  })\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.an('object')\n    body.should.include.keys('token', 'user')\n    const currentToken = body.token\n    token = currentToken\n    done()\n  })",
                  "err": {},
                  "uuid": "dafb02b0-f58c-4a5f-87c9-40b99bf1e40f",
                  "parentUUID": "b899f07b-ce83-4e98-a0c9-7163533ab4d4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "42c1401b-2844-4b0a-85d0-6293817d0189",
                "dafb02b0-f58c-4a5f-87c9-40b99bf1e40f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 651,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "070452d6-8567-4f5b-b123-00b5c124499e",
              "title": "/POST comments",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\comments.js",
              "file": "\\test\\testAdmin\\comments.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should NOT POST a comment without comment",
                  "fullTitle": "*********** COMMENTS_ADMIN *********** /POST comments it should NOT POST a comment without comment",
                  "timedOut": false,
                  "duration": 87,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const commentPostOne = {}\nchai\n  .request(server)\n  .post(`${url}/comments`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(commentPostOne)\n  .end((err, res) => {\n    res.should.have.status(422)\n    const { body } = res\n    body.should.be.a('object')\n    body.should.have.property('errors')\n    const { errors } = body\n    errors.should.have.property('msg').be.a('array')\n    done()\n  })",
                  "err": {},
                  "uuid": "43402f03-846d-4186-bbcb-b1de3e8a45b5",
                  "parentUUID": "070452d6-8567-4f5b-b123-00b5c124499e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should POST a comment ",
                  "fullTitle": "*********** COMMENTS_ADMIN *********** /POST comments it should POST a comment ",
                  "timedOut": false,
                  "duration": 196,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const commentPostTwo = {\n  vote: 3,\n  content,\n  idUser,\n  status: 'publish',\n  tags: ['tren']\n}\nchai\n  .request(server)\n  .post(`${url}/comments`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(commentPostTwo)\n  .end((err, res) => {\n    res.should.have.status(201)\n    const { body } = res\n    body.should.be.a('object')\n    body.should.include.keys('_id', 'vote', 'content')\n    body.should.have.property('status').eql('publish')\n    body.should.have.property('content').eql(content)\n    body.should.have.property('_id').be.a('string')\n    createdID.push(res.body._id)\n    done()\n  })",
                  "err": {},
                  "uuid": "4f0c572e-b358-4fb1-9230-c74d881241ca",
                  "parentUUID": "070452d6-8567-4f5b-b123-00b5c124499e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "43402f03-846d-4186-bbcb-b1de3e8a45b5",
                "4f0c572e-b358-4fb1-9230-c74d881241ca"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 283,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "844d5008-016d-402c-8abb-880e555e3887",
              "title": "/GET comments",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\comments.js",
              "file": "\\test\\testAdmin\\comments.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET all the comments",
                  "fullTitle": "*********** COMMENTS_ADMIN *********** /GET comments it should GET all the comments",
                  "timedOut": false,
                  "duration": 189,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/comments`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    const { body } = res\n    const { docs } = body\n    const commentFirst = _.head(docs)\n    res.should.have.status(200)\n    body.should.be.an('object')\n    docs.should.have.lengthOf(1)\n    id = commentFirst._id\n    commentFirst.should.include.keys('_id', 'content', 'vote')\n    done()\n  })",
                  "err": {},
                  "uuid": "d6cd9e8d-1b4f-40c7-ad52-160349013f41",
                  "parentUUID": "844d5008-016d-402c-8abb-880e555e3887",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should not GET comments unauthorized",
                  "fullTitle": "*********** COMMENTS_ADMIN *********** /GET comments it should not GET comments unauthorized",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/comments`)\n  .end((err, res) => {\n    res.should.have.status(401)\n    done()\n  })",
                  "err": {},
                  "uuid": "d85484db-899d-4b54-a812-32acc48c9355",
                  "parentUUID": "844d5008-016d-402c-8abb-880e555e3887",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d6cd9e8d-1b4f-40c7-ad52-160349013f41",
                "d85484db-899d-4b54-a812-32acc48c9355"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 192,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "445b8368-4f9d-4570-a635-2abeeb23254b",
              "title": "/GET/:id comments",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\comments.js",
              "file": "\\test\\testAdmin\\comments.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET a comments by the given id",
                  "fullTitle": "*********** COMMENTS_ADMIN *********** /GET/:id comments it should GET a comments by the given id",
                  "timedOut": false,
                  "duration": 173,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nchai\n  .request(server)\n  .get(`${url}/comments/${id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((error, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.a('object')\n    body.should.include.keys('status', 'tags', '_id')\n    body.should.have.property('_id').eql(id)\n    done()\n  })",
                  "err": {},
                  "uuid": "d8b464f0-1800-496e-8159-d2fbedcb2aa4",
                  "parentUUID": "445b8368-4f9d-4570-a635-2abeeb23254b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT be able to consume the route since no token was sent",
                  "fullTitle": "*********** COMMENTS_ADMIN *********** /GET/:id comments it should NOT be able to consume the route since no token was sent",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nchai\n  .request(server)\n  .get(`${url}/comments/${id}`)\n  .end((err, res) => {\n    res.should.have.status(401)\n    done()\n  })",
                  "err": {},
                  "uuid": "d7c0e7b5-2adb-4289-8ada-4b44ebec248b",
                  "parentUUID": "445b8368-4f9d-4570-a635-2abeeb23254b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d8b464f0-1800-496e-8159-d2fbedcb2aa4",
                "d7c0e7b5-2adb-4289-8ada-4b44ebec248b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 175,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "b37fb752-de27-497f-8fd8-37597de51909",
              "title": "/PATCH/:id comments",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\comments.js",
              "file": "\\test\\testAdmin\\comments.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should UPDATE a comment given the id",
                  "fullTitle": "*********** COMMENTS_ADMIN *********** /PATCH/:id comments it should UPDATE a comment given the id",
                  "timedOut": false,
                  "duration": 189,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nchai\n  .request(server)\n  .patch(`${url}/comments/${id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    vote: 3,\n    content,\n    idUser,\n    status: 'publish',\n    tags: ['naturaleza']\n  })\n  .end((error, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.a('object')\n    body.should.have.property('_id').eql(id)\n    body.should.have.property('content').eql(content)\n    body._id.should.be.a('string')\n    createdID.push(res.body._id)\n    done()\n  })",
                  "err": {},
                  "uuid": "27d7a6eb-9527-4eaf-a584-16df492a1441",
                  "parentUUID": "b37fb752-de27-497f-8fd8-37597de51909",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should not UPDATE a comment empty",
                  "fullTitle": "*********** COMMENTS_ADMIN *********** /PATCH/:id comments it should not UPDATE a comment empty",
                  "timedOut": false,
                  "duration": 94,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nchai\n  .request(server)\n  .patch(`${url}/comments/${id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .send({})\n  .end((error, res) => {\n    const { body } = res\n    res.should.have.status(422)\n    body.should.be.a('object')\n    body.should.have.property('errors')\n    done()\n  })",
                  "err": {},
                  "uuid": "3491336e-1616-44d7-be8b-e09a044aa0da",
                  "parentUUID": "b37fb752-de27-497f-8fd8-37597de51909",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT be able to consume the route since no token was sent",
                  "fullTitle": "*********** COMMENTS_ADMIN *********** /PATCH/:id comments it should NOT be able to consume the route since no token was sent",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nchai\n  .request(server)\n  .patch(`${url}/comments/${id}`)\n  .send({\n    vote: 3,\n    content,\n    idUser,\n    status: 'publish',\n    tags: ['naturaleza']\n  })\n  .end((err, res) => {\n    res.should.have.status(401)\n    done()\n  })",
                  "err": {},
                  "uuid": "9900bb4b-72d2-4e0e-8f31-3930384f50ba",
                  "parentUUID": "b37fb752-de27-497f-8fd8-37597de51909",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "27d7a6eb-9527-4eaf-a584-16df492a1441",
                "3491336e-1616-44d7-be8b-e09a044aa0da",
                "9900bb4b-72d2-4e0e-8f31-3930384f50ba"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 286,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "3795774a-a9eb-4dd1-a195-50b4a74dca12",
              "title": "/DELETE/:id comment",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\comments.js",
              "file": "\\test\\testAdmin\\comments.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should DELETE a comment given the id",
                  "fullTitle": "*********** COMMENTS_ADMIN *********** /DELETE/:id comment it should DELETE a comment given the id",
                  "timedOut": false,
                  "duration": 383,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const commentdelete = {\n  vote: 3,\n  content,\n  idUser,\n  status: 'publish',\n  tags: ['naturaleza']\n}\nchai\n  .request(server)\n  .post(`${url}/comments`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(commentdelete)\n  .end((err, res) => {\n    res.should.have.status(201)\n    res.body.should.be.a('object')\n    res.body.should.include.keys(\n      '_id',\n      'vote',\n      'status',\n      'tags'\n    )\n    chai\n      .request(server)\n      .delete(`${url}/comments/${res.body._id}`)\n      .set('Authorization', `Bearer ${token}`)\n      .end((error, result) => {\n        const { body } = result\n        result.should.have.status(200)\n        body.should.be.a('object')\n        body.should.have.property('msg').eql('DELETED')\n        done()\n      })\n  })",
                  "err": {},
                  "uuid": "e8e2335a-9feb-4d26-a216-11611a8f1fc7",
                  "parentUUID": "3795774a-a9eb-4dd1-a195-50b4a74dca12",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e8e2335a-9feb-4d26-a216-11611a8f1fc7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 383,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "7e51e8f7-76c7-41d6-8802-699f2990f891",
          "title": "*********** CONVERSATIONS_ADMIN ***********",
          "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\conversations.js",
          "file": "\\test\\testAdmin\\conversations.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"*********** CONVERSATIONS_ADMIN ***********\"",
              "fullTitle": "*********** CONVERSATIONS_ADMIN *********** \"after all\" hook in \"*********** CONVERSATIONS_ADMIN ***********\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "createdID.forEach((id) => {\n  conversation.findByIdAndRemove(id, (err) => {\n    if (err) {\n      // console.log(err)\n    }\n  })\n})",
              "err": {},
              "uuid": "88bfd85b-24d2-40f7-be57-fc1c3d5434a8",
              "parentUUID": "7e51e8f7-76c7-41d6-8802-699f2990f891",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "f6445f21-8914-489c-8e3f-747ed498dc28",
              "title": "/POST login",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\conversations.js",
              "file": "\\test\\testAdmin\\conversations.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET token user",
                  "fullTitle": "*********** CONVERSATIONS_ADMIN *********** /POST login it should GET token user",
                  "timedOut": false,
                  "duration": 265,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/login`)\n  .send(loginDetails)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('object')\n    res.body.should.include.keys('accessToken', 'user')\n    const currentAccessToken = res.body.accessToken\n    accessToken = currentAccessToken\n    done()\n  })",
                  "err": {},
                  "uuid": "355d821f-95da-493f-8865-33af6ce6b42e",
                  "parentUUID": "f6445f21-8914-489c-8e3f-747ed498dc28",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET a fresh token",
                  "fullTitle": "*********** CONVERSATIONS_ADMIN *********** /POST login it should GET a fresh token",
                  "timedOut": false,
                  "duration": 356,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/exchange`)\n  .send({\n    accessToken\n  })\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.an('object')\n    body.should.include.keys('token', 'user')\n    const currentToken = body.token\n    token = currentToken\n    done()\n  })",
                  "err": {},
                  "uuid": "0657e5ae-ef6d-40c1-b32c-461dfb6f372d",
                  "parentUUID": "f6445f21-8914-489c-8e3f-747ed498dc28",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "355d821f-95da-493f-8865-33af6ce6b42e",
                "0657e5ae-ef6d-40c1-b32c-461dfb6f372d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 621,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "09d86707-8237-4cb5-b87a-9dbe20a96c2e",
              "title": "/DELETE/:id conversation",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\conversations.js",
              "file": "\\test\\testAdmin\\conversations.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should DELETE a conversation given the id",
                  "fullTitle": "*********** CONVERSATIONS_ADMIN *********** /DELETE/:id conversation it should DELETE a conversation given the id",
                  "timedOut": false,
                  "duration": 746,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const messagePost = {\n  message: faker.random.words(),\n  to: toUser2\n}\nchai\n  .request(server)\n  .post(`${url}/messages`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(messagePost)\n  .end((err, res) => {\n    res.should.have.status(201)\n    res.body.should.be.a('object')\n    res.body.should.include.keys('_id', 'hash', 'messages')\n    chai\n      .request(server)\n      .delete(`${url}/conversations/${res.body._id}`)\n      .set('Authorization', `Bearer ${token}`)\n      .end((error, result) => {\n        const { body } = result\n        result.should.have.status(200)\n        body.should.be.a('object')\n        body.should.have.property('msg').eql('DELETED')\n        done()\n      })\n  })",
                  "err": {},
                  "uuid": "b3ea7325-f03f-40a0-98e8-b972f46735b0",
                  "parentUUID": "09d86707-8237-4cb5-b87a-9dbe20a96c2e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b3ea7325-f03f-40a0-98e8-b972f46735b0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 746,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "8426b2e2-9e88-483b-b7ea-ee4fe6825404",
          "title": "*********** DEPARTURES_ADMIN ***********",
          "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\departures.js",
          "file": "\\test\\testAdmin\\departures.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"*********** DEPARTURES_ADMIN ***********\"",
              "fullTitle": "*********** DEPARTURES_ADMIN *********** \"after all\" hook in \"*********** DEPARTURES_ADMIN ***********\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "createdID.forEach((idDeparture) => {\n  departure.findByIdAndRemove(idDeparture, (err) => {\n    if (err) {\n      // console.log(err)\n    }\n  })\n})",
              "err": {},
              "uuid": "715654bd-e63e-436c-9200-3241aa1ac208",
              "parentUUID": "8426b2e2-9e88-483b-b7ea-ee4fe6825404",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "3d262fa4-0f40-4933-a991-ad36bd1e61d8",
              "title": "/POST login",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\departures.js",
              "file": "\\test\\testAdmin\\departures.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET token user",
                  "fullTitle": "*********** DEPARTURES_ADMIN *********** /POST login it should GET token user",
                  "timedOut": false,
                  "duration": 256,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/login`)\n  .send(loginDetails)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('object')\n    res.body.should.include.keys('accessToken', 'user')\n    const currentAccessToken = res.body.accessToken\n    accessToken = currentAccessToken\n    done()\n  })",
                  "err": {},
                  "uuid": "43868d9e-fb61-4cfe-a5fe-bd288b5b5826",
                  "parentUUID": "3d262fa4-0f40-4933-a991-ad36bd1e61d8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET a fresh token",
                  "fullTitle": "*********** DEPARTURES_ADMIN *********** /POST login it should GET a fresh token",
                  "timedOut": false,
                  "duration": 360,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/exchange`)\n  .send({\n    accessToken\n  })\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.an('object')\n    body.should.include.keys('token', 'user')\n    const currentToken = body.token\n    token = currentToken\n    done()\n  })",
                  "err": {},
                  "uuid": "d873681f-ef5c-49c7-8202-e5424bb39ec8",
                  "parentUUID": "3d262fa4-0f40-4933-a991-ad36bd1e61d8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "43868d9e-fb61-4cfe-a5fe-bd288b5b5826",
                "d873681f-ef5c-49c7-8202-e5424bb39ec8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 616,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "7775d047-9853-415f-aa23-05cc35f87acd",
              "title": "/POST departures",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\departures.js",
              "file": "\\test\\testAdmin\\departures.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should NOT POST a departure without departure",
                  "fullTitle": "*********** DEPARTURES_ADMIN *********** /POST departures it should NOT POST a departure without departure",
                  "timedOut": false,
                  "duration": 177,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const departurePostOne = {}\nchai\n  .request(server)\n  .post(`${url}/departures`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(departurePostOne)\n  .end((err, res) => {\n    res.should.have.status(422)\n    res.body.should.be.a('object')\n    res.body.should.have.property('errors')\n    done()\n  })",
                  "err": {},
                  "uuid": "3ad0882a-5fba-4272-966e-eafa9377688f",
                  "parentUUID": "7775d047-9853-415f-aa23-05cc35f87acd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should POST a departure ",
                  "fullTitle": "*********** DEPARTURES_ADMIN *********** /POST departures it should POST a departure ",
                  "timedOut": false,
                  "duration": 366,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const departurePostTwo = {\n  startDateDeparture: '21-03-2021',\n  endDateDeparture: '11-04-2021',\n  minAge: faker.random.number(),\n  maxAge: faker.random.number(),\n  stock: faker.random.number(),\n  minStock: faker.random.number(),\n  normalPrice: faker.random.number(),\n  closeDateDeparture: '15-11-2020',\n  flight: faker.random.boolean(),\n  idTour,\n  status: 'visible'\n}\nchai\n  .request(server)\n  .post(`${url}/departures`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(departurePostTwo)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(201)\n    body.should.be.a('object')\n    body.should.include.keys('_id', 'createdAt')\n    body.should.have.property('closeDateDeparture').eql('15-11-2020')\n    body._id.should.be.a('string')\n    body.payAmount.should.be.a('array').length(0)\n    body.should.have.property('startDateDeparture').eql('21-03-2021')\n    body.should.have.property('status').eql('visible')\n    body.endDateDeparture.should.be.a('string')\n    createdID.push(res.body._id)\n    done()\n  })",
                  "err": {},
                  "uuid": "07b055ae-5588-421f-92c9-b74e571a94ad",
                  "parentUUID": "7775d047-9853-415f-aa23-05cc35f87acd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3ad0882a-5fba-4272-966e-eafa9377688f",
                "07b055ae-5588-421f-92c9-b74e571a94ad"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 543,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "bdebcae4-d5ce-41ab-becc-be9c207137b5",
              "title": "/PATCH/:id departures",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\departures.js",
              "file": "\\test\\testAdmin\\departures.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should UPDATE a departure given the id",
                  "fullTitle": "*********** DEPARTURES_ADMIN *********** /PATCH/:id departures it should UPDATE a departure given the id",
                  "timedOut": false,
                  "duration": 270,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nchai\n  .request(server)\n  .patch(`${url}/departures/${id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    startDateDeparture: '21-05-2021',\n    endDateDeparture: '11-05-2021',\n    stock: faker.random.number(),\n    minStock: faker.random.number(),\n    minAge: faker.random.number(),\n    maxAge: faker.random.number(),\n    normalPrice: faker.random.number(),\n    closeDateDeparture: '15-11-2020',\n    flight: faker.random.boolean(),\n    idTour\n  })\n  .end((error, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.a('object')\n    body.should.have.property('_id').eql(id)\n    body.should.have.property('startDateDeparture').eql('21-05-2021')\n    body._id.should.be.a('string')\n    body.minStock.should.be.a('number')\n    body.normalPrice.should.be.a('number')\n    body.closeDateDeparture.should.be.a('string')\n    body.idTour.should.be.a('string')\n    createdID.push(res.body._id)\n    done()\n  })",
                  "err": {},
                  "uuid": "8e7aac61-ac46-40b6-bf5e-facf24af5b9b",
                  "parentUUID": "bdebcae4-d5ce-41ab-becc-be9c207137b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT be able to consume the route since no token was sent",
                  "fullTitle": "*********** DEPARTURES_ADMIN *********** /PATCH/:id departures it should NOT be able to consume the route since no token was sent",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nchai\n  .request(server)\n  .patch(`${url}/departures/${id}`)\n  .send({\n    startDateDeparture: '21-05-2021',\n    endDateDeparture: '11-05-2021',\n    stock: faker.random.number(),\n    minStock: faker.random.number(),\n    normalPrice: faker.random.number(),\n    closeDateDeparture: '15-11-2020',\n    flight: faker.random.boolean(),\n    payAmount: faker.finance.amount(),\n    idTour\n  })\n  .end((err, res) => {\n    res.should.have.status(401)\n    done()\n  })",
                  "err": {},
                  "uuid": "534e7ddd-209e-4cf6-bc6a-ae2e32646e9a",
                  "parentUUID": "bdebcae4-d5ce-41ab-becc-be9c207137b5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8e7aac61-ac46-40b6-bf5e-facf24af5b9b",
                "534e7ddd-209e-4cf6-bc6a-ae2e32646e9a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 273,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "d647f1de-dade-4265-a213-f42ecd2e5c96",
              "title": "/DELETE/:id departure",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\departures.js",
              "file": "\\test\\testAdmin\\departures.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should DELETE a departure given the id",
                  "fullTitle": "*********** DEPARTURES_ADMIN *********** /DELETE/:id departure it should DELETE a departure given the id",
                  "timedOut": false,
                  "duration": 631,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const departuredelete = {\n  startDateDeparture: '21-05-2021',\n  endDateDeparture: '11-05-2021',\n  stock: faker.random.number(),\n  minStock: faker.random.number(),\n  normalPrice: faker.random.number(),\n  closeDateDeparture: '15-11-2020',\n  payAmount: faker.finance.amount(),\n  flight: faker.random.boolean(),\n  idTour,\n  status: 'visible'\n}\nchai\n  .request(server)\n  .post(`${url}/departures`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(departuredelete)\n  .end((err, res) => {\n    res.should.have.status(201)\n    res.body.should.be.a('object')\n    res.body.should.include.keys('_id')\n    chai\n      .request(server)\n      .delete(`${url}/departures/${res.body._id}`)\n      .set('Authorization', `Bearer ${token}`)\n      .end((error, result) => {\n        result.should.have.status(200)\n        result.body.should.be.a('object')\n        result.body.should.have.property('msg').eql('DELETED')\n        done()\n      })\n  })",
                  "err": {},
                  "uuid": "235cc542-d1f9-49a5-8a88-559708907346",
                  "parentUUID": "d647f1de-dade-4265-a213-f42ecd2e5c96",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "235cc542-d1f9-49a5-8a88-559708907346"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 631,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "cdadab4f-0acf-4850-b132-cf1d7caf1d31",
          "title": "*********** ITINERARIES_ADMIN ***********",
          "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\itineraries.js",
          "file": "\\test\\testAdmin\\itineraries.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "it should NOT be able to consume the route since no token was sent",
              "fullTitle": "*********** ITINERARIES_ADMIN *********** it should NOT be able to consume the route since no token was sent",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const id = createdID.slice(-1).pop()\nconst newDescription = faker.random.words()\nconst newTitle = faker.random.words()\nchai\n  .request(server)\n  .patch(`${url}/itineraries/${id}`)\n  .send({\n    itineraryName: newTitle,\n    itineraryDescription: newDescription\n  })\n  .end((err, res) => {\n    res.should.have.status(401)\n    done()\n  })",
              "err": {},
              "uuid": "6d524172-68cf-4e2e-bf5f-ac30d507704c",
              "parentUUID": "cdadab4f-0acf-4850-b132-cf1d7caf1d31",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "c20e8c91-b345-4a77-9cb8-f3ad808e6b24",
              "title": "/POST login",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\itineraries.js",
              "file": "\\test\\testAdmin\\itineraries.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET token user",
                  "fullTitle": "*********** ITINERARIES_ADMIN *********** /POST login it should GET token user",
                  "timedOut": false,
                  "duration": 278,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/login`)\n  .send(loginDetails)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('object')\n    res.body.should.include.keys('accessToken', 'user')\n    const currentAccessToken = res.body.accessToken\n    accessToken = currentAccessToken\n    done()\n  })",
                  "err": {},
                  "uuid": "46be6f53-9daf-4c47-b10b-cd11fa319ad1",
                  "parentUUID": "c20e8c91-b345-4a77-9cb8-f3ad808e6b24",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET a fresh token",
                  "fullTitle": "*********** ITINERARIES_ADMIN *********** /POST login it should GET a fresh token",
                  "timedOut": false,
                  "duration": 361,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/exchange`)\n  .send({\n    accessToken\n  })\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.an('object')\n    body.should.include.keys('token', 'user')\n    const currentToken = body.token\n    token = currentToken\n    done()\n  })",
                  "err": {},
                  "uuid": "07c2196c-696e-465b-b04e-3ee21d9d558d",
                  "parentUUID": "c20e8c91-b345-4a77-9cb8-f3ad808e6b24",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "46be6f53-9daf-4c47-b10b-cd11fa319ad1",
                "07c2196c-696e-465b-b04e-3ee21d9d558d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 639,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "b4f62f19-cd9e-4f6e-bbc1-734d7a77b28e",
              "title": "/GET itineraries",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\itineraries.js",
              "file": "\\test\\testAdmin\\itineraries.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET all the itineraries",
                  "fullTitle": "*********** ITINERARIES_ADMIN *********** /GET itineraries it should GET all the itineraries",
                  "timedOut": false,
                  "duration": 92,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/itineraries`)\n  .end((err, res) => {\n    res.should.have.status(200)\n    const { body } = res\n    body.should.be.an('object')\n    body.docs.should.be.a('array')\n    const firstItinerary = _.head(body.docs)\n    idItinerary = firstItinerary._id\n    firstItinerary.should.include.keys(\n      '_id',\n      'itineraryName',\n      'itineraryDescription',\n      'idTour',\n      'stringLocation',\n      'details'\n    )\n    firstItinerary._id.should.be.a('string')\n    firstItinerary.itineraryName.should.be.a('string')\n    firstItinerary.idTour.should.be.a('string').eql(idTour)\n    firstItinerary.details.should.be.a('array')\n    done()\n  })",
                  "err": {},
                  "uuid": "5bbebb22-32d3-4562-95de-d346277e6de4",
                  "parentUUID": "b4f62f19-cd9e-4f6e-bbc1-734d7a77b28e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5bbebb22-32d3-4562-95de-d346277e6de4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 92,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "8fbaeaa1-9e3a-437f-a6ba-e55c71838718",
              "title": "/POST itineraries",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\itineraries.js",
              "file": "\\test\\testAdmin\\itineraries.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should NOT POST a itinerary without itinerary",
                  "fullTitle": "*********** ITINERARIES_ADMIN *********** /POST itineraries it should NOT POST a itinerary without itinerary",
                  "timedOut": false,
                  "duration": 188,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const itineraryOne = {}\nchai\n  .request(server)\n  .post(`${url}/itineraries`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(itineraryOne)\n  .end((err, res) => {\n    res.should.have.status(422)\n    const { body } = res\n    body.should.be.a('object')\n    body.should.have.property('errors')\n    const { errors } = body\n    errors.should.have.property('msg').be.a('array')\n    done()\n  })",
                  "err": {},
                  "uuid": "cf7330c1-0ac5-4b38-a4fb-61ba1b797777",
                  "parentUUID": "8fbaeaa1-9e3a-437f-a6ba-e55c71838718",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should POST a itineraries ",
                  "fullTitle": "*********** ITINERARIES_ADMIN *********** /POST itineraries it should POST a itineraries ",
                  "timedOut": false,
                  "duration": 360,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/itineraries`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(newObject)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(201)\n    body.should.be.a('object')\n    body.should.include.keys('_id', 'stringLocation')\n    body.should.include.property('itineraryName').eql(itineraryName)\n    body._id.should.be.a('string')\n    body.itineraryName.should.be.a('string')\n    body.itineraryDescription.should.be.a('string')\n    body.idTour.should.be.a('string').eql(idTour)\n    body.stringLocation.should.be.a('object')\n    body.details.should.be.a('array')\n    createdID.push(res.body._id)\n    done()\n  })",
                  "err": {},
                  "uuid": "baa5b733-4613-4449-a7cc-9abf92a5183b",
                  "parentUUID": "8fbaeaa1-9e3a-437f-a6ba-e55c71838718",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT POST a itinerary that incomplete fields",
                  "fullTitle": "*********** ITINERARIES_ADMIN *********** /POST itineraries it should NOT POST a itinerary that incomplete fields",
                  "timedOut": false,
                  "duration": 178,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const itineraryTwo = {\n  changeNameItinerary\n}\nchai\n  .request(server)\n  .post(`${url}/itineraries`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(itineraryTwo)\n  .end((err, res) => {\n    res.should.have.status(422)\n    const { body } = res\n    body.should.be.a('object')\n    body.should.have.property('errors')\n    const { errors } = body\n    errors.should.have.property('msg').be.a('array')\n    done()\n  })",
                  "err": {},
                  "uuid": "3dedd196-f740-4196-b5ac-1ae231c989e7",
                  "parentUUID": "8fbaeaa1-9e3a-437f-a6ba-e55c71838718",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT be able to consume the route since no token was sent",
                  "fullTitle": "*********** ITINERARIES_ADMIN *********** /POST itineraries it should NOT be able to consume the route since no token was sent",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/itineraries`)\n  .send(newObject)\n  .end((err, res) => {\n    res.should.have.status(401)\n    done()\n  })",
                  "err": {},
                  "uuid": "ee0b8544-a533-4f75-af49-ddb3f4dd26b4",
                  "parentUUID": "8fbaeaa1-9e3a-437f-a6ba-e55c71838718",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cf7330c1-0ac5-4b38-a4fb-61ba1b797777",
                "baa5b733-4613-4449-a7cc-9abf92a5183b",
                "3dedd196-f740-4196-b5ac-1ae231c989e7",
                "ee0b8544-a533-4f75-af49-ddb3f4dd26b4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 732,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "2be1e48a-c00d-4e75-b2d9-3564c64df000",
              "title": "/GET/:id itineraries",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\itineraries.js",
              "file": "\\test\\testAdmin\\itineraries.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET a itinerary by the given id",
                  "fullTitle": "*********** ITINERARIES_ADMIN *********** /GET/:id itineraries it should GET a itinerary by the given id",
                  "timedOut": false,
                  "duration": 278,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/itineraries/${idItinerary}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((error, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.a('object')\n    body.should.have.property('_id').eql(idItinerary)\n    // res.body.should.include.property('itineraryName').eql(itineraryName)\n    body._id.should.be.a('string')\n    body.itineraryName.should.be.a('string')\n    body.itineraryDescription.should.be.a('string')\n    body.idTour.should.be.a('string').eql(idTour)\n    body.stringLocation.should.be.a('object')\n    body.details.should.be.a('array')\n    done()\n  })",
                  "err": {},
                  "uuid": "dea6e453-e758-4cca-9447-82b5b51a6e77",
                  "parentUUID": "2be1e48a-c00d-4e75-b2d9-3564c64df000",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET a itinerary by the given id rute admin",
                  "fullTitle": "*********** ITINERARIES_ADMIN *********** /GET/:id itineraries it should GET a itinerary by the given id rute admin",
                  "timedOut": false,
                  "duration": 276,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nchai\n  .request(server)\n  .get(`${url}/itineraries/${id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((error, res) => {\n    res.should.have.status(200)\n    const { body } = res\n    body.should.be.a('object')\n    body.should.have.property('_id').eql(id)\n    body.should.include.property('itineraryName').eql(itineraryName)\n    body._id.should.be.a('string')\n    body.itineraryName.should.be.a('string')\n    body.itineraryDescription.should.be.a('string')\n    body.idTour.should.be.a('string')\n    body.stringLocation.should.be.a('object')\n    body.details.should.be.a('array').length(2)\n    done()\n  })",
                  "err": {},
                  "uuid": "21e26faf-0ff3-4253-b135-362fa205e3d6",
                  "parentUUID": "2be1e48a-c00d-4e75-b2d9-3564c64df000",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT be able to consume the route since no token was sent rute admin",
                  "fullTitle": "*********** ITINERARIES_ADMIN *********** /GET/:id itineraries it should NOT be able to consume the route since no token was sent rute admin",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nchai\n  .request(server)\n  .get(`${url}/itineraries/${id}`)\n  .end((err, res) => {\n    res.should.have.status(401)\n    done()\n  })",
                  "err": {},
                  "uuid": "9217caee-644c-4502-8933-b1bb4b452903",
                  "parentUUID": "2be1e48a-c00d-4e75-b2d9-3564c64df000",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dea6e453-e758-4cca-9447-82b5b51a6e77",
                "21e26faf-0ff3-4253-b135-362fa205e3d6",
                "9217caee-644c-4502-8933-b1bb4b452903"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 557,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "4b9b5561-e79a-47aa-8e3c-67ac80e4ea54",
              "title": "/PATCH/:id itineraries",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\itineraries.js",
              "file": "\\test\\testAdmin\\itineraries.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should UPDATE a itinerary given the id",
                  "fullTitle": "*********** ITINERARIES_ADMIN *********** /PATCH/:id itineraries it should UPDATE a itinerary given the id",
                  "timedOut": false,
                  "duration": 302,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nconst newDescription = faker.random.words()\nconst newTitle = faker.random.words()\nchai\n  .request(server)\n  .patch(`${url}/itineraries/${id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    itineraryName: newTitle,\n    itineraryDescription: newDescription\n  })\n  .end((error, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.a('object')\n    body.should.include.keys('_id', 'itineraryDescription', 'itineraryName')\n    body.itineraryName.should.be.a('string')\n    body.should.have.property('_id').eql(id)\n    body.should.have.property('itineraryName').eql(newTitle)\n    body.should.have.property('itineraryDescription').eql(newDescription)\n    done()\n  })",
                  "err": {},
                  "uuid": "4d18b1bf-b056-440b-9a4e-6bcae58d804c",
                  "parentUUID": "4b9b5561-e79a-47aa-8e3c-67ac80e4ea54",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4d18b1bf-b056-440b-9a4e-6bcae58d804c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 302,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [
            "6d524172-68cf-4e2e-bf5f-ac30d507704c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "2e214edf-8c43-40d2-a8ab-ae4ee00ca753",
          "title": "/DELETE/:id itineraries",
          "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\itineraries.js",
          "file": "\\test\\testAdmin\\itineraries.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "it should DELETE a itinerary given the id",
              "fullTitle": "/DELETE/:id itineraries it should DELETE a itinerary given the id",
              "timedOut": false,
              "duration": 591,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const id = createdID.slice(-1).pop()\nchai\n  .request(server)\n  .delete(`${url}/itineraries/${id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((error, result) => {\n    result.should.have.status(200)\n    result.body.should.be.a('object')\n    result.body.should.have.property('msg').eql('DELETED')\n    done()\n  })",
              "err": {},
              "uuid": "29258273-af2a-4681-a901-29703d0c7d68",
              "parentUUID": "2e214edf-8c43-40d2-a8ab-ae4ee00ca753",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "29258273-af2a-4681-a901-29703d0c7d68"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 591,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "0f58c1fd-c1df-4dd0-b775-95b2f28cacac",
          "title": "*********** PAY_ORDERS_ADMIN ***********",
          "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\payOrders.js",
          "file": "\\test\\testAdmin\\payOrders.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"*********** PAY_ORDERS_ADMIN ***********\"",
              "fullTitle": "*********** PAY_ORDERS_ADMIN *********** \"after all\" hook in \"*********** PAY_ORDERS_ADMIN ***********\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "createdID.forEach((id) => {\n  orders.findByIdAndRemove(id, (err) => {\n    if (err) {\n      console.log(err.message)\n    }\n  })\n})",
              "err": {},
              "uuid": "8e62c2a2-9159-44f0-9b0f-b99ab58747fc",
              "parentUUID": "0f58c1fd-c1df-4dd0-b775-95b2f28cacac",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "0af7f011-8eb8-4849-9337-e59051c6d894",
              "title": "/POST login",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\payOrders.js",
              "file": "\\test\\testAdmin\\payOrders.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET token user",
                  "fullTitle": "*********** PAY_ORDERS_ADMIN *********** /POST login it should GET token user",
                  "timedOut": false,
                  "duration": 280,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/login`)\n  .send(loginDetails)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('object')\n    res.body.should.include.keys('accessToken', 'user')\n    const currentAccessToken = res.body.accessToken\n    accessToken = currentAccessToken\n    done()\n  })",
                  "err": {},
                  "uuid": "0482c63f-5021-4a38-81a4-6fc0759049b6",
                  "parentUUID": "0af7f011-8eb8-4849-9337-e59051c6d894",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET a fresh token",
                  "fullTitle": "*********** PAY_ORDERS_ADMIN *********** /POST login it should GET a fresh token",
                  "timedOut": false,
                  "duration": 380,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/exchange`)\n  .send({\n    accessToken\n  })\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.an('object')\n    body.should.include.keys('token', 'user')\n    const currentToken = body.token\n    token = currentToken\n    done()\n  })",
                  "err": {},
                  "uuid": "86a63b8f-d404-47cb-a07c-d0dfc274c28b",
                  "parentUUID": "0af7f011-8eb8-4849-9337-e59051c6d894",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0482c63f-5021-4a38-81a4-6fc0759049b6",
                "86a63b8f-d404-47cb-a07c-d0dfc274c28b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 660,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "a097ae57-b61f-4028-809c-57325f779ac3",
              "title": "/POST payOrders",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\payOrders.js",
              "file": "\\test\\testAdmin\\payOrders.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should NOT POST a orders without orders",
                  "fullTitle": "*********** PAY_ORDERS_ADMIN *********** /POST payOrders it should NOT POST a orders without orders",
                  "timedOut": false,
                  "duration": 196,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const orderPostOne = {}\nchai\n  .request(server)\n  .post(`${url}/payOrders`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(orderPostOne)\n  .end((err, res) => {\n    res.should.have.status(422)\n    const { body } = res\n    body.should.be.a('object')\n    body.should.have.property('errors')\n    const { errors } = body\n    errors.should.have.property('msg').be.a('array')\n    done()\n  })",
                  "err": {},
                  "uuid": "3c477eac-9df0-44eb-b4dd-541194faad34",
                  "parentUUID": "a097ae57-b61f-4028-809c-57325f779ac3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should POST a orders  pay Wallet",
                  "fullTitle": "*********** PAY_ORDERS_ADMIN *********** /POST payOrders it should POST a orders  pay Wallet",
                  "timedOut": false,
                  "duration": 1141,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const orderPostTwo = {\n  idOperation: faker.random.words(),\n  amount: faker.random.number(),\n  idUser,\n  platform: 'stripe'\n}\nchai\n  .request(server)\n  .post(`${url}/payOrders`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(orderPostTwo)\n  .end((err, res) => {\n    res.should.have.status(201)\n    const { body } = res\n    body.should.be.a('object')\n    body.should.include.keys('_id', 'idUser', 'platform', 'idOperation', 'idUser', 'platform')\n    body.should.have.property('platform').eql('stripe')\n    body.should.have.property('idUser').eql(idUser)\n    body.should.have.property('amount').eql(orderPostTwo.amount)\n    createdID.push(res.body._id)\n    done()\n  })",
                  "err": {},
                  "uuid": "c6934280-50fc-4793-acc7-6b7f0665fb24",
                  "parentUUID": "a097ae57-b61f-4028-809c-57325f779ac3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should POST a orders pay reservation",
                  "fullTitle": "*********** PAY_ORDERS_ADMIN *********** /POST payOrders it should POST a orders pay reservation",
                  "timedOut": false,
                  "duration": 1754,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const orderPostTwo = {\n  idReservation,\n  idOperation: faker.random.words(),\n  amount: faker.random.number(),\n  idUser,\n  platform: 'stripe'\n}\nchai\n  .request(server)\n  .post(`${url}/payOrders`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(orderPostTwo)\n  .end((err, res) => {\n    res.should.have.status(201)\n    const { body } = res\n    body.should.be.a('object')\n    body.should.include.keys('_id', 'idUser', 'platform', 'idOperation', 'idUser', 'platform')\n    body.should.have.property('platform').eql('stripe')\n    body.should.have.property('idReservation').eql(idReservation)\n    body.should.have.property('amount').eql(orderPostTwo.amount)\n    createdID.push(res.body._id)\n    done()\n  })",
                  "err": {},
                  "uuid": "5bfaddf5-dd5a-447f-9210-9b99b9a7dc31",
                  "parentUUID": "a097ae57-b61f-4028-809c-57325f779ac3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3c477eac-9df0-44eb-b4dd-541194faad34",
                "c6934280-50fc-4793-acc7-6b7f0665fb24",
                "5bfaddf5-dd5a-447f-9210-9b99b9a7dc31"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3091,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "9e747642-c99c-4b54-ac3c-e99329696f57",
              "title": "/GET payOrders",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\payOrders.js",
              "file": "\\test\\testAdmin\\payOrders.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET all the payOrders",
                  "fullTitle": "*********** PAY_ORDERS_ADMIN *********** /GET payOrders it should GET all the payOrders",
                  "timedOut": false,
                  "duration": 262,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/payOrders`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    const { body } = res\n    const { docs } = body\n    res.should.have.status(200)\n    body.should.be.an('object')\n    docs.should.have.lengthOf(2)\n    const firstorder = _.head(docs)\n    firstorder.should.include.keys('_id', 'amount', 'idOperation')\n    done()\n  })",
                  "err": {},
                  "uuid": "f319acd9-7f17-401f-abd2-5b193d688179",
                  "parentUUID": "9e747642-c99c-4b54-ac3c-e99329696f57",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f319acd9-7f17-401f-abd2-5b193d688179"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 262,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "17233494-ac31-4e9e-97e3-34d279e1bafc",
              "title": "/GET/:id payOrders",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\payOrders.js",
              "file": "\\test\\testAdmin\\payOrders.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET a payOrders by the given id",
                  "fullTitle": "*********** PAY_ORDERS_ADMIN *********** /GET/:id payOrders it should GET a payOrders by the given id",
                  "timedOut": false,
                  "duration": 252,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nchai\n  .request(server)\n  .get(`${url}/payOrders/${id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((error, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.a('object')\n    body.should.include.keys('status', '_id', 'idReservation')\n    body.should.have.property('_id').eql(id)\n    done()\n  })",
                  "err": {},
                  "uuid": "d37c7c39-48cc-46a9-9f6a-3ab4de5f0e2b",
                  "parentUUID": "17233494-ac31-4e9e-97e3-34d279e1bafc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT be able to consume the route since no token was sent",
                  "fullTitle": "*********** PAY_ORDERS_ADMIN *********** /GET/:id payOrders it should NOT be able to consume the route since no token was sent",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nchai\n  .request(server)\n  .get(`${url}/payOrders/${id}`)\n  .end((err, res) => {\n    res.should.have.status(401)\n    done()\n  })",
                  "err": {},
                  "uuid": "07baf76a-4c3e-4326-b2c7-23e325b1c293",
                  "parentUUID": "17233494-ac31-4e9e-97e3-34d279e1bafc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d37c7c39-48cc-46a9-9f6a-3ab4de5f0e2b",
                "07baf76a-4c3e-4326-b2c7-23e325b1c293"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 255,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "9590b582-4f42-4f88-85b2-0158b3739aad",
              "title": "/PATCH/:id payOrders",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\payOrders.js",
              "file": "\\test\\testAdmin\\payOrders.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should UPDATE a orders given the id",
                  "fullTitle": "*********** PAY_ORDERS_ADMIN *********** /PATCH/:id payOrders it should UPDATE a orders given the id",
                  "timedOut": false,
                  "duration": 265,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nconst object = { amount: faker.random.number() }\nchai\n  .request(server)\n  .patch(`${url}/payOrders/fromPanel/${id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(object)\n  .end((error, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.a('object')\n    body.should.have.property('_id').eql(id)\n    body.should.have.property('amount').eql(object.amount)\n    done()\n  })",
                  "err": {},
                  "uuid": "a37ca1e3-6f2d-44c3-860b-108515958ae9",
                  "parentUUID": "9590b582-4f42-4f88-85b2-0158b3739aad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT be able to consume the route since no token was sent",
                  "fullTitle": "*********** PAY_ORDERS_ADMIN *********** /PATCH/:id payOrders it should NOT be able to consume the route since no token was sent",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nchai\n  .request(server)\n  .patch(`${url}/payOrders/fromPanel/${id}`)\n  .send({\n    amount: faker.random.number()\n  })\n  .end((err, res) => {\n    res.should.have.status(401)\n    done()\n  })",
                  "err": {},
                  "uuid": "216a000a-a447-49e6-a94e-ee037aade08b",
                  "parentUUID": "9590b582-4f42-4f88-85b2-0158b3739aad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a37ca1e3-6f2d-44c3-860b-108515958ae9",
                "216a000a-a447-49e6-a94e-ee037aade08b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 268,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "dc5777c4-00e7-4bb2-b72c-c8bb4dd54c7c",
              "title": "/DELETE/:id orders",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\payOrders.js",
              "file": "\\test\\testAdmin\\payOrders.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should DELETE a orders given the id",
                  "fullTitle": "*********** PAY_ORDERS_ADMIN *********** /DELETE/:id orders it should DELETE a orders given the id",
                  "timedOut": false,
                  "duration": 2095,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const objectDelete = {\n  idReservation,\n  idOperation: faker.random.words(),\n  amount: faker.random.number(),\n  idUser,\n  platform: 'stripe'\n}\nchai\n  .request(server)\n  .post(`${url}/payOrders`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(objectDelete)\n  .end((err, res) => {\n    res.should.have.status(201)\n    res.body.should.be.a('object')\n    res.body.should.include.keys(\n      '_id',\n      'idOperation',\n      'idUser',\n      'platform'\n    )\n    chai\n      .request(server)\n      .delete(`${url}/payOrders/${res.body._id}`)\n      .set('Authorization', `Bearer ${token}`)\n      .end((error, result) => {\n        const { body } = result\n        result.should.have.status(200)\n        body.should.be.a('object')\n        body.should.have.property('msg').eql('DELETED')\n        done()\n      })\n  })",
                  "err": {},
                  "uuid": "9e932806-7a76-477c-bc8e-418b28cca9d0",
                  "parentUUID": "dc5777c4-00e7-4bb2-b72c-c8bb4dd54c7c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9e932806-7a76-477c-bc8e-418b28cca9d0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2095,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "226c8e2a-cd57-45f5-8cc9-b997fca14f61",
          "title": "*********** QUESTIONS_ADMIN ***********",
          "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\questions.js",
          "file": "\\test\\testAdmin\\questions.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"*********** QUESTIONS_ADMIN ***********\"",
              "fullTitle": "*********** QUESTIONS_ADMIN *********** \"after all\" hook in \"*********** QUESTIONS_ADMIN ***********\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "createdID.forEach((id) => {\n  questions.findByIdAndRemove(id, (err) => {\n    if (err) {\n      // console.log(err)\n    }\n  })\n})",
              "err": {},
              "uuid": "e04c1a6c-9130-4a2f-ac0b-1b9720ce3682",
              "parentUUID": "226c8e2a-cd57-45f5-8cc9-b997fca14f61",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "0805cda4-9162-42bd-932e-25b1deba2a50",
              "title": "/POST login",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\questions.js",
              "file": "\\test\\testAdmin\\questions.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET token user",
                  "fullTitle": "*********** QUESTIONS_ADMIN *********** /POST login it should GET token user",
                  "timedOut": false,
                  "duration": 279,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/login`)\n  .send(loginDetails)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('object')\n    res.body.should.include.keys('accessToken', 'user')\n    const currentAccessToken = res.body.accessToken\n    accessToken = currentAccessToken\n    done()\n  })",
                  "err": {},
                  "uuid": "02ceb798-f43b-4ad0-a94b-eb7faa6914e6",
                  "parentUUID": "0805cda4-9162-42bd-932e-25b1deba2a50",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET a fresh token",
                  "fullTitle": "*********** QUESTIONS_ADMIN *********** /POST login it should GET a fresh token",
                  "timedOut": false,
                  "duration": 365,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/exchange`)\n  .send({\n    accessToken\n  })\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.an('object')\n    body.should.include.keys('token', 'user')\n    const currentToken = body.token\n    token = currentToken\n    done()\n  })",
                  "err": {},
                  "uuid": "abebe9c3-9068-4418-8022-26e09ed8548c",
                  "parentUUID": "0805cda4-9162-42bd-932e-25b1deba2a50",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "02ceb798-f43b-4ad0-a94b-eb7faa6914e6",
                "abebe9c3-9068-4418-8022-26e09ed8548c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 644,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "7c374dd4-af0d-45d6-9090-7ad729cd6693",
              "title": "/POST questions",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\questions.js",
              "file": "\\test\\testAdmin\\questions.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should NOT POST a questions without questions",
                  "fullTitle": "*********** QUESTIONS_ADMIN *********** /POST questions it should NOT POST a questions without questions",
                  "timedOut": false,
                  "duration": 175,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const orderPostOne = {}\nchai\n  .request(server)\n  .post(`${url}/questions`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(orderPostOne)\n  .end((err, res) => {\n    res.should.have.status(422)\n    const { body } = res\n    body.should.be.a('object')\n    body.should.have.property('errors')\n    const { errors } = body\n    errors.should.have.property('msg').be.a('array')\n    done()\n  })",
                  "err": {},
                  "uuid": "227332bb-982f-4518-843e-e008c6f74d04",
                  "parentUUID": "7c374dd4-af0d-45d6-9090-7ad729cd6693",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should POST a questions",
                  "fullTitle": "*********** QUESTIONS_ADMIN *********** /POST questions it should POST a questions",
                  "timedOut": false,
                  "duration": 271,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const questionTwo = {\n  question: faker.random.words()\n}\nchai\n  .request(server)\n  .post(`${url}/questions`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(questionTwo)\n  .end((err, res) => {\n    res.should.have.status(201)\n    const { body } = res\n    body.should.be.a('object')\n    body.should.include.keys('_id', 'question')\n    body.should.have.property('question').eql(questionTwo.question)\n    createdID.push(res.body._id)\n    done()\n  })",
                  "err": {},
                  "uuid": "0689f6e0-941d-4c18-ad19-37f3d49340a7",
                  "parentUUID": "7c374dd4-af0d-45d6-9090-7ad729cd6693",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "227332bb-982f-4518-843e-e008c6f74d04",
                "0689f6e0-941d-4c18-ad19-37f3d49340a7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 446,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "cacd8afd-07f2-403a-aded-22f5b2f5b675",
              "title": "/GET questions",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\questions.js",
              "file": "\\test\\testAdmin\\questions.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET all the questions",
                  "fullTitle": "*********** QUESTIONS_ADMIN *********** /GET questions it should GET all the questions",
                  "timedOut": false,
                  "duration": 264,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/questions`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    const { body } = res\n    const { docs } = body\n    const question = _.head(docs)\n    res.should.have.status(200)\n    body.should.be.an('object')\n    docs.should.have.lengthOf(5)\n    id = question._id\n    question.should.include.keys('_id', 'status', 'title', 'question')\n    done()\n  })",
                  "err": {},
                  "uuid": "c97528a7-8170-4209-8c50-fb55ea2b4322",
                  "parentUUID": "cacd8afd-07f2-403a-aded-22f5b2f5b675",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT GET the questions with filters",
                  "fullTitle": "*********** QUESTIONS_ADMIN *********** /GET questions it should NOT GET the questions with filters",
                  "timedOut": false,
                  "duration": 258,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/questions?filter=noexiste&fields=status`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('object')\n    const { body } = res\n    const { docs, totalDocs } = body\n    totalDocs.should.be.a('number')\n    body.should.have.property('totalDocs').eql(0)\n    docs.should.have.lengthOf(0)\n    done()\n  })",
                  "err": {},
                  "uuid": "7c070372-519e-425b-9024-d3502e389238",
                  "parentUUID": "cacd8afd-07f2-403a-aded-22f5b2f5b675",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET the questions with filters",
                  "fullTitle": "*********** QUESTIONS_ADMIN *********** /GET questions it should GET the questions with filters",
                  "timedOut": false,
                  "duration": 257,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/questions?filter=public&fields=status`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('object')\n    const { body } = res\n    const { docs } = body\n    const question = _.head(docs)\n    body.should.be.an('object')\n    docs.should.have.lengthOf(4)\n    question.should.include.keys('_id', 'title', 'question')\n    question.should.have.property('status').eql('public')\n    done()\n  })",
                  "err": {},
                  "uuid": "51db4442-7e2a-4eaa-8114-328e62eb7f77",
                  "parentUUID": "cacd8afd-07f2-403a-aded-22f5b2f5b675",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c97528a7-8170-4209-8c50-fb55ea2b4322",
                "7c070372-519e-425b-9024-d3502e389238",
                "51db4442-7e2a-4eaa-8114-328e62eb7f77"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 779,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "949114ac-372e-4dd5-861d-1677a40fd27d",
              "title": "/GET/:id questions",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\questions.js",
              "file": "\\test\\testAdmin\\questions.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET a questions by the given id",
                  "fullTitle": "*********** QUESTIONS_ADMIN *********** /GET/:id questions it should GET a questions by the given id",
                  "timedOut": false,
                  "duration": 258,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nchai\n  .request(server)\n  .get(`${url}/questions/${id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((error, res) => {\n    const { body } = res\n    console.log(body.errors)\n    res.should.have.status(200)\n    body.should.be.a('object')\n    body.should.include.keys('status', '_id', 'question')\n    body.should.have.property('_id').eql(id)\n    done()\n  })",
                  "err": {},
                  "uuid": "26cd110b-0c17-4166-9bea-bf1ff961181b",
                  "parentUUID": "949114ac-372e-4dd5-861d-1677a40fd27d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT be able to consume the route since no token was sent",
                  "fullTitle": "*********** QUESTIONS_ADMIN *********** /GET/:id questions it should NOT be able to consume the route since no token was sent",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nchai\n  .request(server)\n  .get(`${url}/questions/${id}`)\n  .end((err, res) => {\n    res.should.have.status(401)\n    done()\n  })",
                  "err": {},
                  "uuid": "2901f2ca-2ea5-44c6-ad17-2f5b4af11912",
                  "parentUUID": "949114ac-372e-4dd5-861d-1677a40fd27d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "26cd110b-0c17-4166-9bea-bf1ff961181b",
                "2901f2ca-2ea5-44c6-ad17-2f5b4af11912"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 261,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "84716fa5-7a15-451a-a1b5-583ff53d720a",
              "title": "/PATCH/:id questions",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\questions.js",
              "file": "\\test\\testAdmin\\questions.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should UPDATE a questions given the id",
                  "fullTitle": "*********** QUESTIONS_ADMIN *********** /PATCH/:id questions it should UPDATE a questions given the id",
                  "timedOut": false,
                  "duration": 274,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nconst object = { question: faker.random.words() }\nchai\n  .request(server)\n  .patch(`${url}/questions/${id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(object)\n  .end((error, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.a('object')\n    body.should.have.property('_id').eql(id)\n    body.should.have.property('question').eql(object.question)\n    done()\n  })",
                  "err": {},
                  "uuid": "5368ecf7-139f-4293-844f-ae3ebd2d9568",
                  "parentUUID": "84716fa5-7a15-451a-a1b5-583ff53d720a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT be able to consume the route since no token was sent",
                  "fullTitle": "*********** QUESTIONS_ADMIN *********** /PATCH/:id questions it should NOT be able to consume the route since no token was sent",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nchai\n  .request(server)\n  .patch(`${url}/questions/${id}`)\n  .send({\n    question: faker.random.words()\n  })\n  .end((err, res) => {\n    res.should.have.status(401)\n    done()\n  })",
                  "err": {},
                  "uuid": "3c2bc552-94b1-47b1-b20a-4bde6afdab0c",
                  "parentUUID": "84716fa5-7a15-451a-a1b5-583ff53d720a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5368ecf7-139f-4293-844f-ae3ebd2d9568",
                "3c2bc552-94b1-47b1-b20a-4bde6afdab0c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 278,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "ebe1fc13-7735-4ba3-95b1-42971d8c471c",
              "title": "/DELETE/:id questions",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\questions.js",
              "file": "\\test\\testAdmin\\questions.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should DELETE a questions given the id",
                  "fullTitle": "*********** QUESTIONS_ADMIN *********** /DELETE/:id questions it should DELETE a questions given the id",
                  "timedOut": false,
                  "duration": 543,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const objectDelete = {\n  question: faker.random.words()\n}\nchai\n  .request(server)\n  .post(`${url}/questions`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(objectDelete)\n  .end((err, res) => {\n    res.should.have.status(201)\n    res.body.should.be.a('object')\n    res.body.should.include.keys('_id', 'question')\n    chai\n      .request(server)\n      .delete(`${url}/questions/${res.body._id}`)\n      .set('Authorization', `Bearer ${token}`)\n      .end((error, result) => {\n        const { body } = result\n        result.should.have.status(200)\n        body.should.be.a('object')\n        body.should.have.property('msg').eql('DELETED')\n        done()\n      })\n  })",
                  "err": {},
                  "uuid": "b8d25ef9-1758-4089-917b-769b4cd85057",
                  "parentUUID": "ebe1fc13-7735-4ba3-95b1-42971d8c471c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b8d25ef9-1758-4089-917b-769b4cd85057"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 543,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "a8760459-3357-42b0-ba6c-1e6b5413d7a1",
          "title": "*********** REFERREDS_ADMIN ***********",
          "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\reffereds.js",
          "file": "\\test\\testAdmin\\reffereds.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"*********** REFERREDS_ADMIN ***********\"",
              "fullTitle": "*********** REFERREDS_ADMIN *********** \"after all\" hook in \"*********** REFERREDS_ADMIN ***********\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "createdID.forEach((id) => {\n  reffered.findByIdAndRemove(id, (err) => {\n    if (err) {\n      // console.log(err)\n    }\n  })\n})",
              "err": {},
              "uuid": "a14bf52c-203b-4f01-a715-790324c9bab8",
              "parentUUID": "a8760459-3357-42b0-ba6c-1e6b5413d7a1",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "489e3ca2-d69f-420d-bf56-12d5e778f037",
              "title": "/POST login",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\reffereds.js",
              "file": "\\test\\testAdmin\\reffereds.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET token user",
                  "fullTitle": "*********** REFERREDS_ADMIN *********** /POST login it should GET token user",
                  "timedOut": false,
                  "duration": 263,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/login`)\n  .send(loginDetails)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('object')\n    res.body.should.include.keys('accessToken', 'user')\n    const currentAccessToken = res.body.accessToken\n    accessToken = currentAccessToken\n    done()\n  })",
                  "err": {},
                  "uuid": "519a9488-2077-458b-b04e-188af4a13cab",
                  "parentUUID": "489e3ca2-d69f-420d-bf56-12d5e778f037",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET a fresh token",
                  "fullTitle": "*********** REFERREDS_ADMIN *********** /POST login it should GET a fresh token",
                  "timedOut": false,
                  "duration": 417,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/exchange`)\n  .send({\n    accessToken\n  })\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.an('object')\n    body.should.include.keys('token', 'user')\n    const currentToken = body.token\n    token = currentToken\n    done()\n  })",
                  "err": {},
                  "uuid": "fd83474a-59de-4e03-b9bc-a11cb090b08a",
                  "parentUUID": "489e3ca2-d69f-420d-bf56-12d5e778f037",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "519a9488-2077-458b-b04e-188af4a13cab",
                "fd83474a-59de-4e03-b9bc-a11cb090b08a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 680,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "111e6198-97ff-4e3f-9a35-1ebb1efcd79b",
              "title": "/GET referreds",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\reffereds.js",
              "file": "\\test\\testAdmin\\reffereds.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET all the referreds",
                  "fullTitle": "*********** REFERREDS_ADMIN *********** /GET referreds it should GET all the referreds",
                  "timedOut": false,
                  "duration": 177,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/referreds`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    const { body } = res\n    const { docs } = body\n    res.should.have.status(200)\n    body.should.be.an('object')\n    docs.should.be.an('array').length(2)\n    const firstorder = _.head(docs)\n    firstorder.should.include.keys('_id', 'amountTo', 'amountFrom')\n    const from = firstorder.userFrom\n    from.should.have.property('_id').eql(userFrom)\n    done()\n  })",
                  "err": {},
                  "uuid": "5cb5ed90-4009-4263-bf17-061a87c5343a",
                  "parentUUID": "111e6198-97ff-4e3f-9a35-1ebb1efcd79b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5cb5ed90-4009-4263-bf17-061a87c5343a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 177,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "af9e8b1b-0149-4600-9eb3-893fe80b20cc",
              "title": "/POST referreds",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\reffereds.js",
              "file": "\\test\\testAdmin\\reffereds.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should NOT POST a reffered without",
                  "fullTitle": "*********** REFERREDS_ADMIN *********** /POST referreds it should NOT POST a reffered without",
                  "timedOut": false,
                  "duration": 173,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const refferedPostOne = {}\nchai\n  .request(server)\n  .post(`${url}/referreds`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(refferedPostOne)\n  .end((err, res) => {\n    res.should.have.status(422)\n    const { body } = res\n    body.should.be.a('object')\n    body.should.have.property('errors')\n    const { errors } = body\n    errors.should.have.property('msg').be.a('array')\n    done()\n  })",
                  "err": {},
                  "uuid": "f433b4b0-f897-4432-ab05-e2a98ccf59e9",
                  "parentUUID": "af9e8b1b-0149-4600-9eb3-893fe80b20cc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should POST a reffered ",
                  "fullTitle": "*********** REFERREDS_ADMIN *********** /POST referreds it should POST a reffered ",
                  "timedOut": false,
                  "duration": 273,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const refferedPostTwo = {\n  userFrom,\n  userTo,\n  planReferred,\n  amountTo: faker.random.number(),\n  amountFrom: faker.random.number(),\n  status: 'available'\n}\nchai\n  .request(server)\n  .post(`${url}/referreds`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(refferedPostTwo)\n  .end((err, res) => {\n    res.should.have.status(201)\n    const { body } = res\n    body.should.be.a('object')\n    body.should.include.keys('_id', 'planReferred', 'userTo')\n    body.should.have.property('status').eql('available')\n    body.should.have.property('amountFrom').eql(refferedPostTwo.amountFrom)\n    body.should.have.property('_id').be.a('string')\n    createdID.push(res.body._id)\n    done()\n  })",
                  "err": {},
                  "uuid": "db127cb5-a38b-49dd-80c6-442c5544395f",
                  "parentUUID": "af9e8b1b-0149-4600-9eb3-893fe80b20cc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f433b4b0-f897-4432-ab05-e2a98ccf59e9",
                "db127cb5-a38b-49dd-80c6-442c5544395f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 446,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "8178dd56-deac-4769-8b80-a5ad09013911",
              "title": "/GET/:id referreds",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\reffereds.js",
              "file": "\\test\\testAdmin\\reffereds.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET a referreds by the given id",
                  "fullTitle": "*********** REFERREDS_ADMIN *********** /GET/:id referreds it should GET a referreds by the given id",
                  "timedOut": false,
                  "duration": 260,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nchai\n  .request(server)\n  .get(`${url}/referreds/${id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((error, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.a('object')\n    body.should.include.keys('_id', 'amountTo', 'amountFrom')\n    body.should.have.property('_id').eql(id)\n    done()\n  })",
                  "err": {},
                  "uuid": "30dcf38a-aa98-43ce-ac64-3fdfb65ad406",
                  "parentUUID": "8178dd56-deac-4769-8b80-a5ad09013911",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT be able to consume the route since no token was sent",
                  "fullTitle": "*********** REFERREDS_ADMIN *********** /GET/:id referreds it should NOT be able to consume the route since no token was sent",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nchai\n  .request(server)\n  .get(`${url}/referreds/${id}`)\n  .end((err, res) => {\n    res.should.have.status(401)\n    done()\n  })",
                  "err": {},
                  "uuid": "7e2e223d-5b81-4bf3-aa76-0d7bfdea338b",
                  "parentUUID": "8178dd56-deac-4769-8b80-a5ad09013911",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "30dcf38a-aa98-43ce-ac64-3fdfb65ad406",
                "7e2e223d-5b81-4bf3-aa76-0d7bfdea338b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 263,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "e19822ff-430d-48a5-9829-61edb55f9e01",
              "title": "/PATCH/:id referreds",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\reffereds.js",
              "file": "\\test\\testAdmin\\reffereds.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should UPDATE a reffered given the id",
                  "fullTitle": "*********** REFERREDS_ADMIN *********** /PATCH/:id referreds it should UPDATE a reffered given the id",
                  "timedOut": false,
                  "duration": 187,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nconst newAmount = faker.random.number()\nchai\n  .request(server)\n  .patch(`${url}/referreds/${id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    amountTo: newAmount\n  })\n  .end((error, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.a('object')\n    body.should.have.property('_id').eql(id)\n    body.should.have.property('amountTo').eql(newAmount)\n    createdID.push(res.body._id)\n    done()\n  })",
                  "err": {},
                  "uuid": "2ef54509-9969-4812-b6a6-e7faad216383",
                  "parentUUID": "e19822ff-430d-48a5-9829-61edb55f9e01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should not UPDATE a object empty",
                  "fullTitle": "*********** REFERREDS_ADMIN *********** /PATCH/:id referreds it should not UPDATE a object empty",
                  "timedOut": false,
                  "duration": 181,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nchai\n  .request(server)\n  .patch(`${url}/referreds/${id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .send({})\n  .end((error, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.a('object')\n    done()\n  })",
                  "err": {},
                  "uuid": "0492eb01-c06f-479d-bd1c-645c16a5ac79",
                  "parentUUID": "e19822ff-430d-48a5-9829-61edb55f9e01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT be able to consume the route since no token was sent",
                  "fullTitle": "*********** REFERREDS_ADMIN *********** /PATCH/:id referreds it should NOT be able to consume the route since no token was sent",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nchai\n  .request(server)\n  .patch(`${url}/referreds/${id}`)\n  .send({})\n  .end((err, res) => {\n    res.should.have.status(401)\n    done()\n  })",
                  "err": {},
                  "uuid": "7cbd9327-1ee9-4041-95f5-2475fa65eb68",
                  "parentUUID": "e19822ff-430d-48a5-9829-61edb55f9e01",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2ef54509-9969-4812-b6a6-e7faad216383",
                "0492eb01-c06f-479d-bd1c-645c16a5ac79",
                "7cbd9327-1ee9-4041-95f5-2475fa65eb68"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 372,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "9c45520e-a78c-46b2-a25e-82c789decc79",
              "title": "/DELETE/:id reffered",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\reffereds.js",
              "file": "\\test\\testAdmin\\reffereds.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should DELETE a reffered given the id",
                  "fullTitle": "*********** REFERREDS_ADMIN *********** /DELETE/:id reffered it should DELETE a reffered given the id",
                  "timedOut": false,
                  "duration": 540,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const reffereddelete = {\n  userFrom,\n  userTo,\n  planReferred,\n  amountTo: faker.random.number(),\n  amountFrom: faker.random.number(),\n  status: 'available'\n}\nchai\n  .request(server)\n  .post(`${url}/referreds`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(reffereddelete)\n  .end((err, res) => {\n    res.should.have.status(201)\n    res.body.should.be.a('object')\n    res.body.should.include.keys(\n      '_id',\n      'amountTo',\n      'amountFrom',\n      'status'\n    )\n    chai\n      .request(server)\n      .delete(`${url}/referreds/${res.body._id}`)\n      .set('Authorization', `Bearer ${token}`)\n      .end((error, result) => {\n        const { body } = result\n        result.should.have.status(200)\n        body.should.be.a('object')\n        body.should.have.property('msg').eql('DELETED')\n        done()\n      })\n  })",
                  "err": {},
                  "uuid": "16f13c64-74a5-40d7-891d-e75cf7f11099",
                  "parentUUID": "9c45520e-a78c-46b2-a25e-82c789decc79",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "16f13c64-74a5-40d7-891d-e75cf7f11099"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 540,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "f93e277c-44be-4199-98c9-d4f361d058c8",
          "title": "*********** REFERREDS_SETTINGS_ADMIN ***********",
          "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\refferedSettings.js",
          "file": "\\test\\testAdmin\\refferedSettings.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"*********** REFERREDS_SETTINGS_ADMIN ***********\"",
              "fullTitle": "*********** REFERREDS_SETTINGS_ADMIN *********** \"after all\" hook in \"*********** REFERREDS_SETTINGS_ADMIN ***********\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "createdID.forEach((id) => {\n  referredSettings.findByIdAndRemove(id, (err) => {\n    if (err) {\n      // console.log(err)\n    }\n  })\n})",
              "err": {},
              "uuid": "27475291-8792-4353-984d-ba4ec9b1b954",
              "parentUUID": "f93e277c-44be-4199-98c9-d4f361d058c8",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "343be817-0b17-4ea9-8bb4-f84a5a8efe00",
              "title": "/POST login",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\refferedSettings.js",
              "file": "\\test\\testAdmin\\refferedSettings.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET token user",
                  "fullTitle": "*********** REFERREDS_SETTINGS_ADMIN *********** /POST login it should GET token user",
                  "timedOut": false,
                  "duration": 267,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/login`)\n  .send(loginDetails)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('object')\n    res.body.should.include.keys('accessToken', 'user')\n    const currentAccessToken = res.body.accessToken\n    accessToken = currentAccessToken\n    done()\n  })",
                  "err": {},
                  "uuid": "50171e26-9967-4616-b71c-745bbb5120d2",
                  "parentUUID": "343be817-0b17-4ea9-8bb4-f84a5a8efe00",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET a fresh token",
                  "fullTitle": "*********** REFERREDS_SETTINGS_ADMIN *********** /POST login it should GET a fresh token",
                  "timedOut": false,
                  "duration": 350,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/exchange`)\n  .send({\n    accessToken\n  })\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.an('object')\n    body.should.include.keys('token', 'user')\n    const currentToken = body.token\n    token = currentToken\n    done()\n  })",
                  "err": {},
                  "uuid": "6f98662b-455f-400d-9794-41937d008c45",
                  "parentUUID": "343be817-0b17-4ea9-8bb4-f84a5a8efe00",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "50171e26-9967-4616-b71c-745bbb5120d2",
                "6f98662b-455f-400d-9794-41937d008c45"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 617,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "cd6977f3-a462-4eda-a0ea-8435ce339fec",
              "title": "/GET referreds_settings",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\refferedSettings.js",
              "file": "\\test\\testAdmin\\refferedSettings.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET all the referreds",
                  "fullTitle": "*********** REFERREDS_SETTINGS_ADMIN *********** /GET referreds_settings it should GET all the referreds",
                  "timedOut": false,
                  "duration": 172,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/referredSettings`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    const {\n      docs,\n      totalDocs,\n      hasPrevPage,\n      hasNextPage\n    } = body\n    body.should.be.an('object')\n    docs.should.be.a('array')\n    hasNextPage.should.be.a('boolean')\n    hasPrevPage.should.be.a('boolean')\n    body.limit.should.be.a('number')\n    body.page.should.be.a('number')\n    totalDocs.should.be.a('number').eql(2)\n    docs.should.have.length(2)\n    body.totalPages.should.be.a('number')\n    done()\n  })",
                  "err": {},
                  "uuid": "aa9e51f1-f166-4df4-8aca-38796e632d9f",
                  "parentUUID": "cd6977f3-a462-4eda-a0ea-8435ce339fec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT be able to consume the route since no token was sent",
                  "fullTitle": "*********** REFERREDS_SETTINGS_ADMIN *********** /GET referreds_settings it should NOT be able to consume the route since no token was sent",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/referreds`)\n  .end((err, res) => {\n    res.should.have.status(401)\n    done()\n  })",
                  "err": {},
                  "uuid": "1f3ec990-5111-4af4-b3e1-5825b8d0344e",
                  "parentUUID": "cd6977f3-a462-4eda-a0ea-8435ce339fec",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aa9e51f1-f166-4df4-8aca-38796e632d9f",
                "1f3ec990-5111-4af4-b3e1-5825b8d0344e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 175,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "a6e27dfe-0a2f-4148-9afa-0405c3ffd874",
              "title": "/POST referreds_settings",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\refferedSettings.js",
              "file": "\\test\\testAdmin\\refferedSettings.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should NOT POST a referreds_settings without referreds_settings",
                  "fullTitle": "*********** REFERREDS_SETTINGS_ADMIN *********** /POST referreds_settings it should NOT POST a referreds_settings without referreds_settings",
                  "timedOut": false,
                  "duration": 96,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const settingsPostOne = {}\nchai\n  .request(server)\n  .post(`${url}/referredSettings`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(settingsPostOne)\n  .end((err, res) => {\n    res.should.have.status(422)\n    const { body } = res\n    body.should.be.a('object')\n    body.should.have.property('errors')\n    const { errors } = body\n    errors.should.have.property('msg').be.a('array')\n    done()\n  })",
                  "err": {},
                  "uuid": "a032530b-8ce2-42c1-a07d-2eadbdc0e8ab",
                  "parentUUID": "a6e27dfe-0a2f-4148-9afa-0405c3ffd874",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should POST a referreds_settings ",
                  "fullTitle": "*********** REFERREDS_SETTINGS_ADMIN *********** /POST referreds_settings it should POST a referreds_settings ",
                  "timedOut": false,
                  "duration": 178,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const settingsPostTwo = {\n  name: faker.random.words(),\n  label: faker.random.words(),\n  amountTo: faker.random.number(),\n  amountFrom: faker.random.number()\n}\nchai\n  .request(server)\n  .post(`${url}/referredSettings`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(settingsPostTwo)\n  .end((err, res) => {\n    res.should.have.status(201)\n    const { body } = res\n    body.should.be.a('object')\n    body.should.include.keys('_id', 'name', 'label', 'amountTo')\n    body.should.have.property('name').eql(settingsPostTwo.name)\n    body.should.have.property('label').eql(settingsPostTwo.label)\n    body.should.have.property('_id').be.a('string')\n    createdID.push(res.body._id)\n    done()\n  })",
                  "err": {},
                  "uuid": "00cadf57-2c23-4382-b1dc-530e61b0d250",
                  "parentUUID": "a6e27dfe-0a2f-4148-9afa-0405c3ffd874",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a032530b-8ce2-42c1-a07d-2eadbdc0e8ab",
                "00cadf57-2c23-4382-b1dc-530e61b0d250"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 274,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "bce27bdb-55a0-44ae-bf7d-738f431afcfa",
              "title": "/GET/:id referreds_settings",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\refferedSettings.js",
              "file": "\\test\\testAdmin\\refferedSettings.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET a referreds_settings by the given id",
                  "fullTitle": "*********** REFERREDS_SETTINGS_ADMIN *********** /GET/:id referreds_settings it should GET a referreds_settings by the given id",
                  "timedOut": false,
                  "duration": 174,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nchai\n  .request(server)\n  .get(`${url}/referredSettings/${id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((error, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.a('object')\n    body.should.include.keys('name', 'amountTo', '_id')\n    body.should.have.property('_id').eql(id)\n    done()\n  })",
                  "err": {},
                  "uuid": "9ea3df8f-acd9-4b0f-abd0-4b03b62cd570",
                  "parentUUID": "bce27bdb-55a0-44ae-bf7d-738f431afcfa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT be able to consume the route since no token was sent",
                  "fullTitle": "*********** REFERREDS_SETTINGS_ADMIN *********** /GET/:id referreds_settings it should NOT be able to consume the route since no token was sent",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nchai\n  .request(server)\n  .get(`${url}/referredSettings/${id}`)\n  .end((err, res) => {\n    res.should.have.status(401)\n    done()\n  })",
                  "err": {},
                  "uuid": "e9784051-d0fe-4530-8e38-e9d97ff1d848",
                  "parentUUID": "bce27bdb-55a0-44ae-bf7d-738f431afcfa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9ea3df8f-acd9-4b0f-abd0-4b03b62cd570",
                "e9784051-d0fe-4530-8e38-e9d97ff1d848"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 177,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "868016f7-5c7b-4def-bee7-1cc63fd80d23",
              "title": "/PATCH/:id referreds_settings",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\refferedSettings.js",
              "file": "\\test\\testAdmin\\refferedSettings.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should UPDATE a category given the id",
                  "fullTitle": "*********** REFERREDS_SETTINGS_ADMIN *********** /PATCH/:id referreds_settings it should UPDATE a category given the id",
                  "timedOut": false,
                  "duration": 272,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nconst newName = faker.random.words()\nconst newAmount = faker.random.number()\nchai\n  .request(server)\n  .patch(`${url}/referredSettings/${id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    name: newName,\n    label: newName,\n    amountTo: newAmount,\n    amountFrom: newAmount\n  })\n  .end((error, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.a('object')\n    body.should.have.property('_id').eql(id)\n    body.should.have.property('name').eql(newName)\n    body.should.have.property('label').eql(newName)\n    body.should.have.property('amountTo').eql(newAmount)\n    body.should.have.property('amountFrom').eql(newAmount)\n    body._id.should.be.a('string')\n    createdID.push(res.body._id)\n    done()\n  })",
                  "err": {},
                  "uuid": "737003ff-cb3a-42fe-8fdc-4bcf19e86f23",
                  "parentUUID": "868016f7-5c7b-4def-bee7-1cc63fd80d23",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should not UPDATE a type referred empty",
                  "fullTitle": "*********** REFERREDS_SETTINGS_ADMIN *********** /PATCH/:id referreds_settings it should not UPDATE a type referred empty",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .patch(`${url}/referredSettings`)\n  .set('Authorization', `Bearer ${token}`)\n  .send({})\n  .end((error, res) => {\n    const { body } = res\n    res.should.have.status(404)\n    body.should.be.a('object')\n    body.should.have.property('errors')\n    done()\n  })",
                  "err": {},
                  "uuid": "c519c768-0d20-46e8-a2be-60722b3288d4",
                  "parentUUID": "868016f7-5c7b-4def-bee7-1cc63fd80d23",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT be able to consume the route since no token was sent",
                  "fullTitle": "*********** REFERREDS_SETTINGS_ADMIN *********** /PATCH/:id referreds_settings it should NOT be able to consume the route since no token was sent",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nchai\n  .request(server)\n  .patch(`${url}/referredSettings/${id}`)\n  .send({\n    name: faker.random.words()\n  })\n  .end((err, res) => {\n    res.should.have.status(401)\n    done()\n  })",
                  "err": {},
                  "uuid": "2e65030f-47b1-42f3-8844-cf6c1e7ddc68",
                  "parentUUID": "868016f7-5c7b-4def-bee7-1cc63fd80d23",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "737003ff-cb3a-42fe-8fdc-4bcf19e86f23",
                "c519c768-0d20-46e8-a2be-60722b3288d4",
                "2e65030f-47b1-42f3-8844-cf6c1e7ddc68"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 277,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "0b55d9e4-20ab-441f-8e7c-3d610cf8ae82",
              "title": "/DELETE/:id category",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\refferedSettings.js",
              "file": "\\test\\testAdmin\\refferedSettings.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should DELETE a category given the id",
                  "fullTitle": "*********** REFERREDS_SETTINGS_ADMIN *********** /DELETE/:id category it should DELETE a category given the id",
                  "timedOut": false,
                  "duration": 465,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const typeRefferedDeleted = {\n  name: faker.random.words(),\n  label: faker.random.words(),\n  amountTo: faker.random.number(),\n  amountFrom: faker.random.number()\n}\nchai\n  .request(server)\n  .post(`${url}/referredSettings`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(typeRefferedDeleted)\n  .end((err, res) => {\n    res.should.have.status(201)\n    res.body.should.be.a('object')\n    res.body.should.include.keys(\n      '_id',\n      'label',\n      'name',\n      'amountTo',\n      'amountFrom'\n    )\n    chai\n      .request(server)\n      .delete(`${url}/referredSettings/${res.body._id}`)\n      .set('Authorization', `Bearer ${token}`)\n      .end((error, result) => {\n        const { body } = result\n        result.should.have.status(200)\n        body.should.be.a('object')\n        body.should.have.property('msg').eql('DELETED')\n        done()\n      })\n  })",
                  "err": {},
                  "uuid": "e37bc2b8-616e-4e74-b4de-07fd69d2eea5",
                  "parentUUID": "0b55d9e4-20ab-441f-8e7c-3d610cf8ae82",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e37bc2b8-616e-4e74-b4de-07fd69d2eea5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 465,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "048db841-adda-4b55-b3f7-c1ee364b0214",
          "title": "*********** RESERVATIONS_ADMIN ***********",
          "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\reservations.js",
          "file": "\\test\\testAdmin\\reservations.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"*********** RESERVATIONS_ADMIN ***********\"",
              "fullTitle": "*********** RESERVATIONS_ADMIN *********** \"after all\" hook in \"*********** RESERVATIONS_ADMIN ***********\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "createdID.forEach((id) => {\n  reservation.findByIdAndRemove(id, (err) => {\n    if (err) {\n      // console.log(err)\n    }\n  })\n})",
              "err": {},
              "uuid": "28e46e58-4fa8-4811-88b7-8b52903522b8",
              "parentUUID": "048db841-adda-4b55-b3f7-c1ee364b0214",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "d9a72d82-152d-41fa-bf41-e7e537704ac8",
              "title": "/POST login",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\reservations.js",
              "file": "\\test\\testAdmin\\reservations.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET token user",
                  "fullTitle": "*********** RESERVATIONS_ADMIN *********** /POST login it should GET token user",
                  "timedOut": false,
                  "duration": 263,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/login`)\n  .send(loginDetails)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('object')\n    res.body.should.include.keys('accessToken', 'user')\n    const currentAccessToken = res.body.accessToken\n    accessToken = currentAccessToken\n    done()\n  })",
                  "err": {},
                  "uuid": "aba57d3e-3b01-4a41-9562-4971113e5243",
                  "parentUUID": "d9a72d82-152d-41fa-bf41-e7e537704ac8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET a fresh token",
                  "fullTitle": "*********** RESERVATIONS_ADMIN *********** /POST login it should GET a fresh token",
                  "timedOut": false,
                  "duration": 353,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/exchange`)\n  .send({\n    accessToken\n  })\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.an('object')\n    body.should.include.keys('token', 'user')\n    const currentToken = body.token\n    token = currentToken\n    done()\n  })",
                  "err": {},
                  "uuid": "7dbb16d3-1481-4099-8f59-234533dcd2b5",
                  "parentUUID": "d9a72d82-152d-41fa-bf41-e7e537704ac8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aba57d3e-3b01-4a41-9562-4971113e5243",
                "7dbb16d3-1481-4099-8f59-234533dcd2b5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 616,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "fc6cf4f1-f126-4d1e-ad42-672486cf0d49",
              "title": "/GET reservations",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\reservations.js",
              "file": "\\test\\testAdmin\\reservations.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should NOT be able to consume the route since no token was sent",
                  "fullTitle": "*********** RESERVATIONS_ADMIN *********** /GET reservations it should NOT be able to consume the route since no token was sent",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/reservations/all`)\n  .end((err, res) => {\n    res.should.have.status(401)\n    done()\n  })",
                  "err": {},
                  "uuid": "16ff7ba0-173d-4e23-9040-6e6e85bf9e93",
                  "parentUUID": "fc6cf4f1-f126-4d1e-ad42-672486cf0d49",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET all the Reservations",
                  "fullTitle": "*********** RESERVATIONS_ADMIN *********** /GET reservations it should GET all the Reservations",
                  "timedOut": false,
                  "duration": 349,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/reservations/all`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200)\n    const { body } = res\n    body.should.be.an('object')\n    const { docs, totalDocs } = body\n    docs.should.be.a('array')\n    totalDocs.should.be.a('number')\n    const reservationHead = _.head(docs)\n    reservationHead.should.include.keys(\n      'code',\n      'departure',\n      'idTour'\n    )\n    reservationHead.should.have.property('user').be.a('object')\n    reservationHead._id.should.be.a('string')\n    reservationHead.travelerLastName.should.be.a('string')\n    reservationHead.should.have.property('travelerFirstName').eql('daniel')\n    done()\n  })",
                  "err": {},
                  "uuid": "0a892e57-41d6-406e-9004-607c1de56eeb",
                  "parentUUID": "fc6cf4f1-f126-4d1e-ad42-672486cf0d49",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "16ff7ba0-173d-4e23-9040-6e6e85bf9e93",
                "0a892e57-41d6-406e-9004-607c1de56eeb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 353,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "abf2d1b4-d7be-476b-9599-50f5e75fb919",
              "title": "/POST reservations",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\reservations.js",
              "file": "\\test\\testAdmin\\reservations.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should NOT POST a reservation without tour",
                  "fullTitle": "*********** RESERVATIONS_ADMIN *********** /POST reservations it should NOT POST a reservation without tour",
                  "timedOut": false,
                  "duration": 176,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const reservationsOne = {}\nchai\n  .request(server)\n  .post(`${url}/reservations`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(reservationsOne)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(422)\n    body.should.be.a('object')\n    body.should.have.property('errors')\n    const { errors } = body\n    errors.should.have.property('msg').be.a('array')\n    done()\n  })",
                  "err": {},
                  "uuid": "2ae01dc7-b1f0-466b-a78d-c5e38243a5b4",
                  "parentUUID": "abf2d1b4-d7be-476b-9599-50f5e75fb919",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should POST a reservations ",
                  "fullTitle": "*********** RESERVATIONS_ADMIN *********** /POST reservations it should POST a reservations ",
                  "timedOut": false,
                  "duration": 429,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fackEmail = 'pepito@gmail.com'\nconst reservationsPost = {\n  travelerFirstName: faker.random.words(),\n  travelerLastName: faker.random.words(),\n  travelerEmail: fackEmail,\n  travelerPhone: {\n    number: '+57 314 3605160',\n    code: 'CO'\n  },\n  travelerDocument: faker.random.word(),\n  travelerAddress: faker.random.word(),\n  travelerBirthDay: '02-10-2020',\n  travelerGender: 'M',\n  country: faker.random.word(),\n  city: faker.random.word(),\n  idTour,\n  idDeparture,\n  idUser,\n  status: 'pending'\n}\nchai\n  .request(server)\n  .post(`${url}/reservations`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(reservationsPost)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(201)\n    body.should.be.a('object')\n    body.should.include.keys('_id', 'amount', 'status', 'code')\n    body.should.have.property('amount').to.be.a('Number')\n    body.should.have.property('amount').eql(948.99)\n    body.should.have.property('status').eql('pending')\n    body.should.have.property('travelerEmail').eql(fackEmail)\n    body.should.have.property('idTour').eql(idTour)\n    createdID.push(body._id)\n    done()\n  })",
                  "err": {},
                  "uuid": "24c8eaee-65f6-4851-9cd6-e2b822c70ed8",
                  "parentUUID": "abf2d1b4-d7be-476b-9599-50f5e75fb919",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT POST a reservation",
                  "fullTitle": "*********** RESERVATIONS_ADMIN *********** /POST reservations it should NOT POST a reservation",
                  "timedOut": false,
                  "duration": 177,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const reservationsTwo = {\n  travelerAddres: faker.random.word(),\n  travelerGender: faker.random.word(),\n  idDeparture\n}\nchai\n  .request(server)\n  .post(`${url}/reservations`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(reservationsTwo)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(422)\n    body.should.be.a('object')\n    body.should.have.property('errors')\n    const { errors } = body\n    errors.should.be.a('object')\n    errors.should.have.property('msg').be.a('array')\n    done()\n  })",
                  "err": {},
                  "uuid": "8b847072-1ac0-4277-ab3a-5eb2bbf4a7b0",
                  "parentUUID": "abf2d1b4-d7be-476b-9599-50f5e75fb919",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT be able to consume the route since no token was sent",
                  "fullTitle": "*********** RESERVATIONS_ADMIN *********** /POST reservations it should NOT be able to consume the route since no token was sent",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const reservationsTwo = {\n  travelerAddres: faker.random.word(),\n  travelerGender: faker.random.word(),\n  idDeparture\n}\nchai\n  .request(server)\n  .post(`${url}/reservations`)\n  .send(reservationsTwo)\n  .end((err, res) => {\n    res.should.have.status(401)\n    done()\n  })",
                  "err": {},
                  "uuid": "284dc534-8ad6-4f2b-8cab-e6eb5d425e09",
                  "parentUUID": "abf2d1b4-d7be-476b-9599-50f5e75fb919",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2ae01dc7-b1f0-466b-a78d-c5e38243a5b4",
                "24c8eaee-65f6-4851-9cd6-e2b822c70ed8",
                "8b847072-1ac0-4277-ab3a-5eb2bbf4a7b0",
                "284dc534-8ad6-4f2b-8cab-e6eb5d425e09"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 785,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "6b7b150f-eca3-4436-a8ed-39d2a5b0c94b",
              "title": "/GET/:id Reservation",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\reservations.js",
              "file": "\\test\\testAdmin\\reservations.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should not  GET reservation by the given code",
                  "fullTitle": "*********** RESERVATIONS_ADMIN *********** /GET/:id Reservation it should not  GET reservation by the given code",
                  "timedOut": false,
                  "duration": 252,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/reservations/getDetails/000-000`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((error, res) => {\n    const { body } = res\n    res.should.have.status(404)\n    body.should.be.a('object')\n    body.should.have\n      .property('errors')\n      .eql({ msg: 'NOT_FOUND_RESERVATION' })\n    done()\n  })",
                  "err": {},
                  "uuid": "ba38d176-e3bf-4648-b58e-c8316f2a5244",
                  "parentUUID": "6b7b150f-eca3-4436-a8ed-39d2a5b0c94b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET a reservation by the given code",
                  "fullTitle": "*********** RESERVATIONS_ADMIN *********** /GET/:id Reservation it should GET a reservation by the given code",
                  "timedOut": false,
                  "duration": 462,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/reservations/getDetails/${codeReservation}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((error, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.a('object')\n    body.should.include.keys(\n      'transactions',\n      'travelerFirstName',\n      'amount',\n      'code',\n      '_id'\n    )\n    body.should.have.property('_id').eql(idReservation)\n    body.should.have.property('code').eql(codeReservation)\n    body.amount.should.be.a('number')\n    body.asTour.should.be.a('object')\n    body.asDeparture.should.be.a('object')\n    body.asUser.should.be.a('object')\n    body.should.have.property('travelerEmail').eql(loginDetails.email)\n    done()\n  })",
                  "err": {},
                  "uuid": "35cfbb4d-b062-4292-b259-9232dc9b1ac9",
                  "parentUUID": "6b7b150f-eca3-4436-a8ed-39d2a5b0c94b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET a tour by the given id",
                  "fullTitle": "*********** RESERVATIONS_ADMIN *********** /GET/:id Reservation it should GET a tour by the given id",
                  "timedOut": false,
                  "duration": 424,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/reservations/getDetails/${idReservation}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((error, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.a('object')\n    body.should.include.keys(\n      'transactions',\n      'travelerFirstName',\n      'amount',\n      'code',\n      '_id'\n    )\n    body.should.have.property('_id').eql(idReservation)\n    body.should.have.property('code').eql(codeReservation)\n    body.amount.should.be.a('number')\n    body.transactions.should.be.a('array').length(0)\n    body.should.have.property('travelerEmail').eql(loginDetails.email)\n    done()\n  })",
                  "err": {},
                  "uuid": "a379f401-282c-4797-82e0-9900e186e1d1",
                  "parentUUID": "6b7b150f-eca3-4436-a8ed-39d2a5b0c94b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ba38d176-e3bf-4648-b58e-c8316f2a5244",
                "35cfbb4d-b062-4292-b259-9232dc9b1ac9",
                "a379f401-282c-4797-82e0-9900e186e1d1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1138,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "79b5e070-a25f-4590-b65e-7d9f8f09c09b",
              "title": "/PATCH/:id reservations",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\reservations.js",
              "file": "\\test\\testAdmin\\reservations.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should UPDATE a tour given the id",
                  "fullTitle": "*********** RESERVATIONS_ADMIN *********** /PATCH/:id reservations it should UPDATE a tour given the id",
                  "timedOut": false,
                  "duration": 366,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nconst emergencyName = faker.random.words()\nconst emergencyLastName = faker.random.words()\nconst dataUpdate = {\n  travelerFirstName: faker.random.words(),\n  travelerLastName: faker.random.words(),\n  travelerEmail: 'user@user.com',\n  travelerPhone: {\n    number: faker.random.words(),\n    code: faker.random.words()\n  },\n  travelerDocument: faker.random.words(),\n  travelerAddress: faker.random.words(),\n  travelerBirthDay: '2020-09-11T13:58:49.529Z',\n  travelerGender: 'F',\n  country: faker.random.words(),\n  city: faker.random.words(),\n  observations: faker.random.words(),\n  status: 'completed',\n  buyerFirstName: faker.random.words(),\n  buyerLastName: faker.random.words(),\n  buyerDocument: faker.random.words(),\n  buyerEmail: 'userdoc@user.com',\n  buyerPhone: {\n    number: faker.random.words(),\n    code: faker.random.words()\n  },\n  buyerBirthDay: '2020-09-11T13:58:49.529Z',\n  emergencyName,\n  emergencyLastName,\n  emergencyPhone: {\n    number: faker.random.words(),\n    code: faker.random.words()\n  },\n  invoice: faker.random.words(),\n  idDeparture,\n  customData: {}\n}\nchai\n  .request(server)\n  .patch(`${url}/reservations/${id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(dataUpdate)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.a('object')\n    body.should.have.property('_id').eql(id)\n    body.should.include.keys(\n      'status',\n      'deleted',\n      '_id',\n      'idDeparture',\n      'country',\n      'city',\n      'amount',\n      'idTour',\n      'idUser',\n      'code',\n      'createdAt',\n      'updatedAt',\n      'buyerPhone',\n      'emergencyLastName',\n      'emergencyName',\n      'emergencyPhone',\n      'invoice',\n      'observations'\n    )\n    body.should.have.property('emergencyName').eql(emergencyName)\n    body.should.have\n      .property('emergencyLastName')\n      .eql(emergencyLastName)\n    createdID.push(res.body._id)\n    done()\n  })",
                  "err": {},
                  "uuid": "41d5a170-dc14-4776-a078-f9da17d212ba",
                  "parentUUID": "79b5e070-a25f-4590-b65e-7d9f8f09c09b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT be able to consume the route since no token was sent",
                  "fullTitle": "*********** RESERVATIONS_ADMIN *********** /PATCH/:id reservations it should NOT be able to consume the route since no token was sent",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nconst name = faker.random.words()\nconst lastName = faker.random.words()\nchai\n  .request(server)\n  .patch(`${url}/reservations/${id}`)\n  .send({\n    emergencyName: name,\n    emergencyLastName: lastName,\n    travelerBirthDay: '02-10-2020'\n  })\n  .end((err, res) => {\n    res.should.have.status(401)\n    done()\n  })",
                  "err": {},
                  "uuid": "118fd420-8b3d-4fc1-ab32-2e505282b402",
                  "parentUUID": "79b5e070-a25f-4590-b65e-7d9f8f09c09b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "41d5a170-dc14-4776-a078-f9da17d212ba",
                "118fd420-8b3d-4fc1-ab32-2e505282b402"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 369,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "48cdafa4-f4e0-422b-86f7-45ffd90c646d",
              "title": "/DELETE/:id reservations",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\reservations.js",
              "file": "\\test\\testAdmin\\reservations.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should DELETE a tour given the id",
                  "fullTitle": "*********** RESERVATIONS_ADMIN *********** /DELETE/:id reservations it should DELETE a tour given the id",
                  "timedOut": false,
                  "duration": 291,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nchai\n  .request(server)\n  .delete(`${url}/reservations/${id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((error, result) => {\n    const { body } = result\n    result.should.have.status(200)\n    body.should.be.a('object')\n    body.should.have.property('msg').eql('DELETED')\n    done()\n  })",
                  "err": {},
                  "uuid": "c72c30bd-8f78-4617-8004-d94cf4b171db",
                  "parentUUID": "48cdafa4-f4e0-422b-86f7-45ffd90c646d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c72c30bd-8f78-4617-8004-d94cf4b171db"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 291,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "3834b275-430a-469a-8d38-240480260bc3",
          "title": "*********** SUPPORT_ADMIN ***********",
          "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\support.js",
          "file": "\\test\\testAdmin\\support.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "45ca5a33-8831-435b-a4b4-298f296c49a8",
              "title": "/POST login",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\support.js",
              "file": "\\test\\testAdmin\\support.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET token user",
                  "fullTitle": "*********** SUPPORT_ADMIN *********** /POST login it should GET token user",
                  "timedOut": false,
                  "duration": 261,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/login`)\n  .send(loginDetails)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('object')\n    res.body.should.include.keys('accessToken', 'user')\n    const currentAccessToken = res.body.accessToken\n    accessToken = currentAccessToken\n    done()\n  })",
                  "err": {},
                  "uuid": "d0b77a69-2dab-4877-9c98-6efe2e6664df",
                  "parentUUID": "45ca5a33-8831-435b-a4b4-298f296c49a8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET a fresh token",
                  "fullTitle": "*********** SUPPORT_ADMIN *********** /POST login it should GET a fresh token",
                  "timedOut": false,
                  "duration": 345,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/exchange`)\n  .send({\n    accessToken\n  })\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.an('object')\n    body.should.include.keys('token', 'user')\n    const currentToken = body.token\n    token = currentToken\n    done()\n  })",
                  "err": {},
                  "uuid": "e4aba1fb-2b69-4c3d-b54b-7747a0d0ae82",
                  "parentUUID": "45ca5a33-8831-435b-a4b4-298f296c49a8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d0b77a69-2dab-4877-9c98-6efe2e6664df",
                "e4aba1fb-2b69-4c3d-b54b-7747a0d0ae82"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 606,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "7af012ae-39e3-4607-aee2-3241b6c034ef",
              "title": "/GET support",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\support.js",
              "file": "\\test\\testAdmin\\support.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should NOT be able to consume the route since no token was sent",
                  "fullTitle": "*********** SUPPORT_ADMIN *********** /GET support it should NOT be able to consume the route since no token was sent",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/support`)\n  .end((err, res) => {\n    res.should.have.status(401)\n    done()\n  })",
                  "err": {},
                  "uuid": "c245bbb7-b711-4609-9800-afdae0e6cf81",
                  "parentUUID": "7af012ae-39e3-4607-aee2-3241b6c034ef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET all the support",
                  "fullTitle": "*********** SUPPORT_ADMIN *********** /GET support it should GET all the support",
                  "timedOut": false,
                  "duration": 176,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/support`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200)\n    const { body } = res\n    body.docs.should.be.a('array')\n    body.totalDocs.should.be.a('number').eql(1)\n    const { docs } = body\n    const firstChat = _.head(docs)\n    firstChat.should.include.keys(\n      '_id',\n      'status',\n      'hash',\n      'firstMessage'\n    )\n    id = firstChat._id\n    firstChat._id.should.be.a('string')\n    firstChat.hash.should.be.a('string').eql(hash)\n    done()\n  })",
                  "err": {},
                  "uuid": "a7f5c417-f268-45ac-86ac-40eecded8c4b",
                  "parentUUID": "7af012ae-39e3-4607-aee2-3241b6c034ef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET item by id",
                  "fullTitle": "*********** SUPPORT_ADMIN *********** /GET support it should GET item by id",
                  "timedOut": false,
                  "duration": 171,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/support/${id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200)\n    const { body } = res\n    body.should.include.keys(\n      '_id',\n      'status',\n      'hash',\n      'messages'\n    )\n    body._id.should.be.a('string').eql(id)\n    body.hash.should.be.a('string').eql(hash)\n    done()\n  })",
                  "err": {},
                  "uuid": "2338f96e-f5ce-4150-9d9a-f3642726b113",
                  "parentUUID": "7af012ae-39e3-4607-aee2-3241b6c034ef",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c245bbb7-b711-4609-9800-afdae0e6cf81",
                "a7f5c417-f268-45ac-86ac-40eecded8c4b",
                "2338f96e-f5ce-4150-9d9a-f3642726b113"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 349,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "b5a035eb-e7b8-41d9-af22-2e06a7fb998d",
              "title": "/POST To new support",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\support.js",
              "file": "\\test\\testAdmin\\support.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "error in params",
                  "fullTitle": "*********** SUPPORT_ADMIN *********** /POST To new support error in params",
                  "timedOut": false,
                  "duration": 91,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const messagePost = {\n  message: faker.random.words()\n}\nchai\n  .request(server)\n  .post(`${url}/support`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(messagePost)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(422)\n    body.should.be.a('object')\n    body.should.have.property('errors')\n    // res.body.should.include.property('errors').eql({ msg: 'BODY_INCOMPLETE' })\n    done()\n  })",
                  "err": {},
                  "uuid": "b5b4e0bf-059f-46ce-85b7-686942f8d3e4",
                  "parentUUID": "b5a035eb-e7b8-41d9-af22-2e06a7fb998d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should POST to without hash",
                  "fullTitle": "*********** SUPPORT_ADMIN *********** /POST To new support it should POST to without hash",
                  "timedOut": false,
                  "duration": 288,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const messagePost = {\n  message: faker.random.words(),\n  id\n}\nchai\n  .request(server)\n  .post(`${url}/support`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(messagePost)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.a('object')\n    body.should.include.keys('_id', 'hash')\n    body._id.should.be.a('string')\n    body.hash.should.be.a('string')\n    body.messages.should.be.a('array').length(2)\n    const lastMessage = _.last(body.messages)\n    lastMessage.should.have.property('message').eql(messagePost.message)\n    createdID.push(res.body._id)\n    done()\n  })",
                  "err": {},
                  "uuid": "fa08607d-77f5-4e3e-9710-030e0f3ed9e5",
                  "parentUUID": "b5a035eb-e7b8-41d9-af22-2e06a7fb998d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b5b4e0bf-059f-46ce-85b7-686942f8d3e4",
                "fa08607d-77f5-4e3e-9710-030e0f3ed9e5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 379,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "52bf806a-d796-4a4b-9a29-d0c562c948cd",
          "title": "*********** TAGS_ADMIN ***********",
          "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\tags.js",
          "file": "\\test\\testAdmin\\tags.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"*********** TAGS_ADMIN ***********\"",
              "fullTitle": "*********** TAGS_ADMIN *********** \"after all\" hook in \"*********** TAGS_ADMIN ***********\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "createdID.forEach((id) => {\n  tag.findByIdAndRemove(id, (err) => {\n    if (err) {\n      // console.log(err)\n    }\n  })\n})",
              "err": {},
              "uuid": "dceb0747-74ab-4829-8dd2-820055c18124",
              "parentUUID": "52bf806a-d796-4a4b-9a29-d0c562c948cd",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "c3594596-fc08-405f-a426-f9cea85ef316",
              "title": "/POST login",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\tags.js",
              "file": "\\test\\testAdmin\\tags.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET token user",
                  "fullTitle": "*********** TAGS_ADMIN *********** /POST login it should GET token user",
                  "timedOut": false,
                  "duration": 260,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/login`)\n  .send(loginDetails)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('object')\n    res.body.should.include.keys('accessToken', 'user')\n    const currentAccessToken = res.body.accessToken\n    accessToken = currentAccessToken\n    done()\n  })",
                  "err": {},
                  "uuid": "d821f43a-c6d0-491b-a2fb-6dc40b460e39",
                  "parentUUID": "c3594596-fc08-405f-a426-f9cea85ef316",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET a fresh token",
                  "fullTitle": "*********** TAGS_ADMIN *********** /POST login it should GET a fresh token",
                  "timedOut": false,
                  "duration": 349,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/exchange`)\n  .send({\n    accessToken\n  })\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.an('object')\n    body.should.include.keys('token', 'user')\n    const currentToken = body.token\n    token = currentToken\n    done()\n  })",
                  "err": {},
                  "uuid": "67f638fb-c59e-4794-863e-f0548ee78abe",
                  "parentUUID": "c3594596-fc08-405f-a426-f9cea85ef316",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d821f43a-c6d0-491b-a2fb-6dc40b460e39",
                "67f638fb-c59e-4794-863e-f0548ee78abe"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 609,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "f46c80cc-bdc0-4563-a2ff-65599bb48820",
              "title": "/GET tags",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\tags.js",
              "file": "\\test\\testAdmin\\tags.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should NOT be able to consume the route since no token was sent",
                  "fullTitle": "*********** TAGS_ADMIN *********** /GET tags it should NOT be able to consume the route since no token was sent",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/tags`)\n  .end((err, res) => {\n    res.should.have.status(401)\n    done()\n  })",
                  "err": {},
                  "uuid": "1da25d83-0783-42c3-a351-1d53b622017f",
                  "parentUUID": "f46c80cc-bdc0-4563-a2ff-65599bb48820",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET all the tags",
                  "fullTitle": "*********** TAGS_ADMIN *********** /GET tags it should GET all the tags",
                  "timedOut": false,
                  "duration": 270,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/tags`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('object')\n    res.body.docs.should.be.a('array')\n    done()\n  })",
                  "err": {},
                  "uuid": "2cfb5cfd-faf5-4090-90ba-9d9d5d670afd",
                  "parentUUID": "f46c80cc-bdc0-4563-a2ff-65599bb48820",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET the tags with filters",
                  "fullTitle": "*********** TAGS_ADMIN *********** /GET tags it should GET the tags with filters",
                  "timedOut": false,
                  "duration": 258,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/tags?filter=tren&fields=name`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('object')\n    res.body.docs.should.be.a('array')\n    res.body.docs.should.have.lengthOf(1)\n    res.body.docs[0].should.have.property('name').eql('tren')\n    done()\n  })",
                  "err": {},
                  "uuid": "2a346744-39ea-4f5e-a86c-df4602bad45b",
                  "parentUUID": "f46c80cc-bdc0-4563-a2ff-65599bb48820",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1da25d83-0783-42c3-a351-1d53b622017f",
                "2cfb5cfd-faf5-4090-90ba-9d9d5d670afd",
                "2a346744-39ea-4f5e-a86c-df4602bad45b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 532,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "e59855ae-3184-44ac-8e99-71d24f930350",
              "title": "/POST tags",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\tags.js",
              "file": "\\test\\testAdmin\\tags.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should NOT POST a tag without tag",
                  "fullTitle": "*********** TAGS_ADMIN *********** /POST tags it should NOT POST a tag without tag",
                  "timedOut": false,
                  "duration": 173,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tagPostOne = {}\nchai\n  .request(server)\n  .post(`${url}/tags`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(tagPostOne)\n  .end((err, res) => {\n    res.should.have.status(422)\n    const { body } = res\n    body.should.be.a('object')\n    body.should.have.property('errors')\n    const { errors } = body\n    errors.should.have.property('msg').be.a('array')\n    done()\n  })",
                  "err": {},
                  "uuid": "e99aecf3-f3bf-492f-a3e9-76a68f21a052",
                  "parentUUID": "e59855ae-3184-44ac-8e99-71d24f930350",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should POST a tag ",
                  "fullTitle": "*********** TAGS_ADMIN *********** /POST tags it should POST a tag ",
                  "timedOut": false,
                  "duration": 276,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tagPostTwo = {\n  name\n}\nchai\n  .request(server)\n  .post(`${url}/tags`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(tagPostTwo)\n  .end((err, res) => {\n    res.should.have.status(201)\n    const { body } = res\n    body.should.be.a('object')\n    body.should.include.keys('_id', 'name')\n    body.should.have.property('name').eql(name)\n    body.should.have.property('_id').be.a('string')\n    createdID.push(res.body._id)\n    done()\n  })",
                  "err": {},
                  "uuid": "f4aa1bfa-3b00-41eb-8ae7-efdc9c34eec9",
                  "parentUUID": "e59855ae-3184-44ac-8e99-71d24f930350",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e99aecf3-f3bf-492f-a3e9-76a68f21a052",
                "f4aa1bfa-3b00-41eb-8ae7-efdc9c34eec9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 449,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "28144f2b-523d-437e-bbe6-9d0fc878a1c7",
              "title": "/GET/:id tags",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\tags.js",
              "file": "\\test\\testAdmin\\tags.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET a tags by the given id",
                  "fullTitle": "*********** TAGS_ADMIN *********** /GET/:id tags it should GET a tags by the given id",
                  "timedOut": false,
                  "duration": 258,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nchai\n  .request(server)\n  .get(`${url}/tags/${id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((error, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.a('object')\n    body.should.include.keys('name', '_id')\n    body.should.have.property('_id').eql(id)\n    done()\n  })",
                  "err": {},
                  "uuid": "edf38bab-0954-420e-a401-75ab471786b1",
                  "parentUUID": "28144f2b-523d-437e-bbe6-9d0fc878a1c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT be able to consume the route since no token was sent",
                  "fullTitle": "*********** TAGS_ADMIN *********** /GET/:id tags it should NOT be able to consume the route since no token was sent",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nchai\n  .request(server)\n  .get(`${url}/tags/${id}`)\n  .end((err, res) => {\n    res.should.have.status(401)\n    done()\n  })",
                  "err": {},
                  "uuid": "a9d06839-99f5-4795-9219-204c48287ce9",
                  "parentUUID": "28144f2b-523d-437e-bbe6-9d0fc878a1c7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "edf38bab-0954-420e-a401-75ab471786b1",
                "a9d06839-99f5-4795-9219-204c48287ce9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 262,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "83ce8f2f-ed5d-457e-8649-80149cd222c8",
              "title": "/PATCH/:id tags",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\tags.js",
              "file": "\\test\\testAdmin\\tags.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should UPDATE a tag given the id",
                  "fullTitle": "*********** TAGS_ADMIN *********** /PATCH/:id tags it should UPDATE a tag given the id",
                  "timedOut": false,
                  "duration": 265,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nchai\n  .request(server)\n  .patch(`${url}/tags/${id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    name: newtag\n  })\n  .end((error, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.a('object')\n    body.should.have.property('_id').eql(id)\n    body.should.have.property('name').eql(newtag)\n    body._id.should.be.a('string')\n    createdID.push(res.body._id)\n    done()\n  })",
                  "err": {},
                  "uuid": "9cb6c1db-b075-4d6b-9d27-75df839dca59",
                  "parentUUID": "83ce8f2f-ed5d-457e-8649-80149cd222c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should not UPDATE a tags empty",
                  "fullTitle": "*********** TAGS_ADMIN *********** /PATCH/:id tags it should not UPDATE a tags empty",
                  "timedOut": false,
                  "duration": 174,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nchai\n  .request(server)\n  .patch(`${url}/tags/${id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .send({})\n  .end((error, res) => {\n    const { body } = res\n    res.should.have.status(422)\n    body.should.be.a('object')\n    body.should.have.property('errors')\n    done()\n  })",
                  "err": {},
                  "uuid": "74271518-85ce-427e-95b0-79ee169b40c6",
                  "parentUUID": "83ce8f2f-ed5d-457e-8649-80149cd222c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT be able to consume the route since no token was sent",
                  "fullTitle": "*********** TAGS_ADMIN *********** /PATCH/:id tags it should NOT be able to consume the route since no token was sent",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nchai\n  .request(server)\n  .patch(`${url}/tags/${id}`)\n  .send({\n    name: newtag\n  })\n  .end((err, res) => {\n    res.should.have.status(401)\n    done()\n  })",
                  "err": {},
                  "uuid": "b5402d65-d47f-4f30-a680-cf490db2cf44",
                  "parentUUID": "83ce8f2f-ed5d-457e-8649-80149cd222c8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9cb6c1db-b075-4d6b-9d27-75df839dca59",
                "74271518-85ce-427e-95b0-79ee169b40c6",
                "b5402d65-d47f-4f30-a680-cf490db2cf44"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 442,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "09cbdf35-f1bc-48a3-b038-7174e56c2cc0",
              "title": "/DELETE/:id tag",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\tags.js",
              "file": "\\test\\testAdmin\\tags.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should DELETE a tag given the id",
                  "fullTitle": "*********** TAGS_ADMIN *********** /DELETE/:id tag it should DELETE a tag given the id",
                  "timedOut": false,
                  "duration": 547,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tagdelete = {\n  name: faker.random.words()\n}\nchai\n  .request(server)\n  .post(`${url}/tags`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(tagdelete)\n  .end((err, res) => {\n    res.should.have.status(201)\n    res.body.should.be.a('object')\n    res.body.should.include.keys(\n      '_id',\n      'name'\n    )\n    chai\n      .request(server)\n      .delete(`${url}/tags/${res.body._id}`)\n      .set('Authorization', `Bearer ${token}`)\n      .end((error, result) => {\n        const { body } = result\n        result.should.have.status(200)\n        body.should.be.a('object')\n        body.should.have.property('msg').eql('DELETED')\n        done()\n      })\n  })",
                  "err": {},
                  "uuid": "e17f85a6-fb6e-4b4e-8181-ea5d8ff7f50a",
                  "parentUUID": "09cbdf35-f1bc-48a3-b038-7174e56c2cc0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e17f85a6-fb6e-4b4e-8181-ea5d8ff7f50a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 547,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "530f0aed-9eec-4381-b722-790d573e9f6b",
          "title": "*********** TOURS_ADMIN ***********",
          "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\tours.js",
          "file": "\\test\\testAdmin\\tours.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"*********** TOURS_ADMIN ***********\"",
              "fullTitle": "*********** TOURS_ADMIN *********** \"after all\" hook in \"*********** TOURS_ADMIN ***********\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "createdID.forEach((id) => {\n  Tour.findByIdAndRemove(id, (err) => {\n    if (err) {\n      // console.log(err)\n    }\n  })\n})",
              "err": {},
              "uuid": "fff29286-72a1-4692-9ab1-dbe847911414",
              "parentUUID": "530f0aed-9eec-4381-b722-790d573e9f6b",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "d9d161ff-e895-42c3-b739-7ca753025ddb",
              "title": "/POST login",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\tours.js",
              "file": "\\test\\testAdmin\\tours.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET token user",
                  "fullTitle": "*********** TOURS_ADMIN *********** /POST login it should GET token user",
                  "timedOut": false,
                  "duration": 268,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/login`)\n  .send(loginDetails)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('object')\n    res.body.should.include.keys('accessToken', 'user')\n    const currentAccessToken = res.body.accessToken\n    accessToken = currentAccessToken\n    done()\n  })",
                  "err": {},
                  "uuid": "075233f6-9dcd-407e-8199-ef30a025254b",
                  "parentUUID": "d9d161ff-e895-42c3-b739-7ca753025ddb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET a fresh token",
                  "fullTitle": "*********** TOURS_ADMIN *********** /POST login it should GET a fresh token",
                  "timedOut": false,
                  "duration": 354,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/exchange`)\n  .send({\n    accessToken\n  })\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.an('object')\n    body.should.include.keys('token', 'user')\n    const currentToken = body.token\n    token = currentToken\n    done()\n  })",
                  "err": {},
                  "uuid": "c37ed04f-b598-4e2f-8f4a-76302efb05b3",
                  "parentUUID": "d9d161ff-e895-42c3-b739-7ca753025ddb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "075233f6-9dcd-407e-8199-ef30a025254b",
                "c37ed04f-b598-4e2f-8f4a-76302efb05b3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 622,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "36a4b3fc-57c7-4ee1-888d-66b01feec1ff",
              "title": "/GET tours",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\tours.js",
              "file": "\\test\\testAdmin\\tours.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET all the tours",
                  "fullTitle": "*********** TOURS_ADMIN *********** /GET tours it should GET all the tours",
                  "timedOut": false,
                  "duration": 350,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/tours`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    const { docs, totalDocs } = body\n    body.should.be.an('object')\n    body.hasNextPage.should.be.a('boolean')\n    body.hasPrevPage.should.be.a('boolean')\n    body.limit.should.be.a('number')\n    body.page.should.be.a('number')\n    body.pagingCounter.should.be.a('number')\n    body.totalPages.should.be.a('number')\n    totalDocs.should.be.a('number').eql(2)\n    docs.should.be.a('array')\n    docs.should.have.lengthOf(2)\n    done()\n  })",
                  "err": {},
                  "uuid": "ff21dd09-e577-4682-929d-d4a4455c770e",
                  "parentUUID": "36a4b3fc-57c7-4ee1-888d-66b01feec1ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET the tours with limit",
                  "fullTitle": "*********** TOURS_ADMIN *********** /GET tours it should GET the tours with limit",
                  "timedOut": false,
                  "duration": 342,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/tours?limit=1`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200)\n    const { body } = res\n    body.should.be.an('object')\n    body.docs.should.be.a('array')\n    body.docs.should.have.lengthOf(1)\n    done()\n  })",
                  "err": {},
                  "uuid": "8af6acd6-9408-41d8-933f-5feac1b04b00",
                  "parentUUID": "36a4b3fc-57c7-4ee1-888d-66b01feec1ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET the tours with slug",
                  "fullTitle": "*********** TOURS_ADMIN *********** /GET tours it should GET the tours with slug",
                  "timedOut": false,
                  "duration": 356,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/tours/tour-one`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.an('object')\n    body.should.be.a('object')\n    body.should.include.keys('_id', 'countries', 'departures', 'itinerary')\n    body.should.have.property('slug').eql('tour-one')\n    body.should.have.property('status').eql('publish')\n    body.should.have.property('departures').be.a('array').length(1)\n    body.should.have.property('itinerary').be.a('array').length(2)\n    done()\n  })",
                  "err": {},
                  "uuid": "846b6983-2238-4630-b43a-28a12f67b478",
                  "parentUUID": "36a4b3fc-57c7-4ee1-888d-66b01feec1ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET number tours all continents",
                  "fullTitle": "*********** TOURS_ADMIN *********** /GET tours it should GET number tours all continents",
                  "timedOut": false,
                  "duration": 88,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/tours/allContinents`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.docs.should.be.an('Array').length(5)\n    done()\n  })",
                  "err": {},
                  "uuid": "3eb75dab-5f21-425b-b852-eeef67f2b316",
                  "parentUUID": "36a4b3fc-57c7-4ee1-888d-66b01feec1ff",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ff21dd09-e577-4682-929d-d4a4455c770e",
                "8af6acd6-9408-41d8-933f-5feac1b04b00",
                "846b6983-2238-4630-b43a-28a12f67b478",
                "3eb75dab-5f21-425b-b852-eeef67f2b316"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1136,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "8d447409-f371-419e-9dde-793c8aacd6a9",
              "title": "/GET/:id tour",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\tours.js",
              "file": "\\test\\testAdmin\\tours.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET a tour by the given id",
                  "fullTitle": "*********** TOURS_ADMIN *********** /GET/:id tour it should GET a tour by the given id",
                  "timedOut": false,
                  "duration": 347,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/tours/5fa181b202945b26c456176a`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((error, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.a('object')\n    body.should.have.property('title')\n    body.should.have.property('_id').eql('5fa181b202945b26c456176a')\n    done()\n  })",
                  "err": {},
                  "uuid": "1b19edb7-6125-4376-8a59-356e137493ad",
                  "parentUUID": "8d447409-f371-419e-9dde-793c8aacd6a9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET a tour by the given slug",
                  "fullTitle": "*********** TOURS_ADMIN *********** /GET/:id tour it should GET a tour by the given slug",
                  "timedOut": false,
                  "duration": 347,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/tours/tour-one`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((error, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.a('object')\n    body.should.have.property('title')\n    body.should.have.property('slug').eql('tour-one')\n    done()\n  })",
                  "err": {},
                  "uuid": "305f6c01-f717-43b8-a43e-dd06be0a4917",
                  "parentUUID": "8d447409-f371-419e-9dde-793c8aacd6a9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1b19edb7-6125-4376-8a59-356e137493ad",
                "305f6c01-f717-43b8-a43e-dd06be0a4917"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 694,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "a39fef6a-7fa5-401c-88a9-7a8599c7071e",
              "title": "/POST tour",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\tours.js",
              "file": "\\test\\testAdmin\\tours.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should NOT POST a tour without tour",
                  "fullTitle": "*********** TOURS_ADMIN *********** /POST tour it should NOT POST a tour without tour",
                  "timedOut": false,
                  "duration": 180,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tour = {}\nchai\n  .request(server)\n  .post(`${url}/tours`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(tour)\n  .end((err, res) => {\n    res.should.have.status(422)\n    res.body.should.be.a('object')\n    res.body.should.have.property('errors')\n    done()\n  })",
                  "err": {},
                  "uuid": "970f8e7d-e79a-493d-be36-f83439872b66",
                  "parentUUID": "a39fef6a-7fa5-401c-88a9-7a8599c7071e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should POST a tour ",
                  "fullTitle": "*********** TOURS_ADMIN *********** /POST tour it should POST a tour ",
                  "timedOut": false,
                  "duration": 383,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tour = {\n  title,\n  subTitle,\n  description,\n  countries: faker.random.number(),\n  cities: faker.random.number(),\n  duration: faker.random.number(),\n  route,\n  video: 'https://hello.io'\n}\nchai\n  .request(server)\n  .post(`${url}/tours`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(tour)\n  .end((err, res) => {\n    res.should.have.status(201)\n    res.body.should.be.a('object')\n    res.body.should.include.keys('_id')\n    res.body.should.have.property('title').eql(title)\n    createdID.push(res.body._id)\n    done()\n  })",
                  "err": {},
                  "uuid": "6f7ce3af-679f-41c4-a134-3fb5d13f71ed",
                  "parentUUID": "a39fef6a-7fa5-401c-88a9-7a8599c7071e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT POST a tour that already exists",
                  "fullTitle": "*********** TOURS_ADMIN *********** /POST tour it should NOT POST a tour that already exists",
                  "timedOut": false,
                  "duration": 178,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tour = {\n  title\n}\nchai\n  .request(server)\n  .post(`${url}/tours`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(tour)\n  .end((err, res) => {\n    res.should.have.status(422)\n    res.body.should.be.a('object')\n    res.body.should.have.property('errors')\n    done()\n  })",
                  "err": {},
                  "uuid": "f4b3d49d-7e2f-45f8-a021-804568c91594",
                  "parentUUID": "a39fef6a-7fa5-401c-88a9-7a8599c7071e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "970f8e7d-e79a-493d-be36-f83439872b66",
                "6f7ce3af-679f-41c4-a134-3fb5d13f71ed",
                "f4b3d49d-7e2f-45f8-a021-804568c91594"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 741,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "132a1257-4efd-4d24-a0e3-0d6c2b9e34e6",
              "title": "/PATCH/:id tour",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\tours.js",
              "file": "\\test\\testAdmin\\tours.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should UPDATE a tour given the id",
                  "fullTitle": "*********** TOURS_ADMIN *********** /PATCH/:id tour it should UPDATE a tour given the id",
                  "timedOut": false,
                  "duration": 282,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nchai\n  .request(server)\n  .patch(`${url}/tours/${id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    title: newtour,\n    subTitle: faker.random.words(),\n    description: faker.random.words(),\n    route: faker.random.words(),\n    video: 'https://hello.io'\n  })\n  .end((error, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.a('object')\n    body.should.have.property('_id').eql(id)\n    body.should.have.property('title').eql(newtour)\n    createdID.push(res.body._id)\n    done()\n  })",
                  "err": {},
                  "uuid": "edb3b933-1277-4a71-bcfc-c18e7bf012ae",
                  "parentUUID": "132a1257-4efd-4d24-a0e3-0d6c2b9e34e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it NOT should UPDATE a tour unauthorized",
                  "fullTitle": "*********** TOURS_ADMIN *********** /PATCH/:id tour it NOT should UPDATE a tour unauthorized",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nchai\n  .request(server)\n  .patch(`${url}/tours/${id}`)\n  .send({\n    title: newtour\n  })\n  .end((error, res) => {\n    res.should.have.status(401)\n    res.body.should.be.a('object')\n    done()\n  })",
                  "err": {},
                  "uuid": "ed4aab60-9f10-4dc1-9eb1-3a194ca19d3b",
                  "parentUUID": "132a1257-4efd-4d24-a0e3-0d6c2b9e34e6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "edb3b933-1277-4a71-bcfc-c18e7bf012ae",
                "ed4aab60-9f10-4dc1-9eb1-3a194ca19d3b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 286,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "c36568c1-5d82-41f1-a399-e5c3a1ac8cc6",
              "title": "/DELETE/:id tour",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\tours.js",
              "file": "\\test\\testAdmin\\tours.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should DELETE a tour given the id",
                  "fullTitle": "*********** TOURS_ADMIN *********** /DELETE/:id tour it should DELETE a tour given the id",
                  "timedOut": false,
                  "duration": 666,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tour = {\n  title: faker.random.words(),\n  subTitle,\n  description,\n  countries: faker.random.number(),\n  cities: faker.random.number(),\n  duration: faker.random.number(),\n  route,\n  video: 'https://hello.io'\n}\nchai\n  .request(server)\n  .post(`${url}/tours`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(tour)\n  .end((err, res) => {\n    res.should.have.status(201)\n    res.body.should.be.a('object')\n    res.body.should.include.keys(\n      '_id',\n      'title',\n      'subTitle',\n      'description',\n      'route'\n    )\n    chai\n      .request(server)\n      .delete(`${url}/tours/${res.body._id}`)\n      .set('Authorization', `Bearer ${token}`)\n      .end((error, result) => {\n        result.should.have.status(200)\n        result.body.should.be.a('object')\n        result.body.should.have.property('msg').eql('DELETED')\n        done()\n      })\n  })",
                  "err": {},
                  "uuid": "1303f41b-6dc1-4ead-b277-a089a16db4d5",
                  "parentUUID": "c36568c1-5d82-41f1-a399-e5c3a1ac8cc6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1303f41b-6dc1-4ead-b277-a089a16db4d5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 666,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "7ee42f6a-de31-4065-8ee7-e6c28125965e",
          "title": "*********** USERS_ADMIN ***********",
          "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\users.js",
          "file": "\\test\\testAdmin\\users.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"*********** USERS_ADMIN ***********\"",
              "fullTitle": "*********** USERS_ADMIN *********** \"after all\" hook in \"*********** USERS_ADMIN ***********\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "createdID.forEach((id) => {\n  User.findByIdAndRemove(id, (err) => {\n    if (err) {\n      // console.log(err)\n    }\n  })\n})",
              "err": {},
              "uuid": "03432764-f0fb-4d99-b21e-174fdc4dc56d",
              "parentUUID": "7ee42f6a-de31-4065-8ee7-e6c28125965e",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "f4711ca3-7db7-4244-908a-7f3a38758cd4",
              "title": "/POST login",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\users.js",
              "file": "\\test\\testAdmin\\users.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET token user",
                  "fullTitle": "*********** USERS_ADMIN *********** /POST login it should GET token user",
                  "timedOut": false,
                  "duration": 257,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/login`)\n  .send(loginDetails)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('object')\n    res.body.should.include.keys('accessToken', 'user')\n    const currentAccessToken = res.body.accessToken\n    accessToken = currentAccessToken\n    done()\n  })",
                  "err": {},
                  "uuid": "8c026c9b-646a-486e-9b4c-6c90e8ec6c16",
                  "parentUUID": "f4711ca3-7db7-4244-908a-7f3a38758cd4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET a fresh token",
                  "fullTitle": "*********** USERS_ADMIN *********** /POST login it should GET a fresh token",
                  "timedOut": false,
                  "duration": 344,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/exchange`)\n  .send({\n    accessToken\n  })\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.an('object')\n    body.should.include.keys('token', 'user')\n    const currentToken = body.token\n    token = currentToken\n    done()\n  })",
                  "err": {},
                  "uuid": "5e3a8bd0-971e-4e19-bfc1-3a600055fd83",
                  "parentUUID": "f4711ca3-7db7-4244-908a-7f3a38758cd4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8c026c9b-646a-486e-9b4c-6c90e8ec6c16",
                "5e3a8bd0-971e-4e19-bfc1-3a600055fd83"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 601,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "b806d0dc-6505-4b24-b90a-66c3dbc4d269",
              "title": "/GET users",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\users.js",
              "file": "\\test\\testAdmin\\users.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should NOT be able to consume the route since no token was sent",
                  "fullTitle": "*********** USERS_ADMIN *********** /GET users it should NOT be able to consume the route since no token was sent",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/users`)\n  .end((err, res) => {\n    res.should.have.status(401)\n    done()\n  })",
                  "err": {},
                  "uuid": "b18a8d44-77fc-4850-a26b-76a6abfd81c0",
                  "parentUUID": "b806d0dc-6505-4b24-b90a-66c3dbc4d269",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET all the users",
                  "fullTitle": "*********** USERS_ADMIN *********** /GET users it should GET all the users",
                  "timedOut": false,
                  "duration": 265,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/users`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('object')\n    res.body.docs.should.be.a('array')\n    done()\n  })",
                  "err": {},
                  "uuid": "6df79b6e-b96e-4ab9-a16f-2bb5f78ead31",
                  "parentUUID": "b806d0dc-6505-4b24-b90a-66c3dbc4d269",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET the users with filters",
                  "fullTitle": "*********** USERS_ADMIN *********** /GET users it should GET the users with filters",
                  "timedOut": false,
                  "duration": 254,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/users?filter=admin@admin.com&fields=email`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200)\n    const { body } = res\n    body.should.be.an('object')\n    body.docs.should.be.a('array')\n    body.docs.should.have.lengthOf(1)\n    const { docs } = body\n    const first = _.head(docs)\n    first.should.have.property('email').eql('admin@admin.com')\n    done()\n  })",
                  "err": {},
                  "uuid": "0230d82d-7c2d-44dc-b44f-8aa0a289fe3d",
                  "parentUUID": "b806d0dc-6505-4b24-b90a-66c3dbc4d269",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET public profile",
                  "fullTitle": "*********** USERS_ADMIN *********** /GET users it should GET public profile",
                  "timedOut": false,
                  "duration": 174,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/users/public/${publicId}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.an('object')\n    body.should.have.property('id').eql(publicId)\n    done()\n  })",
                  "err": {},
                  "uuid": "99cc5e4f-d582-42d5-bcc9-ba5522a6afb0",
                  "parentUUID": "b806d0dc-6505-4b24-b90a-66c3dbc4d269",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b18a8d44-77fc-4850-a26b-76a6abfd81c0",
                "6df79b6e-b96e-4ab9-a16f-2bb5f78ead31",
                "0230d82d-7c2d-44dc-b44f-8aa0a289fe3d",
                "99cc5e4f-d582-42d5-bcc9-ba5522a6afb0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 695,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "3cd20e33-6a7b-4c04-8b08-003e5b491e82",
              "title": "/POST user",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\users.js",
              "file": "\\test\\testAdmin\\users.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should NOT POST a user without name",
                  "fullTitle": "*********** USERS_ADMIN *********** /POST user it should NOT POST a user without name",
                  "timedOut": false,
                  "duration": 176,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {}\nchai\n  .request(server)\n  .post(`${url}/users`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(user)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(422)\n    body.should.be.a('object')\n    body.should.have.property('errors')\n    done()\n  })",
                  "err": {},
                  "uuid": "ab6224ea-07e5-46a4-928e-67d05732609e",
                  "parentUUID": "3cd20e33-6a7b-4c04-8b08-003e5b491e82",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should POST a user ",
                  "fullTitle": "*********** USERS_ADMIN *********** /POST user it should POST a user ",
                  "timedOut": false,
                  "duration": 984,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n  name: faker.random.words(),\n  surname: faker.random.words(),\n  document: faker.random.words(),\n  status: 'enabled',\n  email,\n  password: faker.random.words(),\n  role: 'user',\n  phone: faker.random.words(),\n  description: faker.random.words(),\n  gender: 'O',\n  birthDate: '01-01-1996'\n}\nchai\n  .request(server)\n  .post(`${url}/users`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(user)\n  .end((err, res) => {\n    res.should.have.status(200)\n    const { body } = res\n    body.should.be.a('object')\n    body.should.include.keys('_id', 'name', 'email', 'verification')\n    const tokenpost = body.accessToken\n    chai\n      .request(server)\n      .post(`${url}/exchange`)\n      .send({\n        accessToken: tokenpost\n      })\n      .end((error, response) => {\n        response.should.have.status(200)\n        response.body.should.be.an('object')\n        response.body.should.include.keys('token', 'user')\n        createdID.push(response.body.user._id)\n        done()\n      })\n  })",
                  "err": {},
                  "uuid": "cf7b05fc-f2c7-45ab-94d8-a146d3a4dabe",
                  "parentUUID": "3cd20e33-6a7b-4c04-8b08-003e5b491e82",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ab6224ea-07e5-46a4-928e-67d05732609e",
                "cf7b05fc-f2c7-45ab-94d8-a146d3a4dabe"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1160,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "88d060c5-5c26-466e-9f22-c513670f2451",
              "title": "/GET/:id user",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\users.js",
              "file": "\\test\\testAdmin\\users.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET a user by the given id",
                  "fullTitle": "*********** USERS_ADMIN *********** /GET/:id user it should GET a user by the given id",
                  "timedOut": false,
                  "duration": 357,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nchai\n  .request(server)\n  .get(`${url}/users/${id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((error, res) => {\n    res.should.have.status(200)\n    res.body.should.be.a('object')\n    res.body.should.have.property('name')\n    res.body.should.have.property('_id').eql(id)\n    done()\n  })",
                  "err": {},
                  "uuid": "2fd723e4-b3e4-4298-a7fd-0a641bad8e72",
                  "parentUUID": "88d060c5-5c26-466e-9f22-c513670f2451",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2fd723e4-b3e4-4298-a7fd-0a641bad8e72"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 357,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "c91eb4ef-b47e-4fb5-bfd3-158fd12ef372",
              "title": "/GET/PAYMENTS:id user",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\users.js",
              "file": "\\test\\testAdmin\\users.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET all transaction in wallet",
                  "fullTitle": "*********** USERS_ADMIN *********** /GET/PAYMENTS:id user it should GET all transaction in wallet",
                  "timedOut": false,
                  "duration": 353,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nchai\n  .request(server)\n  .get(`${url}/users/payment/${id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((error, res) => {\n    const { body } = res\n    const { docs } = body\n    res.should.have.status(200)\n    body.should.be.a('object')\n    docs.should.be.a('array').length(0)\n    body.should.have.property('total').eql(0)\n    body.should.have.property('total').eql(0)\n    done()\n  })",
                  "err": {},
                  "uuid": "1a748885-213b-4954-8749-f564d84a96ac",
                  "parentUUID": "c91eb4ef-b47e-4fb5-bfd3-158fd12ef372",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1a748885-213b-4954-8749-f564d84a96ac"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 353,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "debb2420-0469-4ed1-88a4-644dec7eb010",
              "title": "/PATCH/:id user",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testAdmin\\users.js",
              "file": "\\test\\testAdmin\\users.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should UPDATE a user given the id",
                  "fullTitle": "*********** USERS_ADMIN *********** /PATCH/:id user it should UPDATE a user given the id",
                  "timedOut": false,
                  "duration": 458,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nconst user = {\n  name: 'JS123456',\n  email: 'emailthatalreadyexists@email.com',\n  urlTwitter: faker.internet.url(),\n  urlGitHub: faker.internet.url(),\n  phone: faker.phone.phoneNumber(),\n  city: faker.random.words(),\n  country: faker.random.words(),\n  avatar: faker.internet.url(),\n  video: faker.internet.url(),\n  birthDate: '01-01-2001'\n}\nchai\n  .request(server)\n  .patch(`${url}/users/${id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(user)\n  .end((error, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.a('object')\n    body.should.have.property('_id').eql(id)\n    body.should.have.property('name').eql('JS123456')\n    body.should.have.property('email').eql('emailthatalreadyexists@email.com')\n    createdID.push(res.body._id)\n    done()\n  })",
                  "err": {},
                  "uuid": "0c336246-0691-4915-9e53-f466af2664d0",
                  "parentUUID": "debb2420-0469-4ed1-88a4-644dec7eb010",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT UPDATE a user with email that already exists",
                  "fullTitle": "*********** USERS_ADMIN *********** /PATCH/:id user it should NOT UPDATE a user with email that already exists",
                  "timedOut": false,
                  "duration": 263,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nconst user = {\n  name: faker.random.words(),\n  email: 'admin@admin.com',\n  role: 'admin'\n}\nchai\n  .request(server)\n  .patch(`${url}/users/${id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(user)\n  .end((err, res) => {\n    res.should.have.status(422)\n    res.body.should.be.a('object')\n    res.body.should.have.property('errors')\n    done()\n  })",
                  "err": {},
                  "uuid": "169aefa9-e9bc-4d4f-9d4b-7a1042d486e1",
                  "parentUUID": "debb2420-0469-4ed1-88a4-644dec7eb010",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0c336246-0691-4915-9e53-f466af2664d0",
                "169aefa9-e9bc-4d4f-9d4b-7a1042d486e1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 721,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "6554d753-df1e-4441-9f16-7f544628aad0",
          "title": "*********** AUTH_USER ***********",
          "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\auth.js",
          "file": "\\test\\testApi\\auth.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"*********** AUTH_USER ***********\"",
              "fullTitle": "*********** AUTH_USER *********** \"after all\" hook in \"*********** AUTH_USER ***********\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "createdID.forEach((id) => {\n  User.findByIdAndRemove(id, (err) => {\n    if (err) {\n      // console.log(err)\n    }\n  })\n})",
              "err": {},
              "uuid": "923d74bf-7bd3-4bcf-9428-2cf8535a5ca2",
              "parentUUID": "6554d753-df1e-4441-9f16-7f544628aad0",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "5690e81e-3bd8-4585-ba71-e074495adaf0",
              "title": "/GET /",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\auth.js",
              "file": "\\test\\testApi\\auth.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET home user url",
                  "fullTitle": "*********** AUTH_USER *********** /GET / it should GET home user url",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/`)\n  .end((err, res) => {\n    res.should.have.status(200)\n    done()\n  })",
                  "err": {},
                  "uuid": "1e1260f2-62c6-4655-ada2-d7c1237c4448",
                  "parentUUID": "5690e81e-3bd8-4585-ba71-e074495adaf0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1e1260f2-62c6-4655-ada2-d7c1237c4448"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "b117a80b-eef5-402a-93f2-483aa42616ff",
              "title": "/GET /404url",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\auth.js",
              "file": "\\test\\testApi\\auth.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET 404 url",
                  "fullTitle": "*********** AUTH_USER *********** /GET /404url it should GET 404 url",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get('/404url')\n  .end((err, res) => {\n    res.should.have.status(404)\n    res.body.should.be.an('object')\n    done()\n  })",
                  "err": {},
                  "uuid": "989b0acd-d0c3-48c9-aea9-219babcac154",
                  "parentUUID": "b117a80b-eef5-402a-93f2-483aa42616ff",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "989b0acd-d0c3-48c9-aea9-219babcac154"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "5faa01ef-047b-4cd3-a8d5-99c0a308c30e",
              "title": "/POST login",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\auth.js",
              "file": "\\test\\testApi\\auth.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "error login",
                  "fullTitle": "*********** AUTH_USER *********** /POST login error login",
                  "timedOut": false,
                  "duration": 176,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/login`)\n  .send({ email: 'admin@admin.com', password: 'error password' })\n  .end((err, res) => {\n    res.should.have.status(422)\n    res.body.should.have.property('errors').eql({ msg: { msg: 'WRONG_PASSWORD' } })\n    res.body.should.be.an('object')\n    done()\n  })",
                  "err": {},
                  "uuid": "355930ce-8116-43ae-aae5-5c1e8ca09e82",
                  "parentUUID": "5faa01ef-047b-4cd3-a8d5-99c0a308c30e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET token",
                  "fullTitle": "*********** AUTH_USER *********** /POST login it should GET token",
                  "timedOut": false,
                  "duration": 291,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/login`)\n  .send(loginDetails)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.an('object')\n    body.should.include.keys('accessToken', 'user')\n    token = res.body.accessToken\n    done()\n  })",
                  "err": {},
                  "uuid": "cda0ffed-75f3-4e27-bf2b-b5a9cb6edf24",
                  "parentUUID": "5faa01ef-047b-4cd3-a8d5-99c0a308c30e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "355930ce-8116-43ae-aae5-5c1e8ca09e82",
                "cda0ffed-75f3-4e27-bf2b-b5a9cb6edf24"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 467,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "d4cbfaba-8370-49dd-bd75-21f2cc53c195",
              "title": "/POST register",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\auth.js",
              "file": "\\test\\testApi\\auth.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should POST register",
                  "fullTitle": "*********** AUTH_USER *********** /POST register it should POST register",
                  "timedOut": false,
                  "duration": 100,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n  name: faker.random.words(),\n  surname: faker.random.words(),\n  email,\n  password: faker.random.words()\n}\nchai\n  .request(server)\n  .post(`${url}/register`)\n  .send(user)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.an('object')\n    body.should.include.keys('accessToken', 'user')\n    body.user.should.have.property('email').eql(email.toLowerCase())\n    createdID.push(res.body.user._id)\n    done()\n  })",
                  "err": {},
                  "uuid": "308a3fbe-e13a-4df4-9998-c8b24a77da68",
                  "parentUUID": "d4cbfaba-8370-49dd-bd75-21f2cc53c195",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT POST a register empty values",
                  "fullTitle": "*********** AUTH_USER *********** /POST register it should NOT POST a register empty values",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n  surname: faker.random.words()\n}\nchai\n  .request(server)\n  .post(`${url}/register`)\n  .send(user)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(422)\n    body.should.be.a('object')\n    body.should.have.property('errors')\n    const { errors } = body\n    errors.should.have.property('msg').be.a('array')\n    done()\n  })",
                  "err": {},
                  "uuid": "045b901d-bc0d-41d4-ba97-7026514a4e66",
                  "parentUUID": "d4cbfaba-8370-49dd-bd75-21f2cc53c195",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT POST a register if email already exists",
                  "fullTitle": "*********** AUTH_USER *********** /POST register it should NOT POST a register if email already exists",
                  "timedOut": false,
                  "duration": 91,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n  name: faker.random.words(),\n  surname: faker.random.words(),\n  email,\n  password: faker.random.words()\n}\nchai\n  .request(server)\n  .post(`${url}/register`)\n  .send(user)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(422)\n    body.should.be.a('object')\n    body.should.have.property('errors')\n    const { msg } = body.errors\n    const message = `E11000 duplicate key error collection: oauth_service.users index: email_1 dup key: { email: \"${email.toLowerCase()}\" }`\n    msg.should.have.property('msg').eql(message)\n    done()\n  })",
                  "err": {},
                  "uuid": "32b62732-f161-47c7-ab9b-0fdecef8b820",
                  "parentUUID": "d4cbfaba-8370-49dd-bd75-21f2cc53c195",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "308a3fbe-e13a-4df4-9998-c8b24a77da68",
                "045b901d-bc0d-41d4-ba97-7026514a4e66",
                "32b62732-f161-47c7-ab9b-0fdecef8b820"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 194,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "a91cd0a6-dc73-49ff-81b0-a688a69263ce",
              "title": "/POST forgot",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\auth.js",
              "file": "\\test\\testApi\\auth.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should Error  POST forgot",
                  "fullTitle": "*********** AUTH_USER *********** /POST forgot it should Error  POST forgot",
                  "timedOut": false,
                  "duration": 89,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/forgot`)\n  .send({\n    email: faker.internet.email()\n  })\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(422)\n    body.should.be.an('object')\n    body.should.have.property('errors')\n    body.errors.should.have.property('msg').eql({ msg: 'USER_DOES_NOT_EXIST' })\n    verificationForgot = res.body.verification\n    done()\n  })",
                  "err": {},
                  "uuid": "b349ea08-d22a-4736-a301-45cf53d7dfcf",
                  "parentUUID": "a91cd0a6-dc73-49ff-81b0-a688a69263ce",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should POST forgot",
                  "fullTitle": "*********** AUTH_USER *********** /POST forgot it should POST forgot",
                  "timedOut": false,
                  "duration": 178,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const object = {\n  email\n}\nchai\n  .request(server)\n  .post(`${url}/forgot`)\n  .send(object)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('object')\n    res.body.should.include.keys('msg', 'verification')\n    verificationForgot = res.body.verification\n    done()\n  })",
                  "err": {},
                  "uuid": "89f414f1-0617-4e8f-ad85-f10ec7678b5e",
                  "parentUUID": "a91cd0a6-dc73-49ff-81b0-a688a69263ce",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b349ea08-d22a-4736-a301-45cf53d7dfcf",
                "89f414f1-0617-4e8f-ad85-f10ec7678b5e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 267,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "7f518662-ae6d-4bd3-b49e-99dd026ff7f2",
              "title": "/POST reset",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\auth.js",
              "file": "\\test\\testApi\\auth.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should POST reset",
                  "fullTitle": "*********** AUTH_USER *********** /POST reset it should POST reset",
                  "timedOut": false,
                  "duration": 344,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/reset`)\n  .send({\n    id: verificationForgot,\n    password: '12345'\n  })\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.a('object')\n    res.body.should.have.property('msg').eql('PASSWORD_CHANGED')\n    done()\n  })",
                  "err": {},
                  "uuid": "27cd6061-5655-442d-8917-40f6787960b7",
                  "parentUUID": "7f518662-ae6d-4bd3-b49e-99dd026ff7f2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "27cd6061-5655-442d-8917-40f6787960b7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 344,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "362bc4d4-ab02-4c61-84c8-cab6c5e4484f",
              "title": "/GET token",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\auth.js",
              "file": "\\test\\testApi\\auth.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should NOT be able to consume the route since no token was sent",
                  "fullTitle": "*********** AUTH_USER *********** /GET token it should NOT be able to consume the route since no token was sent",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/token`)\n  .end((err, res) => {\n    res.should.have.status(401)\n    done()\n  })",
                  "err": {},
                  "uuid": "e79eaf81-5301-4ab7-a1b4-f3360ab07df3",
                  "parentUUID": "362bc4d4-ab02-4c61-84c8-cab6c5e4484f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET a fresh token",
                  "fullTitle": "*********** AUTH_USER *********** /GET token it should GET a fresh token",
                  "timedOut": false,
                  "duration": 341,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/exchange`)\n  .send({\n    accessToken: token\n  })\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.an('object')\n    body.should.include.keys('token', 'user')\n    done()\n  })",
                  "err": {},
                  "uuid": "9676ee5f-bb27-4045-9285-ab86bee1c104",
                  "parentUUID": "362bc4d4-ab02-4c61-84c8-cab6c5e4484f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e79eaf81-5301-4ab7-a1b4-f3360ab07df3",
                "9676ee5f-bb27-4045-9285-ab86bee1c104"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 344,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "abbd64c5-d9db-49b0-9099-553d78157d1b",
          "title": "*********** BLOGS_USER ***********",
          "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\blogs.js",
          "file": "\\test\\testApi\\blogs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8cde832f-de26-4614-ac3c-37e1782c1f75",
              "title": "/POST login",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\blogs.js",
              "file": "\\test\\testApi\\blogs.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET token user",
                  "fullTitle": "*********** BLOGS_USER *********** /POST login it should GET token user",
                  "timedOut": false,
                  "duration": 272,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/login`)\n  .send(loginDetails)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('object')\n    res.body.should.include.keys('accessToken', 'user')\n    done()\n  })",
                  "err": {},
                  "uuid": "cb975fa7-9e72-40e2-b9d4-f689c6fbc28f",
                  "parentUUID": "8cde832f-de26-4614-ac3c-37e1782c1f75",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cb975fa7-9e72-40e2-b9d4-f689c6fbc28f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 272,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "df7ef7af-ab38-42c1-b0da-d927e053ecab",
              "title": "/GET blogs",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\blogs.js",
              "file": "\\test\\testApi\\blogs.js",
              "beforeHooks": [],
              "afterHooks": [
                {
                  "title": "\"after all\" hook in \"/GET blogs\"",
                  "fullTitle": "*********** BLOGS_USER *********** /GET blogs \"after all\" hook in \"/GET blogs\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "createdID.forEach((idBlog) => {\n  Blog.findByIdAndRemove(idBlog, (err) => {\n    if (err) {\n      // console.log(err)\n    }\n  })\n})",
                  "err": {},
                  "uuid": "dedc536e-8762-489a-94da-108bb6ba65e0",
                  "parentUUID": "df7ef7af-ab38-42c1-b0da-d927e053ecab",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "it should GET all the blogs",
                  "fullTitle": "*********** BLOGS_USER *********** /GET blogs it should GET all the blogs",
                  "timedOut": false,
                  "duration": 90,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/blogs`)\n  .end((err, res) => {\n    const { body } = res\n    const { docs } = body\n    const blog = _.head(docs)\n    res.should.have.status(200)\n    body.should.be.an('object')\n    docs.should.have.lengthOf(1)\n    docs.should.be.a('array')\n    id = blog._id\n    slugBlog = blog.slug\n    blog.should.include.keys('_id', 'title', 'description')\n    body.should.be.an('object')\n    done()\n  })",
                  "err": {},
                  "uuid": "a39cc8a7-5665-4e2b-9aef-81d78add61af",
                  "parentUUID": "df7ef7af-ab38-42c1-b0da-d927e053ecab",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "7bbd074f-4568-458a-b159-36ad1fea8750",
                  "title": "/GET/:id blogs",
                  "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\blogs.js",
                  "file": "\\test\\testApi\\blogs.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "it should not GET a blogs by error id",
                      "fullTitle": "*********** BLOGS_USER *********** /GET blogs /GET/:id blogs it should not GET a blogs by error id",
                      "timedOut": false,
                      "duration": 85,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "chai\n  .request(server)\n  .get(`${url}/blogs/id_error`)\n  .end((error, res) => {\n    res.should.have.status(404)\n    const { body } = res\n    body.should.be.a('object')\n    body.should.have.property('errors')\n    body.should.have.property('errors').eql({ msg: 'NOT_FOUND' })\n    done()\n  })",
                      "err": {},
                      "uuid": "b29e8748-4135-4f2c-a956-67ba836dab00",
                      "parentUUID": "7bbd074f-4568-458a-b159-36ad1fea8750",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "it should GET a blogs by the given id",
                      "fullTitle": "*********** BLOGS_USER *********** /GET blogs /GET/:id blogs it should GET a blogs by the given id",
                      "timedOut": false,
                      "duration": 86,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "chai\n  .request(server)\n  .get(`${url}/blogs/${id}`)\n  .end((error, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.a('object')\n    body.should.include.keys('_id', 'title', 'description')\n    body.should.have.property('_id').eql(`${id}`)\n    done()\n  })",
                      "err": {},
                      "uuid": "c937b7d0-df82-4d31-91bc-adb953d0a4cc",
                      "parentUUID": "7bbd074f-4568-458a-b159-36ad1fea8750",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "it should GET a blogs by the given slug",
                      "fullTitle": "*********** BLOGS_USER *********** /GET blogs /GET/:id blogs it should GET a blogs by the given slug",
                      "timedOut": false,
                      "duration": 83,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "chai\n  .request(server)\n  .get(`${url}/blogs/${slugBlog}`)\n  .end((error, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.a('object')\n    body.should.include.keys('_id', 'title', 'description')\n    body.should.have.property('slug').eql(`${slugBlog}`)\n    done()\n  })",
                      "err": {},
                      "uuid": "908517b7-22d5-46fd-bb3f-fbb590679a78",
                      "parentUUID": "7bbd074f-4568-458a-b159-36ad1fea8750",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b29e8748-4135-4f2c-a956-67ba836dab00",
                    "c937b7d0-df82-4d31-91bc-adb953d0a4cc",
                    "908517b7-22d5-46fd-bb3f-fbb590679a78"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 254,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                }
              ],
              "passes": [
                "a39cc8a7-5665-4e2b-9aef-81d78add61af"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 90,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "96a5f076-e2b2-4598-9f59-f95bfa1c5482",
          "title": "*********** CATEGORIES_USER ***********",
          "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\categories.js",
          "file": "\\test\\testApi\\categories.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"*********** CATEGORIES_USER ***********\"",
              "fullTitle": "*********** CATEGORIES_USER *********** \"after all\" hook in \"*********** CATEGORIES_USER ***********\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "createdID.forEach((idCategory) => {\n  modalCategory.findByIdAndRemove(idCategory, (err) => {\n    if (err) {\n      // console.log(err)\n    }\n  })\n})",
              "err": {},
              "uuid": "0715c2ac-7c82-4c2e-87f1-863fae23de1a",
              "parentUUID": "96a5f076-e2b2-4598-9f59-f95bfa1c5482",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "1a1a9386-79ae-4e16-8eab-e2c22775e270",
              "title": "/POST login",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\categories.js",
              "file": "\\test\\testApi\\categories.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET token user",
                  "fullTitle": "*********** CATEGORIES_USER *********** /POST login it should GET token user",
                  "timedOut": false,
                  "duration": 258,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/login`)\n  .send(loginDetails)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('object')\n    res.body.should.include.keys('accessToken', 'user')\n    done()\n  })",
                  "err": {},
                  "uuid": "3beea2ff-ac09-4857-8c47-5d6480524cae",
                  "parentUUID": "1a1a9386-79ae-4e16-8eab-e2c22775e270",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3beea2ff-ac09-4857-8c47-5d6480524cae"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 258,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "c021172b-7022-4b49-8c47-0cc76ff9db62",
              "title": "/GET categories",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\categories.js",
              "file": "\\test\\testApi\\categories.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET all the categories",
                  "fullTitle": "*********** CATEGORIES_USER *********** /GET categories it should GET all the categories",
                  "timedOut": false,
                  "duration": 84,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/categories`)\n  .end((err, res) => {\n    const { body } = res\n    const { docs } = body\n    const category = _.head(docs)\n    res.should.have.status(200)\n    body.should.be.an('object')\n    docs.should.have.lengthOf(1)\n    id = category._id\n    category.should.include.keys('_id', 'name', 'description')\n    done()\n  })",
                  "err": {},
                  "uuid": "8e50c074-7983-4373-b7cf-400926015f5c",
                  "parentUUID": "c021172b-7022-4b49-8c47-0cc76ff9db62",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT GET the categories with filters",
                  "fullTitle": "*********** CATEGORIES_USER *********** /GET categories it should NOT GET the categories with filters",
                  "timedOut": false,
                  "duration": 85,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/categories?filter=notExist&fields=name`)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('object')\n    const { body } = res\n    const { docs, totalDocs } = body\n    totalDocs.should.be.a('number')\n    body.should.have.property('totalDocs').eql(0)\n    docs.should.have.lengthOf(0)\n    done()\n  })",
                  "err": {},
                  "uuid": "5f9e88db-f9ae-459d-a57e-f161aba2f8e8",
                  "parentUUID": "c021172b-7022-4b49-8c47-0cc76ff9db62",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET the categories with filters",
                  "fullTitle": "*********** CATEGORIES_USER *********** /GET categories it should GET the categories with filters",
                  "timedOut": false,
                  "duration": 87,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/categories?filter=technology&fields=name`)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('object')\n    const { body } = res\n    const { docs } = body\n    const category = _.head(docs)\n    body.should.be.an('object')\n    docs.should.have.lengthOf(1)\n    category.should.include.keys('_id', 'name', 'description')\n    category.should.have.property('name').eql('technology')\n    done()\n  })",
                  "err": {},
                  "uuid": "04bf5a00-0bc6-4ac6-b374-667f4f1db910",
                  "parentUUID": "c021172b-7022-4b49-8c47-0cc76ff9db62",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8e50c074-7983-4373-b7cf-400926015f5c",
                "5f9e88db-f9ae-459d-a57e-f161aba2f8e8",
                "04bf5a00-0bc6-4ac6-b374-667f4f1db910"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 256,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "21c58434-34cb-492a-a39d-f87c9cf3a107",
          "title": "*********** CONTRACTS_USER ***********",
          "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\contracts.js",
          "file": "\\test\\testApi\\contracts.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "15b6ad0b-6f17-48e4-b288-38f7a8dcd1ec",
              "title": "/POST login",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\contracts.js",
              "file": "\\test\\testApi\\contracts.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET token user",
                  "fullTitle": "*********** CONTRACTS_USER *********** /POST login it should GET token user",
                  "timedOut": false,
                  "duration": 258,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/login`)\n  .send(loginDetails)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('object')\n    res.body.should.include.keys('accessToken', 'user')\n    const currentAccessToken = res.body.accessToken\n    accessToken = currentAccessToken\n    done()\n  })",
                  "err": {},
                  "uuid": "9f4bbcdb-1dbf-4d88-8e8f-5843117acaf2",
                  "parentUUID": "15b6ad0b-6f17-48e4-b288-38f7a8dcd1ec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET a fresh token",
                  "fullTitle": "*********** CONTRACTS_USER *********** /POST login it should GET a fresh token",
                  "timedOut": false,
                  "duration": 343,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/exchange`)\n  .send({\n    accessToken\n  })\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.an('object')\n    body.should.include.keys('token', 'user')\n    const currentToken = body.token\n    token = currentToken\n    done()\n  })",
                  "err": {},
                  "uuid": "5e0bcb4c-8c72-4fd0-84f4-8cf8ebcd564f",
                  "parentUUID": "15b6ad0b-6f17-48e4-b288-38f7a8dcd1ec",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9f4bbcdb-1dbf-4d88-8e8f-5843117acaf2",
                "5e0bcb4c-8c72-4fd0-84f4-8cf8ebcd564f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 601,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "d677b80a-2f0a-4924-8118-0c8d49c452b2",
              "title": "/POST contracts",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\contracts.js",
              "file": "\\test\\testApi\\contracts.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should NOT POST a contract without contracts",
                  "fullTitle": "*********** CONTRACTS_USER *********** /POST contracts it should NOT POST a contract without contracts",
                  "timedOut": false,
                  "duration": 93,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const contractOne = {}\nchai\n  .request(server)\n  .post(`${url}/contracts`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(contractOne)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(422)\n    body.should.be.a('object')\n    body.should.have.property('errors')\n    const { msg } = body.errors\n    msg.should.be.a('Array')\n    done()\n  })",
                  "err": {},
                  "uuid": "bb65337e-9a3b-4379-b62a-0d1c0f76ddad",
                  "parentUUID": "d677b80a-2f0a-4924-8118-0c8d49c452b2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should POST a contracts 100 percentage",
                  "fullTitle": "*********** CONTRACTS_USER *********** /POST contracts it should POST a contracts 100 percentage",
                  "timedOut": false,
                  "duration": 535,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/contracts`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(contractData)\n  .end((err, res) => {\n    res.should.have.status(200)\n    const { body } = res\n    body.should.be.a('object')\n    body.should.have.property('percentage').eql(contractData.payAmount)\n    body.should.have.property('idOperation').eql(contractData.id)\n    done()\n  })",
                  "err": {},
                  "uuid": "2e82465e-1132-4e5d-99e1-078fde5b25e5",
                  "parentUUID": "d677b80a-2f0a-4924-8118-0c8d49c452b2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should POST a contracts other percentage",
                  "fullTitle": "*********** CONTRACTS_USER *********** /POST contracts it should POST a contracts other percentage",
                  "timedOut": false,
                  "duration": 528,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "contractData.payAmount = 10\nchai\n  .request(server)\n  .post(`${url}/contracts`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(contractData)\n  .end((err, res) => {\n    res.should.have.status(200)\n    const { body } = res\n    body.should.be.a('object')\n    body.should.have.property('percentage').eql(contractData.payAmount)\n    body.should.have.property('idOperation').eql(contractData.id)\n    done()\n  })",
                  "err": {},
                  "uuid": "22a6466d-5630-4370-8e8f-54bef051946d",
                  "parentUUID": "d677b80a-2f0a-4924-8118-0c8d49c452b2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT POST a contracts are emply fields",
                  "fullTitle": "*********** CONTRACTS_USER *********** /POST contracts it should NOT POST a contracts are emply fields",
                  "timedOut": false,
                  "duration": 100,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const contractTwo = {\n  id: '5fa1831e02945b26c4561774',\n  payAmount: 100\n}\nchai\n  .request(server)\n  .post(`${url}/contracts/`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(contractTwo)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(422)\n    body.should.be.a('object')\n    body.should.have.property('errors')\n    const { msg } = body.errors\n    msg.should.be.a('Array')\n    msg.should.have.length(2)\n    const first = _.head(msg)\n    first.should.include.keys('msg', 'param', 'location')\n    done()\n  })",
                  "err": {},
                  "uuid": "0bad04ef-1c04-43ca-9e04-436083c4e32b",
                  "parentUUID": "d677b80a-2f0a-4924-8118-0c8d49c452b2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bb65337e-9a3b-4379-b62a-0d1c0f76ddad",
                "2e82465e-1132-4e5d-99e1-078fde5b25e5",
                "22a6466d-5630-4370-8e8f-54bef051946d",
                "0bad04ef-1c04-43ca-9e04-436083c4e32b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1256,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "9d1035da-8a7f-4c4f-bb57-e9449504bc53",
          "title": "*********** CONVERSATIONS_USER ***********",
          "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\conversations.js",
          "file": "\\test\\testApi\\conversations.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"*********** CONVERSATIONS_USER ***********\"",
              "fullTitle": "*********** CONVERSATIONS_USER *********** \"after all\" hook in \"*********** CONVERSATIONS_USER ***********\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "createdID.forEach((id) => {\n  conversation.findByIdAndRemove(id, (err) => {\n    if (err) {\n      // console.log(err)\n    }\n  })\n})",
              "err": {},
              "uuid": "4754d591-1206-4be8-87f6-58dac0eabcbc",
              "parentUUID": "9d1035da-8a7f-4c4f-bb57-e9449504bc53",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "d755997c-2301-4939-a159-c7ce79bc2fd1",
              "title": "/POST login",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\conversations.js",
              "file": "\\test\\testApi\\conversations.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET token user",
                  "fullTitle": "*********** CONVERSATIONS_USER *********** /POST login it should GET token user",
                  "timedOut": false,
                  "duration": 268,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/login`)\n  .send(loginDetails)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('object')\n    res.body.should.include.keys('accessToken', 'user')\n    const currentAccessToken = res.body.accessToken\n    accessToken = currentAccessToken\n    done()\n  })",
                  "err": {},
                  "uuid": "7f36b1b8-3eaa-4f62-91ee-378accb8f726",
                  "parentUUID": "d755997c-2301-4939-a159-c7ce79bc2fd1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET a fresh token",
                  "fullTitle": "*********** CONVERSATIONS_USER *********** /POST login it should GET a fresh token",
                  "timedOut": false,
                  "duration": 348,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/exchange`)\n  .send({\n    accessToken\n  })\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.an('object')\n    body.should.include.keys('token', 'user')\n    const currentToken = body.token\n    token = currentToken\n    done()\n  })",
                  "err": {},
                  "uuid": "311e4759-0c50-4c25-90c6-acbee2b7a4cf",
                  "parentUUID": "d755997c-2301-4939-a159-c7ce79bc2fd1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7f36b1b8-3eaa-4f62-91ee-378accb8f726",
                "311e4759-0c50-4c25-90c6-acbee2b7a4cf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 616,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "a3966d68-8e17-441f-9616-a3c4e06b9a7f",
              "title": "/GET conversations",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\conversations.js",
              "file": "\\test\\testApi\\conversations.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should NOT be able to consume the route since no token was sent",
                  "fullTitle": "*********** CONVERSATIONS_USER *********** /GET conversations it should NOT be able to consume the route since no token was sent",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/conversations`)\n  .end((err, res) => {\n    res.should.have.status(401)\n    done()\n  })",
                  "err": {},
                  "uuid": "255b755c-f779-4514-a41d-3f689b477ae6",
                  "parentUUID": "a3966d68-8e17-441f-9616-a3c4e06b9a7f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET all the conversations",
                  "fullTitle": "*********** CONVERSATIONS_USER *********** /GET conversations it should GET all the conversations",
                  "timedOut": false,
                  "duration": 268,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/conversations`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200)\n    const { body } = res\n    // res.body.should.have.lengthOf(1)\n    body.docs.should.be.a('array')\n    body.limit.should.be.a('number')\n    body.page.should.be.a('number')\n    body.pagingCounter.should.be.a('number')\n    body.totalDocs.should.be.a('number')\n    body.totalPages.should.be.a('number')\n    const { docs } = body\n    const firstChat = _.head(docs)\n    firstChat.should.include.keys(\n      '_id',\n      'members',\n      'type',\n      'hash',\n      'createdAt',\n      'updatedAt',\n      'messages',\n      'toFrom',\n      'firstMessage'\n    )\n    firstChat._id.should.be.a('string')\n    firstChat.members.should.be.a('array')\n    firstChat.type.should.be.a('string')\n    firstChat.hash.should.be.a('string')\n    firstChat.messages.should.be.a('array')\n    firstChat.toFrom.should.be.a('object')\n    firstChat.firstMessage.should.be.a('object')\n    done()\n  })",
                  "err": {},
                  "uuid": "c65b06f2-046f-4a71-ba7f-409156f3f6c2",
                  "parentUUID": "a3966d68-8e17-441f-9616-a3c4e06b9a7f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should not  GET conversations by hash",
                  "fullTitle": "*********** CONVERSATIONS_USER *********** /GET conversations it should not  GET conversations by hash",
                  "timedOut": false,
                  "duration": 175,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/conversations/noexiste`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(422)\n    res.body.should.be.an('object')\n    res.body.should.have.property('errors').eql({ msg: 'NOT_FOUND' })\n    done()\n  })",
                  "err": {},
                  "uuid": "577f9b65-3995-4a24-b835-a3ddc98a6027",
                  "parentUUID": "a3966d68-8e17-441f-9616-a3c4e06b9a7f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "255b755c-f779-4514-a41d-3f689b477ae6",
                "c65b06f2-046f-4a71-ba7f-409156f3f6c2",
                "577f9b65-3995-4a24-b835-a3ddc98a6027"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 446,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "63597efa-3973-4e90-84bf-133584bd79a2",
              "title": "/POST To new Conversation",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\conversations.js",
              "file": "\\test\\testApi\\conversations.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "error in params",
                  "fullTitle": "*********** CONVERSATIONS_USER *********** /POST To new Conversation error in params",
                  "timedOut": false,
                  "duration": 169,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const messagePost = {\n  message: faker.random.words()\n}\nchai\n  .request(server)\n  .post(`${url}/messages/false`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(messagePost)\n  .end((err, res) => {\n    res.should.have.status(422)\n    res.body.should.be.a('object')\n    // res.body.should.include.property('errors').eql({ msg: 'BODY_INCOMPLETE' })\n    createdID.push(res.body.idConversation)\n    done()\n  })",
                  "err": {},
                  "uuid": "e4c7740c-0569-487a-a99f-b6b9f1b5c360",
                  "parentUUID": "63597efa-3973-4e90-84bf-133584bd79a2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should POST to with hash",
                  "fullTitle": "*********** CONVERSATIONS_USER *********** /POST To new Conversation it should POST to with hash",
                  "timedOut": false,
                  "duration": 265,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const messagePost = {\n  message: faker.random.words(),\n  to: toUser1\n}\nchai\n  .request(server)\n  .post(`${url}/messages/${existHash}`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(messagePost)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(201)\n    body.should.be.a('object')\n    body.should.include.keys('_id', 'hash')\n    body.should.include.property('hash').eql(existHash)\n    body._id.should.be.a('string')\n    body.members.should.be.a('array')\n    body.type.should.be.a('string')\n    body.hash.should.be.a('string')\n    body.createdAt.should.be.a('string')\n    body.updatedAt.should.be.a('string')\n    body.messages.should.be.a('array')\n    const lastMessage = _.last(body.messages)\n    lastMessage.should.have.property('message').eql(messagePost.message)\n    createdID.push(res.body._id)\n    done()\n  })",
                  "err": {},
                  "uuid": "a149b839-1d71-4bc5-a091-85b6498c1d19",
                  "parentUUID": "63597efa-3973-4e90-84bf-133584bd79a2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "new Conversation",
                  "fullTitle": "*********** CONVERSATIONS_USER *********** /POST To new Conversation new Conversation",
                  "timedOut": false,
                  "duration": 347,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const messagePost = {\n  message: faker.random.words(),\n  to: toUser2\n}\nchai\n  .request(server)\n  .post(`${url}/messages`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(messagePost)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(201)\n    body.should.be.a('object')\n    body.should.include.keys('_id', 'hash')\n    body._id.should.be.a('string')\n    body.members.should.be.a('array')\n    body.type.should.be.a('string')\n    body.hash.should.be.a('string')\n    body.createdAt.should.be.a('string')\n    body.updatedAt.should.be.a('string')\n    body.messages.should.be.a('array')\n    createdID.push(res.body._id)\n    done()\n  })",
                  "err": {},
                  "uuid": "259efb0e-56a4-4f8e-8d89-0b0a8283df34",
                  "parentUUID": "63597efa-3973-4e90-84bf-133584bd79a2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e4c7740c-0569-487a-a99f-b6b9f1b5c360",
                "a149b839-1d71-4bc5-a091-85b6498c1d19",
                "259efb0e-56a4-4f8e-8d89-0b0a8283df34"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 781,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "d7f25d24-941a-4a28-b099-46740c7b3414",
              "title": "/GET/:id conversations",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\conversations.js",
              "file": "\\test\\testApi\\conversations.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET conversations by hash",
                  "fullTitle": "*********** CONVERSATIONS_USER *********** /GET/:id conversations it should GET conversations by hash",
                  "timedOut": false,
                  "duration": 172,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/conversations/${existHash}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.an('object')\n    body.should.have.property('hash').eql(existHash)\n    body._id.should.be.a('string')\n    body.members.should.be.a('array')\n    body.type.should.be.a('string')\n    body.hash.should.be.a('string')\n    body.createdAt.should.be.a('string')\n    body.updatedAt.should.be.a('string')\n    body.messages.should.be.a('array')\n    done()\n  })",
                  "err": {},
                  "uuid": "bb509e01-e0fb-44f4-9212-29c521d7c50f",
                  "parentUUID": "d7f25d24-941a-4a28-b099-46740c7b3414",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bb509e01-e0fb-44f4-9212-29c521d7c50f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 172,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "442c713c-90cd-4d4e-9d92-7d7c580a6594",
          "title": "*********** EXTERNAL_USERS ***********",
          "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\external.js",
          "file": "\\test\\testApi\\external.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e155f1c4-5f0a-4862-b56c-653e565ac482",
              "title": "/GET blog",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\external.js",
              "file": "\\test\\testApi\\external.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET all the blogg",
                  "fullTitle": "*********** EXTERNAL_USERS *********** /GET blog it should GET all the blogg",
                  "timedOut": false,
                  "duration": 367,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/external/blog`)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(404)\n    body.should.be.an('object')\n    body.should.have.property('errors').eql({})\n    done()\n  })",
                  "err": {},
                  "uuid": "43407da5-898f-439d-9861-3151d569b269",
                  "parentUUID": "e155f1c4-5f0a-4862-b56c-653e565ac482",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "43407da5-898f-439d-9861-3151d569b269"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 367,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "39bd70f7-8248-4f28-819f-7df6ce4b6f2e",
          "title": "*********** HOOKS ***********",
          "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\hooks.js",
          "file": "\\test\\testApi\\hooks.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"*********** HOOKS ***********\"",
              "fullTitle": "*********** HOOKS *********** \"after all\" hook in \"*********** HOOKS ***********\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "createdID.forEach((id) => {\n  hook.findByIdAndRemove(id, (err) => {\n    if (err) {\n      // console.log(err)\n    }\n  })\n})",
              "err": {},
              "uuid": "7bdaa0c4-ee72-4c6a-ae26-cc13ac537008",
              "parentUUID": "39bd70f7-8248-4f28-819f-7df6ce4b6f2e",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "2b75b21c-506b-4336-a1fb-45d33c8be72b",
              "title": "/POST login",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\hooks.js",
              "file": "\\test\\testApi\\hooks.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET token user",
                  "fullTitle": "*********** HOOKS *********** /POST login it should GET token user",
                  "timedOut": false,
                  "duration": 259,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/login`)\n  .send(loginDetails)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('object')\n    res.body.should.include.keys('accessToken', 'user')\n    const currentAccessToken = res.body.accessToken\n    accessToken = currentAccessToken\n    done()\n  })",
                  "err": {},
                  "uuid": "4d3cec24-faa8-451c-b8f3-751ad2b42df1",
                  "parentUUID": "2b75b21c-506b-4336-a1fb-45d33c8be72b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET a fresh token",
                  "fullTitle": "*********** HOOKS *********** /POST login it should GET a fresh token",
                  "timedOut": false,
                  "duration": 342,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/exchange`)\n  .send({\n    accessToken\n  })\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.an('object')\n    body.should.include.keys('token', 'user')\n    const currentToken = body.token\n    token = currentToken\n    done()\n  })",
                  "err": {},
                  "uuid": "e4c24952-38d7-4ed8-872f-7d345fbc4f08",
                  "parentUUID": "2b75b21c-506b-4336-a1fb-45d33c8be72b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4d3cec24-faa8-451c-b8f3-751ad2b42df1",
                "e4c24952-38d7-4ed8-872f-7d345fbc4f08"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 601,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "d0259093-d11d-408f-9598-0380c4ac79f2",
              "title": "/POST hook",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\hooks.js",
              "file": "\\test\\testApi\\hooks.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should NOT POST a hook without hook",
                  "fullTitle": "*********** HOOKS *********** /POST hook it should NOT POST a hook without hook",
                  "timedOut": false,
                  "duration": 86,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const hookPostOne = {}\nchai\n  .request(server)\n  .post(`${url}/hook/subscriber`)\n  .set('Authorization', `Bearer ${token}`)\n  .set('app_id', '1')\n  .set('app_secret', '2')\n  .send(hookPostOne)\n  .end((err, res) => {\n    res.should.have.status(422)\n    const { body } = res\n    body.should.be.a('object')\n    body.should.have.property('errors')\n    const { errors } = body\n    errors.should.have.property('msg').be.a('array')\n    done()\n  })",
                  "err": {},
                  "uuid": "5a58c779-0f3e-4ae9-bc10-d0a6d4b1ce98",
                  "parentUUID": "d0259093-d11d-408f-9598-0380c4ac79f2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it unauthorized POST a hook ",
                  "fullTitle": "*********** HOOKS *********** /POST hook it unauthorized POST a hook ",
                  "timedOut": false,
                  "duration": 89,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const hookPostTwo = {\n  target_url\n}\nchai\n  .request(server)\n  .post(`${url}/hook/subscriber`)\n  .set('Authorization', `Bearer ${token}`)\n  .set('app_id', 'error')\n  .set('app_secret', 'error')\n  .send(hookPostTwo)\n  .end((err, res) => {\n    res.should.have.status(401)\n    done()\n  })",
                  "err": {},
                  "uuid": "2ff63ab6-82f1-49d7-9a11-90b34cf8f060",
                  "parentUUID": "d0259093-d11d-408f-9598-0380c4ac79f2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should POST a hook ",
                  "fullTitle": "*********** HOOKS *********** /POST hook it should POST a hook ",
                  "timedOut": false,
                  "duration": 187,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const hookPostTwo = {\n  target_url,\n  action_trigger\n}\nchai\n  .request(server)\n  .post(`${url}/hook/subscriber`)\n  .set('Authorization', `Bearer ${token}`)\n  .set('app_id', '1')\n  .set('app_secret', '2')\n  .send(hookPostTwo)\n  .end((err, res) => {\n    res.should.have.status(201)\n    const { body } = res\n    body.should.be.a('object')\n    body.should.include.keys('url', 'trigger')\n    createdID.push(res.body._id)\n    done()\n  })",
                  "err": {},
                  "uuid": "be9ba947-4ed4-4c9b-96fc-e24800c858f7",
                  "parentUUID": "d0259093-d11d-408f-9598-0380c4ac79f2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5a58c779-0f3e-4ae9-bc10-d0a6d4b1ce98",
                "2ff63ab6-82f1-49d7-9a11-90b34cf8f060",
                "be9ba947-4ed4-4c9b-96fc-e24800c858f7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 362,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "68260258-7c24-4d6f-8660-610c4e4d8e69",
              "title": "/DELETE/:id hook",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\hooks.js",
              "file": "\\test\\testApi\\hooks.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should DELETE a hook given the id",
                  "fullTitle": "*********** HOOKS *********** /DELETE/:id hook it should DELETE a hook given the id",
                  "timedOut": false,
                  "duration": 402,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const hookdelete = {\n  target_url,\n  action_trigger\n}\nchai\n  .request(server)\n  .post(`${url}/hook/subscriber`)\n  .set('Authorization', `Bearer ${token}`)\n  .set('app_id', '1')\n  .set('app_secret', '2')\n  .send(hookdelete)\n  .end((err, res) => {\n    res.should.have.status(201)\n    res.body.should.be.a('object')\n    res.body.should.include.keys('url', 'trigger')\n    chai\n      .request(server)\n      .delete(`${url}/hook/unsubscriber`)\n      .set('app_id', '1')\n      .set('app_secret', '2')\n      .set('Authorization', `Bearer ${token}`)\n      .send(hookdelete)\n      .end((error, result) => {\n        const { body } = result\n        result.should.have.status(201)\n        body.should.be.a('object')\n        body.should.have.property('DELETED').eql('SUCCESS')\n        done()\n      })\n  })",
                  "err": {},
                  "uuid": "2b66adb7-7635-4732-907d-5f81dfd5de20",
                  "parentUUID": "68260258-7c24-4d6f-8660-610c4e4d8e69",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2b66adb7-7635-4732-907d-5f81dfd5de20"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 402,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "194c9f8a-a982-484e-bb74-e7696cd973ab",
          "title": "*********** PAY_ORDERS_USERS ***********",
          "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\payOrders.js",
          "file": "\\test\\testApi\\payOrders.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"*********** PAY_ORDERS_USERS ***********\"",
              "fullTitle": "*********** PAY_ORDERS_USERS *********** \"after all\" hook in \"*********** PAY_ORDERS_USERS ***********\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "orders.deleteMany({}, (err) => {\n  if (err) {\n    console.log(err.message)\n  }\n})\ncreatedIDReservation.forEach((id) => {\n  reservations.findByIdAndRemove(id, (err) => {\n    if (err) {\n      console.log(err.message)\n    }\n  })\n})",
              "err": {},
              "uuid": "58014b95-5460-4ace-aed7-1557db3a32a9",
              "parentUUID": "194c9f8a-a982-484e-bb74-e7696cd973ab",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "c4f4b13f-4bab-45a9-b67a-224d9c36b499",
              "title": "/POST login",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\payOrders.js",
              "file": "\\test\\testApi\\payOrders.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET token user",
                  "fullTitle": "*********** PAY_ORDERS_USERS *********** /POST login it should GET token user",
                  "timedOut": false,
                  "duration": 261,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/login`)\n  .send(loginDetails)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('object')\n    res.body.should.include.keys('accessToken', 'user')\n    const currentAccessToken = res.body.accessToken\n    accessToken = currentAccessToken\n    done()\n  })",
                  "err": {},
                  "uuid": "6e73bcb1-9c8b-4141-8cba-16f7adb50a37",
                  "parentUUID": "c4f4b13f-4bab-45a9-b67a-224d9c36b499",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET a fresh token",
                  "fullTitle": "*********** PAY_ORDERS_USERS *********** /POST login it should GET a fresh token",
                  "timedOut": false,
                  "duration": 337,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/exchange`)\n  .send({\n    accessToken\n  })\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.an('object')\n    body.should.include.keys('token', 'user')\n    const currentToken = body.token\n    token = currentToken\n    done()\n  })",
                  "err": {},
                  "uuid": "6e0ed12b-280c-42d6-adb4-5db2b282bbe4",
                  "parentUUID": "c4f4b13f-4bab-45a9-b67a-224d9c36b499",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6e73bcb1-9c8b-4141-8cba-16f7adb50a37",
                "6e0ed12b-280c-42d6-adb4-5db2b282bbe4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 598,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "3bfa827e-a8ee-47bf-a3ff-4470e97d849f",
              "title": "/POST reservations",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\payOrders.js",
              "file": "\\test\\testApi\\payOrders.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should POST a contracts 100 percentage",
                  "fullTitle": "*********** PAY_ORDERS_USERS *********** /POST reservations it should POST a contracts 100 percentage",
                  "timedOut": false,
                  "duration": 514,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/contracts`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(contractData)\n  .end((err, res) => {\n    res.should.have.status(200)\n    const { body } = res\n    idIntention = body._id\n    body.should.be.a('object')\n    body.should.have.property('percentage').eql(contractData.payAmount)\n    body.should.have.property('idOperation').eql(contractData.id)\n    done()\n  })",
                  "err": {},
                  "uuid": "f96b8a48-629e-4a27-99a9-4613364661b1",
                  "parentUUID": "3bfa827e-a8ee-47bf-a3ff-4470e97d849f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should POST a reservations ",
                  "fullTitle": "*********** PAY_ORDERS_USERS *********** /POST reservations it should POST a reservations ",
                  "timedOut": false,
                  "duration": 960,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fackEmail = 'pepito@gmail.com'\nconst reservationsPost = {\n  travelerFirstName: faker.random.words(),\n  travelerLastName: faker.random.words(),\n  travelerEmail: fackEmail,\n  travelerPhone: {\n    number: '+57 314 3605160',\n    code: 'CO'\n  },\n  travelerDocument: faker.random.word(),\n  travelerAddress: faker.random.word(),\n  travelerBirthDay: '02-10-2020',\n  travelerGender: 'M',\n  country: faker.random.word(),\n  city: faker.random.word(),\n  idIntention\n}\nchai\n  .request(server)\n  .post(`${url}/reservations`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(reservationsPost)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(201)\n    body.should.be.a('object')\n    body.should.include.keys('_id', 'amount', 'status', 'code')\n    body.should.have.property('amount').to.be.a('Number')\n    body.should.have.property('amount').eql(980.1)\n    body.should.have.property('status').eql('pending')\n    body.should.have.property('travelerEmail').eql(fackEmail)\n    idReservation = body._id\n    amountReservation = body.amount\n    createdReservation.push(body._id)\n    done()\n  })",
                  "err": {},
                  "uuid": "8740f61a-bce4-4dd2-befb-45d0fb534cba",
                  "parentUUID": "3bfa827e-a8ee-47bf-a3ff-4470e97d849f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f96b8a48-629e-4a27-99a9-4613364661b1",
                "8740f61a-bce4-4dd2-befb-45d0fb534cba"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1474,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "4456ac30-8bc9-473b-a1b1-cecc0cc38f63",
              "title": "/POST payment",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\payOrders.js",
              "file": "\\test\\testApi\\payOrders.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should NOT POST payment reservation with wallet",
                  "fullTitle": "*********** PAY_ORDERS_USERS *********** /POST payment it should NOT POST payment reservation with wallet",
                  "timedOut": false,
                  "duration": 252,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const orderPost = {\n  idReservation,\n  amount: 500\n}\nchai\n  .request(server)\n  .post(`${url}/payorders`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(orderPost)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(422)\n    body.should.be.a('object')\n    body.should.have.property('errors')\n    const { errors } = body\n    errors.should.have.property('msg').eql('Amount Error')\n    done()\n  })",
                  "err": {},
                  "uuid": "a7373abe-75f6-4ffe-88c7-67b98ef1d918",
                  "parentUUID": "4456ac30-8bc9-473b-a1b1-cecc0cc38f63",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should POST to save money in wallet 10000",
                  "fullTitle": "*********** PAY_ORDERS_USERS *********** /POST payment it should POST to save money in wallet 10000",
                  "timedOut": false,
                  "duration": 3479,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const orderPost = {\n  token: TokenCard,\n  amount: price,\n  pk\n}\nchai\n  .request(server)\n  .post(`${url}/stripe`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(orderPost)\n  .end((err, res) => {\n    res.should.have.status(201)\n    res.body.should.be.a('object')\n    res.body.should.include.keys('id', 'client_secret')\n    const customData = res.body\n    chai\n      .request(server)\n      .patch(`${url}/payorders/${res.body.id}`)\n      .set('Authorization', `Bearer ${token}`)\n      .send(customData)\n      .end((error, result) => {\n        const { body } = result\n        result.should.have.status(200)\n        body.should.be.a('object')\n        body.should.include.keys('_id', 'idOperation')\n        body.should.have.property('status').eql('succeeded')\n        body.should.have.property('idOperation').eql(res.body.id)\n        body.should.have.property('amount').to.be.a('Number')\n        body.should.have.property('amount').eql(price)\n        done()\n      })\n  })",
                  "err": {},
                  "uuid": "05bdce90-08b3-453f-b159-120550c464e5",
                  "parentUUID": "4456ac30-8bc9-473b-a1b1-cecc0cc38f63",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET Total in wallet",
                  "fullTitle": "*********** PAY_ORDERS_USERS *********** /POST payment it should GET Total in wallet",
                  "timedOut": false,
                  "duration": 256,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/wallets`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    const { total } = body\n    body.should.be.a('object')\n    body.totalDocs.should.be.a('number')\n    body.should.include.keys('total', 'docs')\n    total.should.be.a('number').eql(10000)\n    done()\n  })",
                  "err": {},
                  "uuid": "37a082cb-d1b4-4c7f-9d30-57a3aba02dfd",
                  "parentUUID": "4456ac30-8bc9-473b-a1b1-cecc0cc38f63",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should POST payment with wallet",
                  "fullTitle": "*********** PAY_ORDERS_USERS *********** /POST payment it should POST payment with wallet",
                  "timedOut": false,
                  "duration": 2740,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const orderPost = {\n  idReservation,\n  amount: amountReservation\n}\nchai\n  .request(server)\n  .post(`${url}/payorders`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(orderPost)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(201)\n    body.should.be.a('object')\n    body.should.have.property('amount').eql(amountReservation)\n    body.should.have.property('status').eql('succeeded')\n    done()\n  })",
                  "err": {},
                  "uuid": "a2783b5c-a052-4897-a477-d09903cd41de",
                  "parentUUID": "4456ac30-8bc9-473b-a1b1-cecc0cc38f63",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a7373abe-75f6-4ffe-88c7-67b98ef1d918",
                "05bdce90-08b3-453f-b159-120550c464e5",
                "37a082cb-d1b4-4c7f-9d30-57a3aba02dfd",
                "a2783b5c-a052-4897-a477-d09903cd41de"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6727,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "85b68252-95d2-467c-9fad-d1a16820cbb6",
          "title": "*********** HOTELS_USERS ***********",
          "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\pluginHotel.js",
          "file": "\\test\\testApi\\pluginHotel.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c36f392e-3fc7-4e7b-82d9-8e33a9945fe4",
              "title": "/POST hotels For type",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\pluginHotel.js",
              "file": "\\test\\testApi\\pluginHotel.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should not get Hotels For type, error in params because empty",
                  "fullTitle": "*********** HOTELS_USERS *********** /POST hotels For type it should not get Hotels For type, error in params because empty",
                  "timedOut": false,
                  "duration": 90,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const paramsForType = {}\nchai\n  .request(server)\n  .post(\n    '/api/1.0/plugins/travelpayouts-api-hotels/events/get_hotels_selections'\n  )\n  .send(paramsForType)\n  .end((err, res) => {\n    res.should.have.status(422)\n    res.body.should.be.an('object')\n    res.body.should.include.keys('errors')\n    done()\n  })",
                  "err": {},
                  "uuid": "80d9cf2a-46fb-4b8f-b14e-18711c78ceb2",
                  "parentUUID": "c36f392e-3fc7-4e7b-82d9-8e33a9945fe4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should not get Hotels For type, error in params, property is missing",
                  "fullTitle": "*********** HOTELS_USERS *********** /POST hotels For type it should not get Hotels For type, error in params, property is missing",
                  "timedOut": false,
                  "duration": 84,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const paramsForType = {\n  params: {\n    check_out: '2021-08-03',\n    language: 'es',\n    type: 'populary',\n    limit: '5',\n    id: '6230' // id city\n  }\n}\nchai\n  .request(server)\n  .post(\n    '/api/1.0/plugins/travelpayouts-api-hotels/events/get_hotels_selections'\n  )\n  .send(paramsForType)\n  .end((err, res) => {\n    res.should.have.status(422)\n    res.body.should.be.an('object')\n    res.body.should.include.keys('errors')\n    res.body.should.have.property('errors').eql({\n      msg: 'Param check_in is required'\n    })\n    done()\n  })",
                  "err": {},
                  "uuid": "d5681d63-0bd8-47f6-8567-55e364a9e4e3",
                  "parentUUID": "c36f392e-3fc7-4e7b-82d9-8e33a9945fe4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should get Hotels For type",
                  "fullTitle": "*********** HOTELS_USERS *********** /POST hotels For type it should get Hotels For type",
                  "timedOut": false,
                  "duration": 511,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const paramsForType = {\n  params: {\n    check_in: '2021-08-01',\n    check_out: '2021-08-03',\n    language: 'es',\n    type: 'populary',\n    limit: '5',\n    id: '6230' // id city\n  }\n}\nchai\n  .request(server)\n  .post(\n    '/api/1.0/plugins/travelpayouts-api-hotels/events/get_hotels_selections'\n  )\n  .send(paramsForType)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('object')\n    res.body.should.include.keys('populary')\n    res.body.populary.should.be.an('Array')\n    res.body.populary.should.have.lengthOf(5)\n    done()\n  })",
                  "err": {},
                  "uuid": "5c55f4cc-f0ac-4149-8494-2b82e6507852",
                  "parentUUID": "c36f392e-3fc7-4e7b-82d9-8e33a9945fe4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "80d9cf2a-46fb-4b8f-b14e-18711c78ceb2",
                "d5681d63-0bd8-47f6-8567-55e364a9e4e3",
                "5c55f4cc-f0ac-4149-8494-2b82e6507852"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 685,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "44fe7783-5874-4c1a-82e8-79e05fb338c6",
              "title": "/POST hotels For PRICE",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\pluginHotel.js",
              "file": "\\test\\testApi\\pluginHotel.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should not get Hotels For PRICE, error in params because empty",
                  "fullTitle": "*********** HOTELS_USERS *********** /POST hotels For PRICE it should not get Hotels For PRICE, error in params because empty",
                  "timedOut": false,
                  "duration": 89,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const paramsForHotel = {}\nchai\n  .request(server)\n  .post(\n    '/api/1.0/plugins/travelpayouts-api-hotels/events/get_cost_in_hotels'\n  )\n  .send(paramsForHotel)\n  .end((err, res) => {\n    res.should.have.status(422)\n    res.body.should.be.an('object')\n    res.body.should.include.keys('errors')\n    done()\n  })",
                  "err": {},
                  "uuid": "b855dccd-7c37-4364-a774-93aa5e1bcd60",
                  "parentUUID": "44fe7783-5874-4c1a-82e8-79e05fb338c6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should not get Hotels For PRICE, error in params, property is missing",
                  "fullTitle": "*********** HOTELS_USERS *********** /POST hotels For PRICE it should not get Hotels For PRICE, error in params, property is missing",
                  "timedOut": false,
                  "duration": 85,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const paramsForHotel = {\n  params: {\n    locationId,\n    checkOut: '2020-10-15',\n    limit: '1000'\n  }\n}\nchai\n  .request(server)\n  .post(\n    '/api/1.0/plugins/travelpayouts-api-hotels/events/get_cost_in_hotels'\n  )\n  .send(paramsForHotel)\n  .end((err, res) => {\n    res.should.have.status(422)\n    res.body.should.be.an('object')\n    res.body.should.include.keys('errors')\n    res.body.should.have.property('errors').eql({\n      msg: 'Param checkIn is required'\n    })\n    done()\n  })",
                  "err": {},
                  "uuid": "4ec85db9-42da-4461-aafb-913cf2a6fd62",
                  "parentUUID": "44fe7783-5874-4c1a-82e8-79e05fb338c6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should not get Hotels For PRICE, error in Dates",
                  "fullTitle": "*********** HOTELS_USERS *********** /POST hotels For PRICE it should not get Hotels For PRICE, error in Dates",
                  "timedOut": false,
                  "duration": 610,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const paramsForHotel = {\n  params: {\n    locationId,\n    checkIn: '2020-10-01',\n    checkOut: '2020-10-15',\n    limit: '10'\n  }\n}\nchai\n  .request(server)\n  .post(\n    '/api/1.0/plugins/travelpayouts-api-hotels/events/get_cost_in_hotels'\n  )\n  .send(paramsForHotel)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('Array')\n    res.body.should.have.lengthOf(0)\n    done()\n  })",
                  "err": {},
                  "uuid": "d6b895d4-1a01-4ddf-aa3d-b6b57e1cb30a",
                  "parentUUID": "44fe7783-5874-4c1a-82e8-79e05fb338c6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should get Hotels For PRICE",
                  "fullTitle": "*********** HOTELS_USERS *********** /POST hotels For PRICE it should get Hotels For PRICE",
                  "timedOut": false,
                  "duration": 525,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const paramsForHotel = {\n  params: {\n    locationId,\n    checkIn: '2021-10-01',\n    checkOut: '2021-10-15',\n    limit: '10'\n  }\n}\nchai\n  .request(server)\n  .post(\n    '/api/1.0/plugins/travelpayouts-api-hotels/events/get_cost_in_hotels'\n  )\n  .send(paramsForHotel)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('Array')\n    res.body.should.have.lengthOf(10)\n    _.map(res.body, (a, b) => {\n      res.body[b].should.include.keys('location', 'pricePercentile')\n    })\n    done()\n  })",
                  "err": {},
                  "uuid": "44b4ada4-881e-41d0-8f5b-af447afc5b3b",
                  "parentUUID": "44fe7783-5874-4c1a-82e8-79e05fb338c6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b855dccd-7c37-4364-a774-93aa5e1bcd60",
                "4ec85db9-42da-4461-aafb-913cf2a6fd62",
                "d6b895d4-1a01-4ddf-aa3d-b6b57e1cb30a",
                "44b4ada4-881e-41d0-8f5b-af447afc5b3b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1309,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "a05e92b9-510b-4125-a847-6db31a00334d",
              "title": "/POST hotels ALL HOTELS",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\pluginHotel.js",
              "file": "\\test\\testApi\\pluginHotel.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should not get all Hotels, error in params because empty",
                  "fullTitle": "*********** HOTELS_USERS *********** /POST hotels ALL HOTELS it should not get all Hotels, error in params because empty",
                  "timedOut": false,
                  "duration": 90,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const paramsForHotel = {}\nchai\n  .request(server)\n  .post(\n    '/api/1.0/plugins/travelpayouts-api-hotels/events/get_search_management'\n  )\n  .send(paramsForHotel)\n  .end((err, res) => {\n    res.should.have.status(422)\n    res.body.should.be.an('object')\n    res.body.should.include.keys('errors')\n    done()\n  })",
                  "err": {},
                  "uuid": "51687750-76a9-4489-b458-8962a6987425",
                  "parentUUID": "a05e92b9-510b-4125-a847-6db31a00334d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should not get all Hotels, error in params, property is missing",
                  "fullTitle": "*********** HOTELS_USERS *********** /POST hotels ALL HOTELS it should not get all Hotels, error in params, property is missing",
                  "timedOut": false,
                  "duration": 84,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const paramsForHotel = {\n  params: {\n    sortBy: 'popularity',\n    checkIn: '2020-11-07',\n    checkOut: '2020-11-16',\n    adultsCount: 2,\n    childrenCount: 0\n  }\n}\nchai\n  .request(server)\n  .post(\n    '/api/1.0/plugins/travelpayouts-api-hotels/events/get_search_management'\n  )\n  .send(paramsForHotel)\n  .end((err, res) => {\n    res.should.have.status(422)\n    res.body.should.be.an('object')\n    res.body.should.include.keys('errors')\n    res.body.should.have.property('errors').eql({\n      msg: 'Param cityId or hotelId or iata is required'\n    })\n    done()\n  })",
                  "err": {},
                  "uuid": "8c989749-6d76-4472-898e-633998a990a4",
                  "parentUUID": "a05e92b9-510b-4125-a847-6db31a00334d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should not get all Hotels, error in Dates",
                  "fullTitle": "*********** HOTELS_USERS *********** /POST hotels ALL HOTELS it should not get all Hotels, error in Dates",
                  "timedOut": false,
                  "duration": 441,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const paramsForHotel = {\n  params: {\n    sortBy: 'popularity',\n    cityId: '6258',\n    checkIn: '2019-11-07',\n    checkOut: '2019-11-16',\n    adultsCount: 2,\n    childrenCount: 0\n  }\n}\nchai\n  .request(server)\n  .post(\n    '/api/1.0/plugins/travelpayouts-api-hotels/events/get_search_management'\n  )\n  .send(paramsForHotel)\n  .end((err, res) => {\n    res.should.have.status(422)\n    res.body.should.be.an('Object')\n    res.body.should.include.keys('errors')\n    res.body.should.have.property('errors').eql({\n      msg: 'ERROR_WITH_HOTEL_API'\n    })\n    done()\n  })",
                  "err": {},
                  "uuid": "3d23ac58-3527-441a-9ca5-3c06a344455d",
                  "parentUUID": "a05e92b9-510b-4125-a847-6db31a00334d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should get all Hotels",
                  "fullTitle": "*********** HOTELS_USERS *********** /POST hotels ALL HOTELS it should get all Hotels",
                  "timedOut": false,
                  "duration": 423,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const paramsForHotel = {\n  params: {\n    sortBy: 'popularity',\n    cityId: '6258',\n    checkIn: '2021-11-07',\n    checkOut: '2021-11-16',\n    adultsCount: 2,\n    childrenCount: 0\n  }\n}\nchai\n  .request(server)\n  .post(\n    '/api/1.0/plugins/travelpayouts-api-hotels/events/get_search_management'\n  )\n  .send(paramsForHotel)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(422)\n    body.should.be.an('Object')\n    body.should.have.property('errors').be.an('object')\n    const { errors } = body\n    errors.should.have.property('msg').eql('ERROR_WITH_HOTEL_API')\n    done()\n  })",
                  "err": {},
                  "uuid": "ac53e9a5-1fa9-4a82-a7eb-850af90e0d52",
                  "parentUUID": "a05e92b9-510b-4125-a847-6db31a00334d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "51687750-76a9-4489-b458-8962a6987425",
                "8c989749-6d76-4472-898e-633998a990a4",
                "3d23ac58-3527-441a-9ca5-3c06a344455d",
                "ac53e9a5-1fa9-4a82-a7eb-850af90e0d52"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1038,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "2f1ede15-1928-40f2-9b8d-e7b73d4263a2",
              "title": "/POST hotels SEARCH PLACES",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\pluginHotel.js",
              "file": "\\test\\testApi\\pluginHotel.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should not search PLACES, error in params because empty",
                  "fullTitle": "*********** HOTELS_USERS *********** /POST hotels SEARCH PLACES it should not search PLACES, error in params because empty",
                  "timedOut": false,
                  "duration": 86,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const paramsForHotel = {\n  params: {\n    query: ''\n  }\n}\nchai\n  .request(server)\n  .post('/api/1.0/plugins/travelpayouts-api-hotels/events/search_place')\n  .send(paramsForHotel)\n  .end((err, res) => {\n    res.should.have.status(422)\n    res.body.should.be.an('object')\n    res.body.should.include.keys('errors')\n    res.body.should.have\n      .property('errors')\n      .eql({ msg: 'Param query is required' })\n    done()\n  })",
                  "err": {},
                  "uuid": "9d221ff0-45b8-4bc0-9f96-92291aa86bb9",
                  "parentUUID": "2f1ede15-1928-40f2-9b8d-e7b73d4263a2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should not search PLACES, search is empty",
                  "fullTitle": "*********** HOTELS_USERS *********** /POST hotels SEARCH PLACES it should not search PLACES, search is empty",
                  "timedOut": false,
                  "duration": 561,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const paramsForHotel = {\n  params: {\n    query: 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\n  }\n}\nchai\n  .request(server)\n  .post('/api/1.0/plugins/travelpayouts-api-hotels/events/search_place')\n  .send(paramsForHotel)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('Array')\n    res.body.should.have.lengthOf(0)\n    done()\n  })",
                  "err": {},
                  "uuid": "fd35dc95-bd21-42b5-997b-c6c1b06ba284",
                  "parentUUID": "2f1ede15-1928-40f2-9b8d-e7b73d4263a2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should search PLACES",
                  "fullTitle": "*********** HOTELS_USERS *********** /POST hotels SEARCH PLACES it should search PLACES",
                  "timedOut": false,
                  "duration": 553,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const paramsForHotel = {\n  params: {\n    query: 'medellin'\n  }\n}\nchai\n  .request(server)\n  .post('/api/1.0/plugins/travelpayouts-api-hotels/events/search_place')\n  .send(paramsForHotel)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('Array')\n    res.body.should.have.lengthOf(5)\n    res.body[0].should.include.keys('cityName', 'location', 'countryName')\n    res.body[0].should.have.property('cityName').eql('Medellin')\n    done()\n  })",
                  "err": {},
                  "uuid": "209071ba-06d7-474d-9737-879c4a94d3b6",
                  "parentUUID": "2f1ede15-1928-40f2-9b8d-e7b73d4263a2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9d221ff0-45b8-4bc0-9f96-92291aa86bb9",
                "fd35dc95-bd21-42b5-997b-c6c1b06ba284",
                "209071ba-06d7-474d-9737-879c4a94d3b6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1200,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "67f07789-b1be-496c-a274-07cc97103013",
              "title": "/POST hotels COLLECTIONS TYPES",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\pluginHotel.js",
              "file": "\\test\\testApi\\pluginHotel.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should not get collection types, error in id params ",
                  "fullTitle": "*********** HOTELS_USERS *********** /POST hotels COLLECTIONS TYPES it should not get collection types, error in id params ",
                  "timedOut": false,
                  "duration": 91,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const paramsForHotel = {\n  params: {\n    id: ''\n  }\n}\nchai\n  .request(server)\n  .post(\n    '/api/1.0/plugins/travelpayouts-api-hotels/events/get_types_hotel_collections'\n  )\n  .send(paramsForHotel)\n  .end((err, res) => {\n    res.should.have.status(422)\n    res.body.should.be.an('object')\n    res.body.should.include.keys('errors')\n    res.body.should.have\n      .property('errors')\n      .eql({ msg: 'Param id is required' })\n    done()\n  })",
                  "err": {},
                  "uuid": "7990589c-ff31-46e9-922f-d16fe05dbc8b",
                  "parentUUID": "67f07789-b1be-496c-a274-07cc97103013",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should not get collection types, error in params because empty",
                  "fullTitle": "*********** HOTELS_USERS *********** /POST hotels COLLECTIONS TYPES it should not get collection types, error in params because empty",
                  "timedOut": false,
                  "duration": 89,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const paramsForHotel = {}\nchai\n  .request(server)\n  .post(\n    '/api/1.0/plugins/travelpayouts-api-hotels/events/get_types_hotel_collections'\n  )\n  .send(paramsForHotel)\n  .end((err, res) => {\n    res.should.have.status(422)\n    res.body.should.be.an('object')\n    res.body.should.include.keys('errors')\n    done()\n  })",
                  "err": {},
                  "uuid": "625d1eb1-e092-49b6-a2ba-f44e5a6d0549",
                  "parentUUID": "67f07789-b1be-496c-a274-07cc97103013",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should get collection",
                  "fullTitle": "*********** HOTELS_USERS *********** /POST hotels COLLECTIONS TYPES it should get collection",
                  "timedOut": false,
                  "duration": 525,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const paramsForHotel = {\n  params: {\n    id: 3683\n  }\n}\nchai\n  .request(server)\n  .post(\n    '/api/1.0/plugins/travelpayouts-api-hotels/events/get_types_hotel_collections'\n  )\n  .send(paramsForHotel)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('Array')\n    done()\n  })",
                  "err": {},
                  "uuid": "09ce1ef1-0b52-4657-8baa-95a45dbeaaba",
                  "parentUUID": "67f07789-b1be-496c-a274-07cc97103013",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7990589c-ff31-46e9-922f-d16fe05dbc8b",
                "625d1eb1-e092-49b6-a2ba-f44e5a6d0549",
                "09ce1ef1-0b52-4657-8baa-95a45dbeaaba"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 705,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "b2189c29-ec33-482f-92f3-66278074276c",
          "title": "*********** PROFILE_USERS ***********",
          "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\profile.js",
          "file": "\\test\\testApi\\profile.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c249076e-69f3-4a28-8d2f-5543d9ba274b",
              "title": "/POST login",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\profile.js",
              "file": "\\test\\testApi\\profile.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET token user",
                  "fullTitle": "*********** PROFILE_USERS *********** /POST login it should GET token user",
                  "timedOut": false,
                  "duration": 269,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/login`)\n  .send(loginDetails)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('object')\n    res.body.should.include.keys('accessToken', 'user')\n    const currentAccessToken = res.body.accessToken\n    accessToken = currentAccessToken\n    done()\n  })",
                  "err": {},
                  "uuid": "706d602d-c06c-4b83-b92c-a8a879080d5a",
                  "parentUUID": "c249076e-69f3-4a28-8d2f-5543d9ba274b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET a fresh token",
                  "fullTitle": "*********** PROFILE_USERS *********** /POST login it should GET a fresh token",
                  "timedOut": false,
                  "duration": 354,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/exchange`)\n  .send({\n    accessToken\n  })\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.an('object')\n    body.should.include.keys('token', 'user')\n    const currentToken = body.token\n    token = currentToken\n    done()\n  })",
                  "err": {},
                  "uuid": "0097a950-5df1-4536-8b75-6adafd11fb6b",
                  "parentUUID": "c249076e-69f3-4a28-8d2f-5543d9ba274b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "706d602d-c06c-4b83-b92c-a8a879080d5a",
                "0097a950-5df1-4536-8b75-6adafd11fb6b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 623,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "1a3d7051-f3f0-40f5-81d3-e18c2741c731",
              "title": "/GET profile",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\profile.js",
              "file": "\\test\\testApi\\profile.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should NOT be able to consume the route since no token was sent",
                  "fullTitle": "*********** PROFILE_USERS *********** /GET profile it should NOT be able to consume the route since no token was sent",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/profile`)\n  .end((err, res) => {\n    res.should.have.status(401)\n    done()\n  })",
                  "err": {},
                  "uuid": "82e7e2d3-3308-4c98-b8dd-a3f5f5e9f322",
                  "parentUUID": "1a3d7051-f3f0-40f5-81d3-e18c2741c731",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET profile",
                  "fullTitle": "*********** PROFILE_USERS *********** /GET profile it should GET profile",
                  "timedOut": false,
                  "duration": 176,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/profile`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.an('object')\n    body.should.include.keys('name', 'email')\n    body.should.have.property('role').eql('admin')\n    done()\n  })",
                  "err": {},
                  "uuid": "395b17c9-8b3d-46ec-b148-744ec0e77dac",
                  "parentUUID": "1a3d7051-f3f0-40f5-81d3-e18c2741c731",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET reffered",
                  "fullTitle": "*********** PROFILE_USERS *********** /GET profile it should GET reffered",
                  "timedOut": false,
                  "duration": 274,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/profile/referred`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200)\n    done()\n  })",
                  "err": {},
                  "uuid": "4f6d2e69-8800-4b69-8882-797835837997",
                  "parentUUID": "1a3d7051-f3f0-40f5-81d3-e18c2741c731",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "82e7e2d3-3308-4c98-b8dd-a3f5f5e9f322",
                "395b17c9-8b3d-46ec-b148-744ec0e77dac",
                "4f6d2e69-8800-4b69-8882-797835837997"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 452,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "fc395a86-6ef3-409a-ae2f-bf3ab9de11e1",
              "title": "/PATCH profile",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\profile.js",
              "file": "\\test\\testApi\\profile.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should UPDATE profile",
                  "fullTitle": "*********** PROFILE_USERS *********** /PATCH profile it should UPDATE profile",
                  "timedOut": false,
                  "duration": 178,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n  name: 'Test123456',\n  surname: 'Test123456',\n  avatar: 'https://hello.com',\n  video: 'https://hello.io',\n  birthDate: '02-10-2010',\n  country: 'Colombia'\n}\nchai\n  .request(server)\n  .patch(`${url}/profile`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(user)\n  .end((err, res) => {\n    res.should.have.status(200)\n    const { body } = res\n    body.should.be.a('object')\n    body.should.have.property('name').eql('Test123456')\n    body.should.have.property('surname').eql('Test123456')\n    body.should.have.property('video').eql('https://hello.io')\n    body.should.have.property('country').eql('Colombia')\n    done()\n  })",
                  "err": {},
                  "uuid": "f182ff7b-1c5b-450e-94ae-44b45bbfba35",
                  "parentUUID": "fc395a86-6ef3-409a-ae2f-bf3ab9de11e1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT UPDATE profile with email that already exists",
                  "fullTitle": "*********** PROFILE_USERS *********** /PATCH profile it should NOT UPDATE profile with email that already exists",
                  "timedOut": false,
                  "duration": 179,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n  email: 'user@user.com'\n}\nchai\n  .request(server)\n  .patch(`${url}/profile`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(user)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(422)\n    body.should.be.a('object')\n    body.should.have.property('errors')\n    done()\n  })",
                  "err": {},
                  "uuid": "b864e724-3c67-4f3e-be61-2633019542fd",
                  "parentUUID": "fc395a86-6ef3-409a-ae2f-bf3ab9de11e1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT UPDATE profile with not valid URL´s",
                  "fullTitle": "*********** PROFILE_USERS *********** /PATCH profile it should NOT UPDATE profile with not valid URL´s",
                  "timedOut": false,
                  "duration": 86,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n  name: 'Test123456',\n  urlTwitter: 'hello',\n  urlGitHub: 'hello',\n  city: 'Bucaramanga',\n  country: 'Colombia'\n}\nchai\n  .request(server)\n  .patch(`${url}/profile`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(user)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(422)\n    body.should.be.a('object')\n    body.should.have.property('errors').that.has.property('msg')\n    body.errors.msg[0].should.have\n      .property('msg')\n      .eql('NOT_A_VALID_URL')\n    done()\n  })",
                  "err": {},
                  "uuid": "e2fd77ff-55db-4eb8-82a1-46c065390fae",
                  "parentUUID": "fc395a86-6ef3-409a-ae2f-bf3ab9de11e1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f182ff7b-1c5b-450e-94ae-44b45bbfba35",
                "b864e724-3c67-4f3e-be61-2633019542fd",
                "e2fd77ff-55db-4eb8-82a1-46c065390fae"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 443,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "88bf26a0-70d4-4f76-8f9c-0f205c3bf23a",
              "title": "/POST profile/changePassword",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\profile.js",
              "file": "\\test\\testApi\\profile.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should NOT change password",
                  "fullTitle": "*********** PROFILE_USERS *********** /POST profile/changePassword it should NOT change password",
                  "timedOut": false,
                  "duration": 265,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data = {\n  old: '123456',\n  newpass: '123456'\n}\nchai\n  .request(server)\n  .post(`${url}/profile/changePassword`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(data)\n  .end((err, res) => {\n    res.should.have.status(422)\n    const { body } = res\n    body.should.be.a('object')\n    body.should.have.property('errors').be.a('object')\n    const { msg } = body.errors\n    msg.should.have.property('msg').eql('WRONG_PASSWORD')\n    done()\n  })",
                  "err": {},
                  "uuid": "4d9d2df0-865f-4fa7-9dcd-5aefe27e0177",
                  "parentUUID": "88bf26a0-70d4-4f76-8f9c-0f205c3bf23a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT change a too short password",
                  "fullTitle": "*********** PROFILE_USERS *********** /POST profile/changePassword it should NOT change a too short password",
                  "timedOut": false,
                  "duration": 89,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data = {\n  old: '1234',\n  newpass: '1234'\n}\nchai\n  .request(server)\n  .post(`${url}/profile/changePassword`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(data)\n  .end((err, res) => {\n    res.should.have.status(422)\n    res.body.should.be.a('object')\n    res.body.should.have.property('errors').that.has.property('msg')\n    res.body.errors.msg[0].should.have\n      .property('msg')\n      .eql('PASSWORD_TOO_SHORT_MIN_5')\n    done()\n  })",
                  "err": {},
                  "uuid": "135c12f8-ef8f-4ccd-b896-b1a8b504ee66",
                  "parentUUID": "88bf26a0-70d4-4f76-8f9c-0f205c3bf23a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should change password",
                  "fullTitle": "*********** PROFILE_USERS *********** /POST profile/changePassword it should change password",
                  "timedOut": false,
                  "duration": 346,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data = {\n  old: loginDetails.password,\n  newass: '12345678'\n}\nchai\n  .request(server)\n  .post(`${url}/profile/changePassword`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(data)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.a('object')\n    res.body.should.have.property('msg').eql('PASSWORD_CHANGED')\n    done()\n  })",
                  "err": {},
                  "uuid": "b47d1c3c-2431-4162-b318-14246e26b08c",
                  "parentUUID": "88bf26a0-70d4-4f76-8f9c-0f205c3bf23a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4d9d2df0-865f-4fa7-9dcd-5aefe27e0177",
                "135c12f8-ef8f-4ccd-b896-b1a8b504ee66",
                "b47d1c3c-2431-4162-b318-14246e26b08c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 700,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "cd3dfb5d-20b1-4d52-a2a7-cf3435d98ae9",
          "title": "*********** QUESTIONS_USER ***********",
          "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\questions.js",
          "file": "\\test\\testApi\\questions.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"*********** QUESTIONS_USER ***********\"",
              "fullTitle": "*********** QUESTIONS_USER *********** \"after all\" hook in \"*********** QUESTIONS_USER ***********\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "createdID.forEach((idquestion) => {\n  modalquestion.findByIdAndRemove(idquestion, (err) => {\n    if (err) {\n      // console.log(err)\n    }\n  })\n})",
              "err": {},
              "uuid": "77dc3c76-6938-4626-a475-f3c48b89af35",
              "parentUUID": "cd3dfb5d-20b1-4d52-a2a7-cf3435d98ae9",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "95f6002f-a9f7-41d5-a866-228c133dbb54",
              "title": "/POST login",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\questions.js",
              "file": "\\test\\testApi\\questions.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET token user",
                  "fullTitle": "*********** QUESTIONS_USER *********** /POST login it should GET token user",
                  "timedOut": false,
                  "duration": 263,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/login`)\n  .send(loginDetails)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('object')\n    res.body.should.include.keys('accessToken', 'user')\n    const currentAccessToken = res.body.accessToken\n    accessToken = currentAccessToken\n    done()\n  })",
                  "err": {},
                  "uuid": "34be4940-b3db-436c-9ced-c43a6c5b27bd",
                  "parentUUID": "95f6002f-a9f7-41d5-a866-228c133dbb54",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET a fresh token",
                  "fullTitle": "*********** QUESTIONS_USER *********** /POST login it should GET a fresh token",
                  "timedOut": false,
                  "duration": 529,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/exchange`)\n  .send({\n    accessToken\n  })\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.an('object')\n    body.should.include.keys('token', 'user')\n    const currentToken = body.token\n    token = currentToken\n    done()\n  })",
                  "err": {},
                  "uuid": "afd53ddd-67f8-40d4-ba8f-a809491c9faa",
                  "parentUUID": "95f6002f-a9f7-41d5-a866-228c133dbb54",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "34be4940-b3db-436c-9ced-c43a6c5b27bd",
                "afd53ddd-67f8-40d4-ba8f-a809491c9faa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 792,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "2d9dbefb-f685-4ca2-b34b-1c3493e4bddb",
              "title": "/GET questions",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\questions.js",
              "file": "\\test\\testApi\\questions.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET all the questions",
                  "fullTitle": "*********** QUESTIONS_USER *********** /GET questions it should GET all the questions",
                  "timedOut": false,
                  "duration": 91,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/questions`)\n  .end((err, res) => {\n    const { body } = res\n    const { docs } = body\n    const question = _.head(docs)\n    res.should.have.status(200)\n    body.should.be.an('object')\n    docs.should.have.lengthOf(4)\n    id = question._id\n    question.should.include.keys('_id', 'status', 'title', 'question')\n    done()\n  })",
                  "err": {},
                  "uuid": "a331261a-2dba-474a-a0ef-19a326c8f9a2",
                  "parentUUID": "2d9dbefb-f685-4ca2-b34b-1c3493e4bddb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT GET the questions with filters",
                  "fullTitle": "*********** QUESTIONS_USER *********** /GET questions it should NOT GET the questions with filters",
                  "timedOut": false,
                  "duration": 83,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/questions?filter=noexiste&fields=status`)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('object')\n    const { body } = res\n    const { docs, totalDocs } = body\n    totalDocs.should.be.a('number')\n    body.should.have.property('totalDocs').eql(0)\n    docs.should.have.lengthOf(0)\n    done()\n  })",
                  "err": {},
                  "uuid": "2cf693e6-d56f-498a-bcfb-f5bbec8ee275",
                  "parentUUID": "2d9dbefb-f685-4ca2-b34b-1c3493e4bddb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET the questions with filters",
                  "fullTitle": "*********** QUESTIONS_USER *********** /GET questions it should GET the questions with filters",
                  "timedOut": false,
                  "duration": 90,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/questions?filter=public&fields=status`)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('object')\n    const { body } = res\n    const { docs } = body\n    const question = _.head(docs)\n    body.should.be.an('object')\n    docs.should.have.lengthOf(3)\n    question.should.include.keys('_id', 'title', 'question')\n    question.should.have.property('status').eql('public')\n    done()\n  })",
                  "err": {},
                  "uuid": "95ff1783-e51d-4a37-bc36-26652620c98f",
                  "parentUUID": "2d9dbefb-f685-4ca2-b34b-1c3493e4bddb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a331261a-2dba-474a-a0ef-19a326c8f9a2",
                "2cf693e6-d56f-498a-bcfb-f5bbec8ee275",
                "95ff1783-e51d-4a37-bc36-26652620c98f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 264,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "802e55ba-ebff-4030-8437-a4fb17ceaf3f",
          "title": "*********** REFERREDS_USERS ***********",
          "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\referreds.js",
          "file": "\\test\\testApi\\referreds.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4b1cd978-eb87-437a-a03c-34636e82ed89",
              "title": "/POST login",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\referreds.js",
              "file": "\\test\\testApi\\referreds.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET token user",
                  "fullTitle": "*********** REFERREDS_USERS *********** /POST login it should GET token user",
                  "timedOut": false,
                  "duration": 261,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/login`)\n  .send(loginDetails)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('object')\n    res.body.should.include.keys('accessToken', 'user')\n    const currentAccessToken = res.body.accessToken\n    accessToken = currentAccessToken\n    done()\n  })",
                  "err": {},
                  "uuid": "361df5c7-e372-4417-9db1-145a0bf6ed84",
                  "parentUUID": "4b1cd978-eb87-437a-a03c-34636e82ed89",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET a fresh token",
                  "fullTitle": "*********** REFERREDS_USERS *********** /POST login it should GET a fresh token",
                  "timedOut": false,
                  "duration": 353,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/exchange`)\n  .send({\n    accessToken\n  })\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.an('object')\n    body.should.include.keys('token', 'user')\n    const currentToken = body.token\n    token = currentToken\n    done()\n  })",
                  "err": {},
                  "uuid": "ea1d31e9-67b0-4819-9eb2-fc592ce66ae7",
                  "parentUUID": "4b1cd978-eb87-437a-a03c-34636e82ed89",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "361df5c7-e372-4417-9db1-145a0bf6ed84",
                "ea1d31e9-67b0-4819-9eb2-fc592ce66ae7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 614,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "4e7b0b42-b191-4143-a905-9a0564fde8e3",
              "title": "/GET referreds",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\referreds.js",
              "file": "\\test\\testApi\\referreds.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET all the referreds",
                  "fullTitle": "*********** REFERREDS_USERS *********** /GET referreds it should GET all the referreds",
                  "timedOut": false,
                  "duration": 171,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/referreds`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    const {\n      docs,\n      totalDocs,\n      hasPrevPage,\n      hasNextPage\n    } = body\n    body.should.be.an('object')\n    docs.should.be.a('array')\n    docs.should.have.length(2)\n    hasNextPage.should.be.a('boolean')\n    hasPrevPage.should.be.a('boolean')\n    body.limit.should.be.a('number')\n    body.page.should.be.a('number')\n    totalDocs.should.be.a('number')\n    body.totalPages.should.be.a('number')\n    done()\n  })",
                  "err": {},
                  "uuid": "2ea0305b-5ae5-427f-b236-ddf88654195d",
                  "parentUUID": "4e7b0b42-b191-4143-a905-9a0564fde8e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT be able to consume the route since no token was sent",
                  "fullTitle": "*********** REFERREDS_USERS *********** /GET referreds it should NOT be able to consume the route since no token was sent",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/referreds`)\n  .end((err, res) => {\n    res.should.have.status(401)\n    done()\n  })",
                  "err": {},
                  "uuid": "30962089-239a-42c6-ae57-73f411483bc2",
                  "parentUUID": "4e7b0b42-b191-4143-a905-9a0564fde8e3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2ea0305b-5ae5-427f-b236-ddf88654195d",
                "30962089-239a-42c6-ae57-73f411483bc2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 174,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "9d074490-abfd-4889-ab24-8a3e217c7417",
          "title": "*********** RESERVATIONS_USERS ***********",
          "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\reservations.js",
          "file": "\\test\\testApi\\reservations.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"*********** RESERVATIONS_USERS ***********\"",
              "fullTitle": "*********** RESERVATIONS_USERS *********** \"after all\" hook in \"*********** RESERVATIONS_USERS ***********\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "createdID.forEach((id) => {\n  reservation.findByIdAndRemove(id, (err) => {\n    if (err) {\n      // console.log(err)\n    }\n  })\n})",
              "err": {},
              "uuid": "3f1ec41d-c2e6-45fc-8609-ba429efc4722",
              "parentUUID": "9d074490-abfd-4889-ab24-8a3e217c7417",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "464c9c7f-dedf-4d90-b72e-ed969ac8dc4c",
              "title": "/POST login",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\reservations.js",
              "file": "\\test\\testApi\\reservations.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET token user",
                  "fullTitle": "*********** RESERVATIONS_USERS *********** /POST login it should GET token user",
                  "timedOut": false,
                  "duration": 258,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/login`)\n  .send(loginDetails)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('object')\n    res.body.should.include.keys('accessToken', 'user')\n    const currentAccessToken = res.body.accessToken\n    accessToken = currentAccessToken\n    done()\n  })",
                  "err": {},
                  "uuid": "39774653-5027-4541-92f6-4574cc99aff1",
                  "parentUUID": "464c9c7f-dedf-4d90-b72e-ed969ac8dc4c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET a fresh token",
                  "fullTitle": "*********** RESERVATIONS_USERS *********** /POST login it should GET a fresh token",
                  "timedOut": false,
                  "duration": 346,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/exchange`)\n  .send({\n    accessToken\n  })\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.an('object')\n    body.should.include.keys('token', 'user')\n    const currentToken = body.token\n    token = currentToken\n    done()\n  })",
                  "err": {},
                  "uuid": "21d613c3-7d85-4d53-ab22-5305132d4541",
                  "parentUUID": "464c9c7f-dedf-4d90-b72e-ed969ac8dc4c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "39774653-5027-4541-92f6-4574cc99aff1",
                "21d613c3-7d85-4d53-ab22-5305132d4541"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 604,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "2b10045d-61bf-4d82-a310-3bc5bc0ad026",
              "title": "/GET reservations",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\reservations.js",
              "file": "\\test\\testApi\\reservations.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should NOT be able to consume the route since no token was sent",
                  "fullTitle": "*********** RESERVATIONS_USERS *********** /GET reservations it should NOT be able to consume the route since no token was sent",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/reservations`)\n  .end((err, res) => {\n    res.should.have.status(401)\n    done()\n  })",
                  "err": {},
                  "uuid": "8e4133c7-146e-4a88-ac11-11060466d067",
                  "parentUUID": "2b10045d-61bf-4d82-a310-3bc5bc0ad026",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET all the Reservations",
                  "fullTitle": "*********** RESERVATIONS_USERS *********** /GET reservations it should GET all the Reservations",
                  "timedOut": false,
                  "duration": 258,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/reservations`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200)\n    const { body } = res\n    body.should.be.an('object')\n    const { docs, totalDocs } = body\n    docs.should.be.a('array')\n    totalDocs.should.be.a('number')\n    const reservationHead = _.head(docs)\n    reservationHead.should.include.keys(\n      'code',\n      'departure',\n      'tour'\n    )\n    reservationHead._id.should.be.a('string')\n    reservationHead.travelerLastName.should.be.a('string')\n    done()\n  })",
                  "err": {},
                  "uuid": "3b7cef6c-e8bd-4a39-ba7d-aae2aa44cfa6",
                  "parentUUID": "2b10045d-61bf-4d82-a310-3bc5bc0ad026",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8e4133c7-146e-4a88-ac11-11060466d067",
                "3b7cef6c-e8bd-4a39-ba7d-aae2aa44cfa6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 261,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "c6defd2f-002b-4007-b178-eb364c28fa35",
              "title": "/POST reservations",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\reservations.js",
              "file": "\\test\\testApi\\reservations.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should NOT POST a reservation without tour",
                  "fullTitle": "*********** RESERVATIONS_USERS *********** /POST reservations it should NOT POST a reservation without tour",
                  "timedOut": false,
                  "duration": 187,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const reservationsOne = {}\nchai\n  .request(server)\n  .post(`${url}/reservations`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(reservationsOne)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(422)\n    body.should.be.a('object')\n    body.should.have.property('errors')\n    const { errors } = body\n    errors.should.have.property('msg').be.a('array')\n    errors.msg.should.have.length(24)\n    done()\n  })",
                  "err": {},
                  "uuid": "be027fd3-09c0-421f-8f0f-9ac4687f1e78",
                  "parentUUID": "c6defd2f-002b-4007-b178-eb364c28fa35",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should POST a contracts 100 percentage",
                  "fullTitle": "*********** RESERVATIONS_USERS *********** /POST reservations it should POST a contracts 100 percentage",
                  "timedOut": false,
                  "duration": 532,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/contracts`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(contractData)\n  .end((err, res) => {\n    res.should.have.status(200)\n    const { body } = res\n    idIntention = body._id\n    body.should.be.a('object')\n    body.should.have.property('percentage').eql(contractData.payAmount)\n    body.should.have.property('idOperation').eql(contractData.id)\n    done()\n  })",
                  "err": {},
                  "uuid": "adfbf23c-d8ae-4d75-b9ab-e8873007c410",
                  "parentUUID": "c6defd2f-002b-4007-b178-eb364c28fa35",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should POST a reservations ",
                  "fullTitle": "*********** RESERVATIONS_USERS *********** /POST reservations it should POST a reservations ",
                  "timedOut": false,
                  "duration": 622,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fackEmail = 'pepito@gmail.com'\nconst reservationsPost = {\n  travelerFirstName: faker.random.words(),\n  travelerLastName: faker.random.words(),\n  travelerEmail: fackEmail,\n  travelerPhone: {\n    number: '+57 314 3605160',\n    code: 'CO'\n  },\n  travelerDocument: faker.random.word(),\n  travelerAddress: faker.random.word(),\n  travelerBirthDay: '02-10-2020',\n  travelerGender: 'M',\n  country: faker.random.word(),\n  city: faker.random.word(),\n  idIntention\n}\nchai\n  .request(server)\n  .post(`${url}/reservations`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(reservationsPost)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(201)\n    body.should.be.a('object')\n    body.should.include.keys('_id', 'amount', 'status', 'code')\n    body.should.have.property('amount').to.be.a('Number')\n    body.should.have.property('amount').eql(980.1)\n    body.should.have.property('status').eql('pending')\n    body.should.have.property('travelerEmail').eql(fackEmail)\n    createdID.push(body._id)\n    done()\n  })",
                  "err": {},
                  "uuid": "90902572-0c77-414d-b175-dc68fcd0192d",
                  "parentUUID": "c6defd2f-002b-4007-b178-eb364c28fa35",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT POST a reservation",
                  "fullTitle": "*********** RESERVATIONS_USERS *********** /POST reservations it should NOT POST a reservation",
                  "timedOut": false,
                  "duration": 175,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const reservationsTwo = {\n  travelerAddres: faker.random.word(),\n  travelerGender: faker.random.word(),\n  idDeparture\n}\nchai\n  .request(server)\n  .post(`${url}/reservations`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(reservationsTwo)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(422)\n    body.should.be.a('object')\n    body.should.have.property('errors')\n    const { errors } = body\n    errors.should.be.a('object')\n    errors.should.have.property('msg').be.a('array')\n    done()\n  })",
                  "err": {},
                  "uuid": "fc0c2414-f961-47b9-a789-25b56a22e1ae",
                  "parentUUID": "c6defd2f-002b-4007-b178-eb364c28fa35",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT be able to consume the route since no token was sent",
                  "fullTitle": "*********** RESERVATIONS_USERS *********** /POST reservations it should NOT be able to consume the route since no token was sent",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const reservationsTwo = {\n  travelerAddres: faker.random.word(),\n  travelerGender: faker.random.word(),\n  idDeparture\n}\nchai\n  .request(server)\n  .post(`${url}/reservations`)\n  .send(reservationsTwo)\n  .end((err, res) => {\n    res.should.have.status(401)\n    done()\n  })",
                  "err": {},
                  "uuid": "0e49988b-0ba3-4415-9925-37194568b5c3",
                  "parentUUID": "c6defd2f-002b-4007-b178-eb364c28fa35",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "be027fd3-09c0-421f-8f0f-9ac4687f1e78",
                "adfbf23c-d8ae-4d75-b9ab-e8873007c410",
                "90902572-0c77-414d-b175-dc68fcd0192d",
                "fc0c2414-f961-47b9-a789-25b56a22e1ae",
                "0e49988b-0ba3-4415-9925-37194568b5c3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1518,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "8ef2e8b8-a93f-48d2-b26f-83e2dff2d907",
              "title": "/GET/:id Reservation",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\reservations.js",
              "file": "\\test\\testApi\\reservations.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should not  GET reservation by the given code",
                  "fullTitle": "*********** RESERVATIONS_USERS *********** /GET/:id Reservation it should not  GET reservation by the given code",
                  "timedOut": false,
                  "duration": 254,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/reservations/000-000`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((error, res) => {\n    const { body } = res\n    res.should.have.status(404)\n    body.should.be.a('object')\n    body.should.have\n      .property('errors')\n      .eql({ msg: 'NOT_FOUND_RESERVATION' })\n    done()\n  })",
                  "err": {},
                  "uuid": "68e5e337-681f-497c-aab3-3f89a0dd629e",
                  "parentUUID": "8ef2e8b8-a93f-48d2-b26f-83e2dff2d907",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET a reservation by the given code",
                  "fullTitle": "*********** RESERVATIONS_USERS *********** /GET/:id Reservation it should GET a reservation by the given code",
                  "timedOut": false,
                  "duration": 348,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/reservations/${codeReservation}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((error, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.a('object')\n    body.should.include.keys(\n      'asTour',\n      'canUpdate',\n      'code'\n    )\n    body.should.have.property('_id').eql(idReservation)\n    body.should.have.property('code').eql(codeReservation)\n    body.amount.should.be.a('number')\n    body.asTour.should.be.a('array')\n    body.should.have.property('travelerEmail').eql(loginDetails.email)\n    done()\n  })",
                  "err": {},
                  "uuid": "f7752a67-b870-431b-93b6-626a841c28f8",
                  "parentUUID": "8ef2e8b8-a93f-48d2-b26f-83e2dff2d907",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET a tour by the given id",
                  "fullTitle": "*********** RESERVATIONS_USERS *********** /GET/:id Reservation it should GET a tour by the given id",
                  "timedOut": false,
                  "duration": 350,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/reservations/${idReservation}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((error, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.a('object')\n    body.should.include.keys(\n      'asTour',\n      'canUpdate',\n      'code'\n    )\n    body.should.have.property('_id').eql(idReservation)\n    body.should.have.property('code').eql(codeReservation)\n    body.amount.should.be.a('number')\n    body.asTour.should.be.a('array')\n    body.should.have.property('travelerEmail').eql(loginDetails.email)\n    done()\n  })",
                  "err": {},
                  "uuid": "d6855cbe-5933-485d-9732-6c06a3cf4d27",
                  "parentUUID": "8ef2e8b8-a93f-48d2-b26f-83e2dff2d907",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "68e5e337-681f-497c-aab3-3f89a0dd629e",
                "f7752a67-b870-431b-93b6-626a841c28f8",
                "d6855cbe-5933-485d-9732-6c06a3cf4d27"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 952,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "d7e09259-0e21-4209-8228-e05cf1151519",
              "title": "/GET/payment/:code Reservation",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\reservations.js",
              "file": "\\test\\testApi\\reservations.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET a tour by the given id",
                  "fullTitle": "*********** RESERVATIONS_USERS *********** /GET/payment/:code Reservation it should GET a tour by the given id",
                  "timedOut": false,
                  "duration": 758,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/reservations/payment/${codeReservation}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((error, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.have.property('idReservation').eql(idReservation)\n    body.should.be.a('object')\n    body.should.include.keys('transactions')\n    body.transactions.should.have.lengthOf(0)\n    done()\n  })",
                  "err": {},
                  "uuid": "b631ff49-409c-4ee7-94db-9112060f6e24",
                  "parentUUID": "d7e09259-0e21-4209-8228-e05cf1151519",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b631ff49-409c-4ee7-94db-9112060f6e24"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 758,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "45cda2c4-7c8d-44a7-99aa-010d24150dde",
              "title": "/PATCH/:id reservations",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\reservations.js",
              "file": "\\test\\testApi\\reservations.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should UPDATE a tour given the id",
                  "fullTitle": "*********** RESERVATIONS_USERS *********** /PATCH/:id reservations it should UPDATE a tour given the id",
                  "timedOut": false,
                  "duration": 348,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nconst emergencyName = faker.random.words()\nconst emergencyLastName = faker.random.words()\nconst dataUpdate = {\n  travelerFirstName: faker.random.words(),\n  travelerLastName: faker.random.words(),\n  travelerEmail: 'user@user.com',\n  travelerPhone: {\n    number: faker.random.words(),\n    code: faker.random.words()\n  },\n  travelerDocument: faker.random.words(),\n  travelerAddress: faker.random.words(),\n  travelerBirthDay: '2020-09-11T13:58:49.529Z',\n  travelerGender: 'F',\n  idDeparture: '5f7dd6b56ce74a8e3ff15add',\n  country: faker.random.words(),\n  city: faker.random.words(),\n  observations: faker.random.words(),\n  status: 'completed',\n  idTour: '5fa181b202945b26c456176a',\n  idUser: '5aa1c2c35ef7a4e97b5e995b',\n  buyerFirstName: faker.random.words(),\n  buyerLastName: faker.random.words(),\n  buyerDocument: faker.random.words(),\n  buyerEmail: 'userdoc@user.com',\n  buyerPhone: {\n    number: faker.random.words(),\n    code: faker.random.words()\n  },\n  buyerBirthDay: '2020-09-11T13:58:49.529Z',\n  imagePassPort: {},\n  emergencyName,\n  emergencyLastName,\n  emergencyPhone: {\n    number: faker.random.words(),\n    code: faker.random.words()\n  },\n  invoice: faker.random.words(),\n  customData: {}\n}\nchai\n  .request(server)\n  .patch(`${url}/reservations/${id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(dataUpdate)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.a('object')\n    res.body.should.have.property('_id').eql(id)\n    res.body.should.include.keys(\n      'status',\n      'deleted',\n      '_id',\n      'idDeparture',\n      'country',\n      'city',\n      'amount',\n      'idTour',\n      'idUser',\n      'code',\n      'createdAt',\n      'updatedAt',\n      'buyerPhone',\n      'emergencyLastName',\n      'emergencyName',\n      'emergencyPhone',\n      'invoice',\n      'observations'\n    )\n    res.body.should.have.property('emergencyName').eql(emergencyName)\n    res.body.should.have\n      .property('emergencyLastName')\n      .eql(emergencyLastName)\n    createdID.push(res.body._id)\n    done()\n  })",
                  "err": {},
                  "uuid": "1fecbe55-008f-4a6a-93a3-02acd40e6ed2",
                  "parentUUID": "45cda2c4-7c8d-44a7-99aa-010d24150dde",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT be able to consume the route since no token was sent",
                  "fullTitle": "*********** RESERVATIONS_USERS *********** /PATCH/:id reservations it should NOT be able to consume the route since no token was sent",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nconst name = faker.random.words()\nconst lastName = faker.random.words()\nchai\n  .request(server)\n  .patch(`${url}/reservations/${id}`)\n  .send({\n    emergencyName: name,\n    emergencyLastName: lastName,\n    travelerBirthDay: '02-10-2020'\n  })\n  .end((err, res) => {\n    res.should.have.status(401)\n    done()\n  })",
                  "err": {},
                  "uuid": "bb14f3cf-e579-4bf3-8717-073f3b4f5f38",
                  "parentUUID": "45cda2c4-7c8d-44a7-99aa-010d24150dde",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1fecbe55-008f-4a6a-93a3-02acd40e6ed2",
                "bb14f3cf-e579-4bf3-8717-073f3b4f5f38"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 351,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "4a5a1627-72c1-49ab-978c-f59fd88498b9",
          "title": "*********** SETTINGS_USERS ***********",
          "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\settings.js",
          "file": "\\test\\testApi\\settings.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6e898060-2f86-48c6-a27e-5b6a3bf045db",
              "title": "/GET settings/check",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\settings.js",
              "file": "\\test\\testApi\\settings.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET ",
                  "fullTitle": "*********** SETTINGS_USERS *********** /GET settings/check it should GET ",
                  "timedOut": false,
                  "duration": 89,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/settings/check`)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.an('object')\n    body.should.include.keys('currencies', 'payAmount', 'name')\n    body.currencies.should.be.a('array')\n    body.payAmount.should.be.a('array')\n    body.name.should.be.a('string')\n    done()\n  })",
                  "err": {},
                  "uuid": "0ab54144-791a-41ff-8653-5656de18dc7f",
                  "parentUUID": "6e898060-2f86-48c6-a27e-5b6a3bf045db",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0ab54144-791a-41ff-8653-5656de18dc7f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 89,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "223730bb-3054-45a6-99f4-bbc3851e320b",
          "title": "*********** STORAGE_USER ***********",
          "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\storage.js",
          "file": "\\test\\testApi\\storage.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"*********** STORAGE_USER ***********\"",
              "fullTitle": "*********** STORAGE_USER *********** \"after all\" hook in \"*********** STORAGE_USER ***********\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "createdID.forEach((id) => {\n  storage.findByIdAndRemove(id, (err) => {\n    if (err) {\n      // console.log(err)\n    }\n  })\n})",
              "err": {},
              "uuid": "409e750f-2c26-4cda-836b-d98ed254428a",
              "parentUUID": "223730bb-3054-45a6-99f4-bbc3851e320b",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "2d5d3c63-b343-4a70-9862-4c32aeffbfcc",
              "title": "/POST login",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\storage.js",
              "file": "\\test\\testApi\\storage.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET token user",
                  "fullTitle": "*********** STORAGE_USER *********** /POST login it should GET token user",
                  "timedOut": false,
                  "duration": 264,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/login`)\n  .send(loginDetails)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('object')\n    res.body.should.include.keys('accessToken', 'user')\n    const currentAccessToken = res.body.accessToken\n    accessToken = currentAccessToken\n    done()\n  })",
                  "err": {},
                  "uuid": "d00372ed-0022-4d49-95f1-cd361ce2490f",
                  "parentUUID": "2d5d3c63-b343-4a70-9862-4c32aeffbfcc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET a fresh token",
                  "fullTitle": "*********** STORAGE_USER *********** /POST login it should GET a fresh token",
                  "timedOut": false,
                  "duration": 342,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/exchange`)\n  .send({\n    accessToken\n  })\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.an('object')\n    body.should.include.keys('token', 'user')\n    const currentToken = body.token\n    token = currentToken\n    done()\n  })",
                  "err": {},
                  "uuid": "88097a51-56f2-4702-8aee-db4d2b2214bb",
                  "parentUUID": "2d5d3c63-b343-4a70-9862-4c32aeffbfcc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d00372ed-0022-4d49-95f1-cd361ce2490f",
                "88097a51-56f2-4702-8aee-db4d2b2214bb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 606,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "1ac3210e-c6fc-43a1-b835-2bbedaa95b34",
              "title": "/GET storage",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\storage.js",
              "file": "\\test\\testApi\\storage.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should NOT be able to consume the route since no token was sent",
                  "fullTitle": "*********** STORAGE_USER *********** /GET storage it should NOT be able to consume the route since no token was sent",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/storage/test`)\n  .end((err, res) => {\n    res.should.have.status(401)\n    done()\n  })",
                  "err": {},
                  "uuid": "be7af068-69cc-47cc-a08e-c51fb1ff891a",
                  "parentUUID": "1ac3210e-c6fc-43a1-b835-2bbedaa95b34",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "be7af068-69cc-47cc-a08e-c51fb1ff891a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "b1dce52d-30f8-416a-a9ac-b1663b8285d2",
              "title": "/POST Storage",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\storage.js",
              "file": "\\test\\testApi\\storage.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it is not post in Storage ",
                  "fullTitle": "*********** STORAGE_USER *********** /POST Storage it is not post in Storage ",
                  "timedOut": false,
                  "duration": 86,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/storage`)\n  .set('Authorization', `Bearer ${token}`)\n  .set('Content-Type', 'application/x-www-form-urlencoded')\n  .end((err, res) => {\n    const { body } = res\n    body.should.be.an('object')\n    res.should.have.status(400)\n    body.should.have.property('errors')\n      .eql({ msg: 'No files were uploaded.' })\n    done()\n  })",
                  "err": {},
                  "uuid": "0cedf566-07c9-4084-9de7-ecabc6fea619",
                  "parentUUID": "b1dce52d-30f8-416a-a9ac-b1663b8285d2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Error in params ",
                  "fullTitle": "*********** STORAGE_USER *********** /POST Storage Error in params ",
                  "timedOut": false,
                  "duration": 96,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/storage`)\n  .set('Authorization', `Bearer ${token}`)\n  .set('Content-Type', 'application/x-www-form-urlencoded')\n  .attach('file', fs.readFileSync(file), 'pruebas.jpg')\n  .end((err, res) => {\n    const { body } = res\n    body.should.be.an('object')\n    res.should.have.status(422)\n    const { errors } = body\n    errors.should.have.property('msg').eql('Param file[] required')\n    done()\n  })",
                  "err": {},
                  "uuid": "bb4ce1fb-c827-46c3-9818-5dcfa527c1be",
                  "parentUUID": "b1dce52d-30f8-416a-a9ac-b1663b8285d2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Empty Array Files ",
                  "fullTitle": "*********** STORAGE_USER *********** /POST Storage Empty Array Files ",
                  "timedOut": false,
                  "duration": 88,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/storage`)\n  .set('Authorization', `Bearer ${token}`)\n  .set('Content-Type', 'application/x-www-form-urlencoded')\n  .attach('file[]', '')\n  .end((err, res) => {\n    const { body } = res\n    body.should.be.an('object')\n    res.should.have.status(400)\n    body.should.have.property('errors').eql({ msg: 'No files were uploaded.' })\n    done()\n  })",
                  "err": {},
                  "uuid": "4d00f4be-cc60-4375-854b-c4cb09143647",
                  "parentUUID": "b1dce52d-30f8-416a-a9ac-b1663b8285d2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it post in Storage video",
                  "fullTitle": "*********** STORAGE_USER *********** /POST Storage it post in Storage video",
                  "timedOut": false,
                  "duration": 202,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/storage`)\n  .set('Authorization', `Bearer ${token}`)\n  .set('Content-Type', 'application/x-www-form-urlencoded')\n  .attach('file[]', fs.readFileSync(video), 'pruebas-video.mp4')\n  .end((err, res) => {\n    const { body } = res\n    body.should.be.an('array')\n    const firstFile = _.head(body)\n    firstFile.should.be.an('object')\n    firstFile.should.include.keys('source', 'type', 'fileName', '_id')\n    createdID.push(res.body[0]._id)\n    done()\n  })",
                  "err": {},
                  "uuid": "9cc8df60-42f5-47e2-ad08-248b26aba9f9",
                  "parentUUID": "b1dce52d-30f8-416a-a9ac-b1663b8285d2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it post in Storage image",
                  "fullTitle": "*********** STORAGE_USER *********** /POST Storage it post in Storage image",
                  "timedOut": false,
                  "duration": 2778,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/storage`)\n  .set('Authorization', `Bearer ${token}`)\n  .set('Content-Type', 'application/x-www-form-urlencoded')\n  .attach('file[]', fs.readFileSync(file), 'pruebas.jpg')\n  .end((err, res) => {\n    const { body } = res\n    res.body.should.be.an('array')\n    const firstFile = _.head(body)\n    firstFile.should.be.an('object')\n    firstFile.should.include.keys('source', 'type', 'fileName', '_id')\n    createdID.push(res.body[0]._id)\n    done()\n  })",
                  "err": {},
                  "uuid": "979e4021-5912-4ec4-b2e4-99c711123027",
                  "parentUUID": "b1dce52d-30f8-416a-a9ac-b1663b8285d2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0cedf566-07c9-4084-9de7-ecabc6fea619",
                "bb4ce1fb-c827-46c3-9818-5dcfa527c1be",
                "4d00f4be-cc60-4375-854b-c4cb09143647",
                "9cc8df60-42f5-47e2-ad08-248b26aba9f9",
                "979e4021-5912-4ec4-b2e4-99c711123027"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3250,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "c3599b58-b0f0-4461-92aa-68b56ba16413",
              "title": "/GET/:id Storage",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\storage.js",
              "file": "\\test\\testApi\\storage.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET a Storage by the given id",
                  "fullTitle": "*********** STORAGE_USER *********** /GET/:id Storage it should GET a Storage by the given id",
                  "timedOut": false,
                  "duration": 174,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nchai\n  .request(server)\n  .get(`${url}/storage/${id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.a('object')\n    res.body.should.have.property('_id').eql(id)\n    done()\n  })",
                  "err": {},
                  "uuid": "f5ce583e-d4d5-4057-b172-e9d3ba71c42f",
                  "parentUUID": "c3599b58-b0f0-4461-92aa-68b56ba16413",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f5ce583e-d4d5-4057-b172-e9d3ba71c42f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 174,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "65ac881c-d57c-4b31-a792-c2021aa06b14",
          "title": "*********** STRIPE_USERS ***********",
          "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\stripe.js",
          "file": "\\test\\testApi\\stripe.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"*********** STRIPE_USERS ***********\"",
              "fullTitle": "*********** STRIPE_USERS *********** \"after all\" hook in \"*********** STRIPE_USERS ***********\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "payOrders.deleteMany({}, (err) => {\n  if (err) {\n    console.log(err)\n  }\n})",
              "err": {},
              "uuid": "4a7d2612-50f6-486e-b4c1-8a664d6e5095",
              "parentUUID": "65ac881c-d57c-4b31-a792-c2021aa06b14",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "64fae24b-d2c6-425c-97bc-7e979fc6145d",
              "title": "/POST login",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\stripe.js",
              "file": "\\test\\testApi\\stripe.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET token user",
                  "fullTitle": "*********** STRIPE_USERS *********** /POST login it should GET token user",
                  "timedOut": false,
                  "duration": 271,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/login`)\n  .send(loginDetails)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('object')\n    res.body.should.include.keys('accessToken', 'user')\n    const currentAccessToken = res.body.accessToken\n    accessToken = currentAccessToken\n    done()\n  })",
                  "err": {},
                  "uuid": "e4f3ce99-79e4-44a0-8102-fcba14de5284",
                  "parentUUID": "64fae24b-d2c6-425c-97bc-7e979fc6145d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET a fresh token",
                  "fullTitle": "*********** STRIPE_USERS *********** /POST login it should GET a fresh token",
                  "timedOut": false,
                  "duration": 340,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/exchange`)\n  .send({\n    accessToken\n  })\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.an('object')\n    body.should.include.keys('token', 'user')\n    const currentToken = body.token\n    token = currentToken\n    done()\n  })",
                  "err": {},
                  "uuid": "499c4c79-ff04-4fa2-8773-2d4d57a8647e",
                  "parentUUID": "64fae24b-d2c6-425c-97bc-7e979fc6145d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e4f3ce99-79e4-44a0-8102-fcba14de5284",
                "499c4c79-ff04-4fa2-8773-2d4d57a8647e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 611,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "1bb27de0-33c6-474f-b84b-7e4cc7abebb8",
              "title": "/POST stripe",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\stripe.js",
              "file": "\\test\\testApi\\stripe.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should NOT POST  without params",
                  "fullTitle": "*********** STRIPE_USERS *********** /POST stripe it should NOT POST  without params",
                  "timedOut": false,
                  "duration": 87,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const orderPost = {\n  token: TokenCard\n}\nchai\n  .request(server)\n  .post(`${url}/stripe`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(orderPost)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(422)\n    body.should.be.a('object')\n    body.should.have.property('errors')\n    const { errors } = body\n    errors.should.be.a('object')\n    errors.msg.should.be.a('array').length(2)\n    // errors.should.have.property('msg').eql('Invalid integer: NaN')\n    done()\n  })",
                  "err": {},
                  "uuid": "76693f94-2687-40a1-9d81-b3ddc070b8c9",
                  "parentUUID": "1bb27de0-33c6-474f-b84b-7e4cc7abebb8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should POST a Stripe with amount ",
                  "fullTitle": "*********** STRIPE_USERS *********** /POST stripe it should POST a Stripe with amount ",
                  "timedOut": false,
                  "duration": 6046,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const orderPost = {\n  token: TokenCard,\n  amount: price,\n  pk\n}\nchai\n  .request(server)\n  .post(`${url}/stripe`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(orderPost)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(201)\n    body.should.be.a('object')\n    body.should.include.keys('id', 'client_secret', 'amount')\n    const { description, amount } = body\n    amount.should.be.a('number').eql(price * 100)\n    description.should.be.a('string').eql('Abono a monedero')\n    done()\n  })",
                  "err": {},
                  "uuid": "cadc934f-abfa-4a44-b06d-665f2dff18c7",
                  "parentUUID": "1bb27de0-33c6-474f-b84b-7e4cc7abebb8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT POST error params",
                  "fullTitle": "*********** STRIPE_USERS *********** /POST stripe it should NOT POST error params",
                  "timedOut": false,
                  "duration": 100,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const orderPost = {\n  token: TokenCard,\n  reference: reservation._id\n}\nchai\n  .request(server)\n  .post(`${url}/stripe`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(orderPost)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(422)\n    body.should.be.a('object')\n    body.should.have.property('errors')\n    const { errors } = body\n    errors.should.be.a('object')\n    errors.msg.should.be.a('array').length(2)\n    // errors.should.have.property('msg').eql('Invalid integer: NaN')\n    done()\n  })",
                  "err": {},
                  "uuid": "6e0b2bf6-d8a7-4faf-afb5-fb0839980278",
                  "parentUUID": "1bb27de0-33c6-474f-b84b-7e4cc7abebb8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should POST a Stripe with Reservation ",
                  "fullTitle": "*********** STRIPE_USERS *********** /POST stripe it should POST a Stripe with Reservation ",
                  "timedOut": false,
                  "duration": 4510,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const orderPost = {\n  token: TokenCard,\n  reference: reservation._id,\n  amount: price,\n  pk\n}\nchai\n  .request(server)\n  .post(`${url}/stripe`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(orderPost)\n  .end((err, res) => {\n    res.should.have.status(201)\n    res.body.should.be.a('object')\n    res.body.amount.should.be.a('number').eql(price * 100)\n    res.body.should.include.keys('id', 'client_secret')\n    customData = res.body\n    chai\n      .request(server)\n      .patch(`${url}/payorders/${res.body.id}`)\n      .set('Authorization', `Bearer ${token}`)\n      .send(customData)\n      .end((error, result) => {\n        const { body } = result\n        result.should.have.status(200)\n        body.should.be.a('object')\n        body.should.include.keys('_id', 'idOperation', 'customData')\n        body.should.have.property('status').eql('succeeded')\n        body.should.have.property('idOperation').eql(res.body.id)\n        body.should.have.property('amount').to.be.a('Number')\n        body.should.have.property('amount').eql(price)\n        done()\n      })\n  })",
                  "err": {},
                  "uuid": "3138afc4-876d-4398-9902-c5919ab8862f",
                  "parentUUID": "1bb27de0-33c6-474f-b84b-7e4cc7abebb8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT be able to consume the route since no token was sent",
                  "fullTitle": "*********** STRIPE_USERS *********** /POST stripe it should NOT be able to consume the route since no token was sent",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/stripe`)\n  .send({\n    token: TokenCard,\n    reference: reservation._id,\n    amount: price\n  })\n  .end((err, res) => {\n    res.should.have.status(401)\n    done()\n  })",
                  "err": {},
                  "uuid": "4cbace26-bc49-4429-a80a-d639fe4fc050",
                  "parentUUID": "1bb27de0-33c6-474f-b84b-7e4cc7abebb8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "76693f94-2687-40a1-9d81-b3ddc070b8c9",
                "cadc934f-abfa-4a44-b06d-665f2dff18c7",
                "6e0b2bf6-d8a7-4faf-afb5-fb0839980278",
                "3138afc4-876d-4398-9902-c5919ab8862f",
                "4cbace26-bc49-4429-a80a-d639fe4fc050"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10747,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "a593abe7-e193-491d-86e8-8b7975fa4fe7",
          "title": "*********** SUPPORT_USERS ***********",
          "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\support.js",
          "file": "\\test\\testApi\\support.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"*********** SUPPORT_USERS ***********\"",
              "fullTitle": "*********** SUPPORT_USERS *********** \"after all\" hook in \"*********** SUPPORT_USERS ***********\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "createdID.forEach((id) => {\n  support.findByIdAndRemove(id, (err) => {\n    if (err) {\n      // console.log(err)\n    }\n  })\n})",
              "err": {},
              "uuid": "6b453494-d2fb-4bb8-84d8-d384962a9c2d",
              "parentUUID": "a593abe7-e193-491d-86e8-8b7975fa4fe7",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "35248e0d-93d1-4890-8f5a-6afea22cf336",
              "title": "/POST login",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\support.js",
              "file": "\\test\\testApi\\support.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET token user",
                  "fullTitle": "*********** SUPPORT_USERS *********** /POST login it should GET token user",
                  "timedOut": false,
                  "duration": 266,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/login`)\n  .send(loginDetails)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('object')\n    res.body.should.include.keys('accessToken', 'user')\n    const currentAccessToken = res.body.accessToken\n    accessToken = currentAccessToken\n    done()\n  })",
                  "err": {},
                  "uuid": "39d8e9c1-07c3-4485-930c-4867bf8ec937",
                  "parentUUID": "35248e0d-93d1-4890-8f5a-6afea22cf336",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET a fresh token",
                  "fullTitle": "*********** SUPPORT_USERS *********** /POST login it should GET a fresh token",
                  "timedOut": false,
                  "duration": 347,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/exchange`)\n  .send({\n    accessToken\n  })\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.an('object')\n    body.should.include.keys('token', 'user')\n    const currentToken = body.token\n    token = currentToken\n    done()\n  })",
                  "err": {},
                  "uuid": "a9d4b159-d5b3-4d41-8268-7a6a628cfe81",
                  "parentUUID": "35248e0d-93d1-4890-8f5a-6afea22cf336",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "39d8e9c1-07c3-4485-930c-4867bf8ec937",
                "a9d4b159-d5b3-4d41-8268-7a6a628cfe81"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 613,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "bbab1b85-bbc6-4b25-8198-38fdab5461f3",
              "title": "/GET support",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\support.js",
              "file": "\\test\\testApi\\support.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should NOT be able to consume the route since no token was sent",
                  "fullTitle": "*********** SUPPORT_USERS *********** /GET support it should NOT be able to consume the route since no token was sent",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/support`)\n  .end((err, res) => {\n    res.should.have.status(401)\n    done()\n  })",
                  "err": {},
                  "uuid": "d90ec5e0-ec73-430b-a5c7-07cdb5a94788",
                  "parentUUID": "bbab1b85-bbc6-4b25-8198-38fdab5461f3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET all the support",
                  "fullTitle": "*********** SUPPORT_USERS *********** /GET support it should GET all the support",
                  "timedOut": false,
                  "duration": 193,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/support/${codeReservation}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200)\n    const { body } = res\n    body.docs.should.be.a('array')\n    body.totalDocs.should.be.a('number').eql(1)\n    const { docs } = body\n    const firstChat = _.head(docs)\n    firstChat.should.include.keys(\n      '_id',\n      'status',\n      'hash',\n      'firstMessage',\n      'codeReservation'\n    )\n    firstChat._id.should.be.a('string')\n    firstChat.hash.should.be.a('string').eql(hash)\n    firstChat.codeReservation.should.be.a('string').eql(codeReservation)\n    done()\n  })",
                  "err": {},
                  "uuid": "c0344f36-fae2-4b13-9a5e-32961f8c27f4",
                  "parentUUID": "bbab1b85-bbc6-4b25-8198-38fdab5461f3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should not  GET support by codeReservation",
                  "fullTitle": "*********** SUPPORT_USERS *********** /GET support it should not  GET support by codeReservation",
                  "timedOut": false,
                  "duration": 173,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/support/6035014000c0712dcc000368`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200)\n    const { body } = res\n    body.should.be.an('object')\n    body.should.have.property('docs')\n    const { docs } = body\n    docs.should.be.an('array')\n    docs.should.have.length(0)\n    done()\n  })",
                  "err": {},
                  "uuid": "e9ece9a5-4386-4f4a-82fe-12206351aa79",
                  "parentUUID": "bbab1b85-bbc6-4b25-8198-38fdab5461f3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d90ec5e0-ec73-430b-a5c7-07cdb5a94788",
                "c0344f36-fae2-4b13-9a5e-32961f8c27f4",
                "e9ece9a5-4386-4f4a-82fe-12206351aa79"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 369,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "bd6bd5d1-9bbb-4aa1-a0c8-d95fb350d999",
              "title": "/POST To new support",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\support.js",
              "file": "\\test\\testApi\\support.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "error in params",
                  "fullTitle": "*********** SUPPORT_USERS *********** /POST To new support error in params",
                  "timedOut": false,
                  "duration": 91,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const messagePost = {\n  message: faker.random.words()\n}\nchai\n  .request(server)\n  .post(`${url}/support`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(messagePost)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(422)\n    body.should.be.a('object')\n    body.should.have.property('errors')\n    done()\n  })",
                  "err": {},
                  "uuid": "3dde19ef-3d89-4dd7-a98e-1a8d2afd025d",
                  "parentUUID": "bd6bd5d1-9bbb-4aa1-a0c8-d95fb350d999",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should POST to with hash",
                  "fullTitle": "*********** SUPPORT_USERS *********** /POST To new support it should POST to with hash",
                  "timedOut": false,
                  "duration": 288,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const messagePost = {\n  message: faker.random.words(),\n  codeReservation,\n  hash\n}\nchai\n  .request(server)\n  .post(`${url}/support`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(messagePost)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.a('object')\n    body.should.include.keys('_id', 'hash')\n    body.should.include.property('hash').eql(hash)\n    body._id.should.be.a('string')\n    body.hash.should.be.a('string')\n    // body.messages.should.be.a('array').length(2)\n    body.codeReservation.should.be.a('string').eql(codeReservation)\n    const lastMessage = _.last(body.messages)\n    lastMessage.should.have.property('message').eql(messagePost.message)\n    createdID.push(res.body._id)\n    done()\n  })",
                  "err": {},
                  "uuid": "73992942-a7d2-4506-9adc-0a6aa087b6fa",
                  "parentUUID": "bd6bd5d1-9bbb-4aa1-a0c8-d95fb350d999",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "new support",
                  "fullTitle": "*********** SUPPORT_USERS *********** /POST To new support new support",
                  "timedOut": false,
                  "duration": 506,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const messagePost = {\n  message: faker.random.words(),\n  codeReservation\n}\nchai\n  .request(server)\n  .post(`${url}/support`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(messagePost)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.a('object')\n    body.should.include.keys('_id', 'hash')\n    body._id.should.be.a('string')\n    body.hash.should.be.a('string')\n    body.messages.should.be.a('array').length(1)\n    const lastMessage = _.last(body.messages)\n    lastMessage.should.have.property('message').eql(messagePost.message)\n    body.codeReservation.should.be.a('string').eql(codeReservation)\n    createdID.push(res.body._id)\n    done()\n  })",
                  "err": {},
                  "uuid": "43023bea-d5c6-405b-b9f0-6d776bd1c355",
                  "parentUUID": "bd6bd5d1-9bbb-4aa1-a0c8-d95fb350d999",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3dde19ef-3d89-4dd7-a98e-1a8d2afd025d",
                "73992942-a7d2-4506-9adc-0a6aa087b6fa",
                "43023bea-d5c6-405b-b9f0-6d776bd1c355"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 885,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "2c4f47ca-e4ab-4674-a5c7-567226d49595",
              "title": "/GET/: support currentChat",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\support.js",
              "file": "\\test\\testApi\\support.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET support by hash",
                  "fullTitle": "*********** SUPPORT_USERS *********** /GET/: support currentChat it should GET support by hash",
                  "timedOut": false,
                  "duration": 175,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/support/currentChat`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(object)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.an('object')\n    body.should.include.keys('_id', 'hash')\n    body.should.have.property('hash').eql(hash)\n    // body.messages.should.be.a('array').length(2)\n    body.codeReservation.should.be.a('string').eql(codeReservation)\n    createdID.push(res.body._id)\n    done()\n  })",
                  "err": {},
                  "uuid": "86f404b2-077e-484d-a23f-37b2bdff20dc",
                  "parentUUID": "2c4f47ca-e4ab-4674-a5c7-567226d49595",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "86f404b2-077e-484d-a23f-37b2bdff20dc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 175,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "3a129131-32b8-450e-ac8d-6b4f936d5134",
          "title": "*********** TOURS_USERS ***********",
          "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\tours.js",
          "file": "\\test\\testApi\\tours.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"*********** TOURS_USERS ***********\"",
              "fullTitle": "*********** TOURS_USERS *********** \"after all\" hook in \"*********** TOURS_USERS ***********\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "createdID.forEach((id) => {\n  Tour.findByIdAndRemove(id, (err) => {\n    if (err) {\n      // console.log(err)\n    }\n  })\n})",
              "err": {},
              "uuid": "d7f36c5d-deab-4ad3-adf1-e50fadc36058",
              "parentUUID": "3a129131-32b8-450e-ac8d-6b4f936d5134",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "3213b6fb-9201-4feb-9e3b-22322d1b1408",
              "title": "/POST login",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\tours.js",
              "file": "\\test\\testApi\\tours.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET token user",
                  "fullTitle": "*********** TOURS_USERS *********** /POST login it should GET token user",
                  "timedOut": false,
                  "duration": 315,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/login`)\n  .send(loginDetails)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('object')\n    res.body.should.include.keys('accessToken', 'user')\n    const currentAccessToken = res.body.accessToken\n    accessToken = currentAccessToken\n    done()\n  })",
                  "err": {},
                  "uuid": "457adc12-a36a-42f6-ac57-909fd005db68",
                  "parentUUID": "3213b6fb-9201-4feb-9e3b-22322d1b1408",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET a fresh token",
                  "fullTitle": "*********** TOURS_USERS *********** /POST login it should GET a fresh token",
                  "timedOut": false,
                  "duration": 345,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/exchange`)\n  .send({\n    accessToken\n  })\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.an('object')\n    body.should.include.keys('token', 'user')\n    const currentToken = body.token\n    token = currentToken\n    done()\n  })",
                  "err": {},
                  "uuid": "23d1210a-0e1b-48e8-b7c9-193a341e8e6f",
                  "parentUUID": "3213b6fb-9201-4feb-9e3b-22322d1b1408",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "457adc12-a36a-42f6-ac57-909fd005db68",
                "23d1210a-0e1b-48e8-b7c9-193a341e8e6f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 660,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "70341cc4-a764-4a99-9b2a-a7bf215699ab",
              "title": "/GET tours",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\tours.js",
              "file": "\\test\\testApi\\tours.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET all the tours",
                  "fullTitle": "*********** TOURS_USERS *********** /GET tours it should GET all the tours",
                  "timedOut": false,
                  "duration": 183,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/tours`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    const { docs, totalDocs } = body\n    body.should.be.an('object')\n    body.hasNextPage.should.be.a('boolean')\n    body.hasPrevPage.should.be.a('boolean')\n    body.limit.should.be.a('number')\n    body.page.should.be.a('number')\n    body.pagingCounter.should.be.a('number')\n    body.totalPages.should.be.a('number')\n    totalDocs.should.be.a('number').eql(2)\n    docs.should.be.a('array')\n    docs.should.have.lengthOf(2)\n    _.map(docs, (a, i) => {\n      docs[i].category.should.be.a('array').lengthOf(1)\n      docs[i].should.include.keys('title', 'slug', 'route')\n    })\n    done()\n  })",
                  "err": {},
                  "uuid": "bf0c3d9a-1e96-4ee9-85c5-3c956e1dbe25",
                  "parentUUID": "70341cc4-a764-4a99-9b2a-a7bf215699ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET the tours with limit",
                  "fullTitle": "*********** TOURS_USERS *********** /GET tours it should GET the tours with limit",
                  "timedOut": false,
                  "duration": 199,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/tours?limit=1`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200)\n    const { body } = res\n    body.should.be.an('object')\n    body.docs.should.be.a('array')\n    body.docs.should.have.lengthOf(1)\n    done()\n  })",
                  "err": {},
                  "uuid": "f825cca8-5f51-44a6-b05d-f617a264e90f",
                  "parentUUID": "70341cc4-a764-4a99-9b2a-a7bf215699ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET the tours with query,Empty",
                  "fullTitle": "*********** TOURS_USERS *********** /GET tours it should GET the tours with query,Empty",
                  "timedOut": false,
                  "duration": 88,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/tours?query=zzzzzzzzzz`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200)\n    const { body } = res\n    body.should.be.an('object')\n    body.docs.should.be.a('array')\n    body.docs.should.have.lengthOf(0)\n    done()\n  })",
                  "err": {},
                  "uuid": "23ef9cbb-25cb-4121-ae44-1248ebedded2",
                  "parentUUID": "70341cc4-a764-4a99-9b2a-a7bf215699ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET the tours with query",
                  "fullTitle": "*********** TOURS_USERS *********** /GET tours it should GET the tours with query",
                  "timedOut": false,
                  "duration": 194,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/tours?query=medellin`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.an('object')\n    body.docs.should.be.a('array')\n    body.docs.should.have.lengthOf(1)\n    done()\n  })",
                  "err": {},
                  "uuid": "4dd9e968-39eb-4939-9540-efae54a932e8",
                  "parentUUID": "70341cc4-a764-4a99-9b2a-a7bf215699ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET number tours for continents",
                  "fullTitle": "*********** TOURS_USERS *********** /GET tours it should GET number tours for continents",
                  "timedOut": false,
                  "duration": 90,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/tours/forContinents`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.an('Array')\n    _.map(res.body, (a, i) => {\n      body[i].should.have.property('count').to.be.a('number')\n      body[i].should.have.property('count').to.be.above(0)\n    })\n    done()\n  })",
                  "err": {},
                  "uuid": "f7fd9a76-0ee8-4974-89a8-7318e4294623",
                  "parentUUID": "70341cc4-a764-4a99-9b2a-a7bf215699ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET departures tours",
                  "fullTitle": "*********** TOURS_USERS *********** /GET tours it should GET departures tours",
                  "timedOut": false,
                  "duration": 91,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/tours/departures/tour-one`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.an('Object')\n    body.should.have.property('departures')\n    body.should.have.property('departures').be.an('Array')\n    body.should.have.property('status').eql('publish')\n    body.should.have.property('slug').eql('tour-one')\n    body.departures.should.have.length(1)\n    done()\n  })",
                  "err": {},
                  "uuid": "0365c635-bb0a-4451-a048-23872629c919",
                  "parentUUID": "70341cc4-a764-4a99-9b2a-a7bf215699ab",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bf0c3d9a-1e96-4ee9-85c5-3c956e1dbe25",
                "f825cca8-5f51-44a6-b05d-f617a264e90f",
                "23ef9cbb-25cb-4121-ae44-1248ebedded2",
                "4dd9e968-39eb-4939-9540-efae54a932e8",
                "f7fd9a76-0ee8-4974-89a8-7318e4294623",
                "0365c635-bb0a-4451-a048-23872629c919"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 845,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "c5abaa54-f829-4668-85f9-2de93c8342cc",
              "title": "*********** SEARCH TOURS ******************",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\tours.js",
              "file": "\\test\\testApi\\tours.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "with out params",
                  "fullTitle": "*********** TOURS_USERS *********** *********** SEARCH TOURS ****************** with out params",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/tours/search`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(404)\n    body.should.be.a('object')\n    body.should.have.property('errors').eql({ msg: 'Params Error' })\n    done()\n  })",
                  "err": {},
                  "uuid": "fe6f1720-0201-4826-837d-6248bc6086e9",
                  "parentUUID": "c5abaa54-f829-4668-85f9-2de93c8342cc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "search with params",
                  "fullTitle": "*********** TOURS_USERS *********** *********** SEARCH TOURS ****************** search with params",
                  "timedOut": false,
                  "duration": 590,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/tours/search?query=MedeLLIN`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.a('object')\n    body.should.have.property('tours')\n    body.should.have.property('places')\n    body.tours.should.have.lengthOf(1)\n    body.tours[0].should.have.property('title').eql('tour one')\n    done()\n  })",
                  "err": {},
                  "uuid": "847d6fbf-1363-4cca-a0e7-56f4e517ad29",
                  "parentUUID": "c5abaa54-f829-4668-85f9-2de93c8342cc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "empty search",
                  "fullTitle": "*********** TOURS_USERS *********** *********** SEARCH TOURS ****************** empty search",
                  "timedOut": false,
                  "duration": 565,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/tours/search?query=zzzzzzzzzzzzzzzzzz`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.a('object')\n    body.should.have.property('tours')\n    body.should.have.property('places')\n    body.tours.should.have.lengthOf(0)\n    body.places.should.have.lengthOf(0)\n    done()\n  })",
                  "err": {},
                  "uuid": "ade09d4e-372a-4c4f-9bda-563a5aa5cda6",
                  "parentUUID": "c5abaa54-f829-4668-85f9-2de93c8342cc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fe6f1720-0201-4826-837d-6248bc6086e9",
                "847d6fbf-1363-4cca-a0e7-56f4e517ad29",
                "ade09d4e-372a-4c4f-9bda-563a5aa5cda6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1158,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "e79f2c9d-da85-471f-a154-a15190c5f110",
              "title": "/GET/:id tour",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\tours.js",
              "file": "\\test\\testApi\\tours.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET a tour by the given id",
                  "fullTitle": "*********** TOURS_USERS *********** /GET/:id tour it should GET a tour by the given id",
                  "timedOut": false,
                  "duration": 100,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/tours/5fa181b202945b26c456176a`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((error, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.a('object')\n    body.should.have.property('title')\n    body.should.have.property('_id').eql('5fa181b202945b26c456176a')\n    done()\n  })",
                  "err": {},
                  "uuid": "303221db-dc38-49eb-99f7-12b1198dfeb5",
                  "parentUUID": "e79f2c9d-da85-471f-a154-a15190c5f110",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET a tour by the given slug",
                  "fullTitle": "*********** TOURS_USERS *********** /GET/:id tour it should GET a tour by the given slug",
                  "timedOut": false,
                  "duration": 92,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/tours/tour-one`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((error, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.a('object')\n    body.should.have.property('title')\n    body.should.have.property('slug').eql('tour-one')\n    done()\n  })",
                  "err": {},
                  "uuid": "7054e139-6154-4596-ab7d-9eb7b4d9ef5b",
                  "parentUUID": "e79f2c9d-da85-471f-a154-a15190c5f110",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "303221db-dc38-49eb-99f7-12b1198dfeb5",
                "7054e139-6154-4596-ab7d-9eb7b4d9ef5b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 192,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "3df9e37a-1e6b-4787-98b2-0481a74a0086",
          "title": "*********** MANAGER_USERS ***********",
          "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\users.js",
          "file": "\\test\\testApi\\users.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"*********** MANAGER_USERS ***********\"",
              "fullTitle": "*********** MANAGER_USERS *********** \"after all\" hook in \"*********** MANAGER_USERS ***********\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "createdID.forEach((id) => {\n  User.findByIdAndRemove(id, (err) => {\n    if (err) {\n      // console.log(err)\n    }\n  })\n})",
              "err": {},
              "uuid": "ac682664-9860-4c18-be46-1e24a1781ac7",
              "parentUUID": "3df9e37a-1e6b-4787-98b2-0481a74a0086",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "45e3b57f-11e2-4f30-a6ea-0908298810ef",
              "title": "/POST login",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\users.js",
              "file": "\\test\\testApi\\users.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET token user",
                  "fullTitle": "*********** MANAGER_USERS *********** /POST login it should GET token user",
                  "timedOut": false,
                  "duration": 255,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/login`)\n  .send(loginDetails)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('object')\n    res.body.should.include.keys('accessToken', 'user')\n    const currentAccessToken = res.body.accessToken\n    accessToken = currentAccessToken\n    done()\n  })",
                  "err": {},
                  "uuid": "f774f595-26b3-4e4c-93cc-0730643e5d8e",
                  "parentUUID": "45e3b57f-11e2-4f30-a6ea-0908298810ef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET a fresh token",
                  "fullTitle": "*********** MANAGER_USERS *********** /POST login it should GET a fresh token",
                  "timedOut": false,
                  "duration": 351,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/exchange`)\n  .send({\n    accessToken\n  })\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.an('object')\n    body.should.include.keys('token', 'user')\n    const currentToken = body.token\n    token = currentToken\n    publicId = res.body.user._id\n    done()\n  })",
                  "err": {},
                  "uuid": "cb875023-e26c-42a1-90a6-455ab7b9e5f2",
                  "parentUUID": "45e3b57f-11e2-4f30-a6ea-0908298810ef",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f774f595-26b3-4e4c-93cc-0730643e5d8e",
                "cb875023-e26c-42a1-90a6-455ab7b9e5f2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 606,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "a98b2ae9-55e5-422f-8676-424deac9e567",
              "title": "/GET users",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\users.js",
              "file": "\\test\\testApi\\users.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET public profile",
                  "fullTitle": "*********** MANAGER_USERS *********** /GET users it should GET public profile",
                  "timedOut": false,
                  "duration": 175,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/users/public/${publicId}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('object')\n    res.body.should.have.property('id').eql(publicId)\n    done()\n  })",
                  "err": {},
                  "uuid": "dfa4c955-47e8-4d31-8516-a66cb73d54a9",
                  "parentUUID": "a98b2ae9-55e5-422f-8676-424deac9e567",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dfa4c955-47e8-4d31-8516-a66cb73d54a9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 175,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "42422213-3f9c-4ac6-9474-1ca6e5ee24f4",
          "title": "*********** WALLETS_USERS ***********",
          "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\wallets.js",
          "file": "\\test\\testApi\\wallets.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"*********** WALLETS_USERS ***********\"",
              "fullTitle": "*********** WALLETS_USERS *********** \"after all\" hook in \"*********** WALLETS_USERS ***********\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "collectionPayOrder.deleteMany({}, (err) => {\n  if (err) {\n    // console.log(err)\n  }\n})",
              "err": {},
              "uuid": "e893600d-4f05-447f-a87d-43f9698342d8",
              "parentUUID": "42422213-3f9c-4ac6-9474-1ca6e5ee24f4",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "dd12e239-7aec-45dc-badd-4e46fc1b1c47",
              "title": "/POST login",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\wallets.js",
              "file": "\\test\\testApi\\wallets.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET token user",
                  "fullTitle": "*********** WALLETS_USERS *********** /POST login it should GET token user",
                  "timedOut": false,
                  "duration": 282,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/login`)\n  .send(loginDetails)\n  .end((err, res) => {\n    res.should.have.status(200)\n    res.body.should.be.an('object')\n    res.body.should.include.keys('accessToken', 'user')\n    const currentAccessToken = res.body.accessToken\n    accessToken = currentAccessToken\n    done()\n  })",
                  "err": {},
                  "uuid": "44bdbba1-db90-4fb1-b8fa-856319197bbc",
                  "parentUUID": "dd12e239-7aec-45dc-badd-4e46fc1b1c47",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET a fresh token",
                  "fullTitle": "*********** WALLETS_USERS *********** /POST login it should GET a fresh token",
                  "timedOut": false,
                  "duration": 339,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post(`${url}/exchange`)\n  .send({\n    accessToken\n  })\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    body.should.be.an('object')\n    body.should.include.keys('token', 'user')\n    const currentToken = body.token\n    token = currentToken\n    done()\n  })",
                  "err": {},
                  "uuid": "504dce8d-1f69-4da5-a54c-dbb824d881e6",
                  "parentUUID": "dd12e239-7aec-45dc-badd-4e46fc1b1c47",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "44bdbba1-db90-4fb1-b8fa-856319197bbc",
                "504dce8d-1f69-4da5-a54c-dbb824d881e6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 621,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "ce00dc81-b57c-49b5-9a93-62508de6fe7f",
              "title": "/GET wallets",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\wallets.js",
              "file": "\\test\\testApi\\wallets.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should NOT be able to consume the route since no token was sent",
                  "fullTitle": "*********** WALLETS_USERS *********** /GET wallets it should NOT be able to consume the route since no token was sent",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/wallets`)\n  .end((err, res) => {\n    res.should.have.status(401)\n    done()\n  })",
                  "err": {},
                  "uuid": "eb1d9e7a-9f75-4575-8031-969330c70ca4",
                  "parentUUID": "ce00dc81-b57c-49b5-9a93-62508de6fe7f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET to wallets",
                  "fullTitle": "*********** WALLETS_USERS *********** /GET wallets it should GET to wallets",
                  "timedOut": false,
                  "duration": 254,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get(`${url}/wallets`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(200)\n    const { docs, total } = body\n    body.should.be.a('object')\n    body.hasNextPage.should.be.a('boolean')\n    body.hasPrevPage.should.be.a('boolean')\n    body.limit.should.be.a('number')\n    body.page.should.be.a('number')\n    body.pagingCounter.should.be.a('number')\n    body.totalDocs.should.be.a('number')\n    body.should.include.keys('total', 'docs')\n    docs.should.be.a('array').length(0)\n    total.should.be.a('number').eql(0)\n    done()\n  })",
                  "err": {},
                  "uuid": "6c7ed684-b6ff-4dfd-9e6f-f11179b3b760",
                  "parentUUID": "ce00dc81-b57c-49b5-9a93-62508de6fe7f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eb1d9e7a-9f75-4575-8031-969330c70ca4",
                "6c7ed684-b6ff-4dfd-9e6f-f11179b3b760"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 257,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "4a7bb460-edc2-4226-adb4-38142433b4fb",
              "title": "/POST postPayOrder",
              "fullFile": "C:\\Users\\USUARIO\\Documents\\empresa\\mochileros 3.0\\api\\test\\testApi\\wallets.js",
              "file": "\\test\\testApi\\wallets.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should NOT POST  without params",
                  "fullTitle": "*********** WALLETS_USERS *********** /POST postPayOrder it should NOT POST  without params",
                  "timedOut": false,
                  "duration": 90,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const orderPost = {\n  token: TokenCard\n}\nchai\n  .request(server)\n  .post(`${url}/stripe`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(orderPost)\n  .end((err, res) => {\n    const { body } = res\n    res.should.have.status(422)\n    body.should.be.a('object')\n    body.should.have.property('errors')\n    const { errors } = body\n    errors.should.be.a('object')\n    errors.msg.should.be.a('array').length(2)\n    // errors[0].should.have.property('msg').eql('Invalid integer: NaN')\n    done()\n  })",
                  "err": {},
                  "uuid": "37c5d6ef-f51e-4f74-8522-628f3f64d242",
                  "parentUUID": "4a7bb460-edc2-4226-adb4-38142433b4fb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should POST a Stripe with amount ",
                  "fullTitle": "*********** WALLETS_USERS *********** /POST postPayOrder it should POST a Stripe with amount ",
                  "timedOut": false,
                  "duration": 3225,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const orderPost = {\n  token: TokenCard,\n  amount: price,\n  pk\n}\nchai\n  .request(server)\n  .post(`${url}/stripe`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(orderPost)\n  .end((err, res) => {\n    res.should.have.status(201)\n    res.body.should.be.a('object')\n    res.body.should.include.keys('id', 'client_secret')\n    const customData = res.body\n    chai\n      .request(server)\n      .patch(`${url}/payorders/${res.body.id}`)\n      .set('Authorization', `Bearer ${token}`)\n      .send(customData)\n      .end((error, result) => {\n        const { body } = result\n        result.should.have.status(200)\n        body.should.be.a('object')\n        body.should.include.keys('_id', 'idOperation')\n        body.should.have.property('status').eql('succeeded')\n        body.should.have.property('idOperation').eql(res.body.id)\n        body.should.have.property('amount').to.be.a('Number')\n        body.should.have.property('amount').eql(price)\n        done()\n      })\n  })",
                  "err": {},
                  "uuid": "af72f17e-0983-4d49-a909-270f7bd76a4e",
                  "parentUUID": "4a7bb460-edc2-4226-adb4-38142433b4fb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "37c5d6ef-f51e-4f74-8522-628f3f64d242",
                "af72f17e-0983-4d49-a909-270f7bd76a4e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3315,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 30000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.3.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": null,
      "version": "5.2.0"
    }
  }
}